"""
This type stub file was generated by pyright.
"""

class Rename:
    """A class for performing rename refactoring

    It can rename everything: classes, functions, modules, packages,
    methods, variables and keyword arguments.

    """
    def __init__(self, project, resource, offset=...) -> None:
        """If `offset` is None, the `resource` itself will be renamed"""
        ...
    
    def get_old_name(self): # -> Any:
        ...
    
    def get_changes(self, new_name, in_file=..., in_hierarchy=..., unsure=..., docs=..., resources=..., task_handle=...): # -> ChangeSet:
        """Get the changes needed for this refactoring

        Parameters:

        - `in_hierarchy`: when renaming a method this keyword forces
          to rename all matching methods in the hierarchy
        - `docs`: when `True` rename refactoring will rename
          occurrences in comments and strings where the name is
          visible.  Setting it will make renames faster, too.
        - `unsure`: decides what to do about unsure occurrences.
          If `None`, they are ignored.  Otherwise `unsure` is
          called with an instance of `occurrence.Occurrence` as
          parameter.  If it returns `True`, the occurrence is
          considered to be a match.
        - `resources` can be a list of `rope.base.resources.File` to
          apply this refactoring on.  If `None`, the restructuring
          will be applied to all python files.
        - `in_file`: this argument has been deprecated; use
          `resources` instead.

        """
        ...
    
    def validate_changes(self, new_name: str, **_unused): # -> None:
        ...
    
    def is_method(self): # -> bool:
        ...
    


class ChangeOccurrences:
    """A class for changing the occurrences of a name in a scope

    This class replaces the occurrences of a name.  Note that it only
    changes the scope containing the offset passed to the constructor.
    What's more it does not have any side-effects.  That is for
    example changing occurrences of a module does not rename the
    module; it merely replaces the occurrences of that module in a
    scope with the given expression.  This class is useful for
    performing many custom refactorings.

    """
    def __init__(self, project, resource, offset) -> None:
        ...
    
    def get_old_name(self): # -> Any:
        ...
    
    def get_changes(self, new_name, only_calls=..., reads=..., writes=...): # -> ChangeSet:
        ...
    


def rename_in_module(occurrences_finder, new_name, resource=..., pymodule=..., replace_primary=..., region=..., reads=..., writes=...): # -> LiteralString | None:
    """Returns the changed source or `None` if there is no changes"""
    ...

