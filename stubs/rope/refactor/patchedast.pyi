"""
This type stub file was generated by pyright.
"""

from rope.base import exceptions

COMMA_IN_WITH_PATTERN = ...
def get_patched_ast(source, sorted_children=...): # -> Module:
    """Adds ``region`` and ``sorted_children`` fields to nodes

    Adds ``sorted_children`` field only if `sorted_children` is True.

    """
    ...

def patch_ast(node, source, sorted_children=...):
    """Patches the given node

    After calling, each node in `node` will have a new field named
    `region` that is a tuple containing the start and end offsets
    of the code that generated it.

    If `sorted_children` is true, a `sorted_children` field will
    be created for each node, too.  It is a list containing child
    nodes as well as whitespaces and comments that occur between
    them.

    """
    ...

def node_region(patched_ast_node):
    """Get the region of a patched ast node"""
    ...

def write_ast(patched_ast_node): # -> LiteralString:
    """Extract source form a patched AST node with `sorted_children` field

    If the node is patched with sorted_children turned off you can use
    `node_region` function for obtaining code using module source code.
    """
    ...

class MismatchedTokenError(exceptions.RopeError):
    ...


class _PatchingASTWalker:
    def __init__(self, source, children=...) -> None:
        ...
    
    Number = ...
    String = ...
    with_or_comma_context_manager = ...
    empty_tuple = ...
    def __call__(self, node): # -> Any | None:
        ...
    
    _operators = ...


class _Source:
    def __init__(self, source) -> None:
        ...
    
    def consume(self, token, skip_comment=...): # -> tuple[Any, Any]:
        ...
    
    def consume_joined_string(self, token): # -> tuple[Any, Any]:
        ...
    
    def consume_string(self, end=...): # -> tuple[Any, Any]:
        ...
    
    def consume_number(self): # -> tuple[Any, Any]:
        ...
    
    def consume_empty_tuple(self): # -> tuple[Any, Any]:
        ...
    
    def consume_with_or_comma_context_manager(self): # -> tuple[Any, Any]:
        ...
    
    def till_token(self, token):
        ...
    
    def rfind_token(self, token, start, end): # -> None:
        ...
    
    def from_offset(self, offset):
        ...
    
    def find_backwards(self, pattern, offset):
        ...
    
    def __getitem__(self, index):
        ...
    
    def __getslice__(self, i, j):
        ...
    
    _string_pattern = ...
    _number_pattern = ...


