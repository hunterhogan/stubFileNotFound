"""
This type stub file was generated by pyright.
"""

from rope.base import utils

def unique_prefix(): # -> Generator[str, Any, NoReturn]:
    ...

def create_inline(project, resource, offset): # -> InlineVariable | InlineParameter | InlineMethod:
    """Create a refactoring object for inlining

    Based on `resource` and `offset` it returns an instance of
    `InlineMethod`, `InlineVariable` or `InlineParameter`.

    """
    ...

class _Inliner:
    def __init__(self, project, resource, offset) -> None:
        ...
    
    def get_changes(self, *args, **kwds): # -> None:
        ...
    
    def get_kind(self): # -> None:
        """Return either 'variable', 'method' or 'parameter'"""
        ...
    


class InlineMethod(_Inliner):
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def get_changes(self, remove=..., only_current=..., resources=..., task_handle=...): # -> ChangeSet:
        """Get the changes this refactoring makes

        If `remove` is `False` the definition will not be removed.  If
        `only_current` is `True`, the the current occurrence will be
        inlined, only.
        """
        ...
    
    def get_kind(self): # -> Literal['method']:
        ...
    


class InlineVariable(_Inliner):
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def get_changes(self, remove=..., only_current=..., resources=..., docs=..., task_handle=...): # -> ChangeSet:
        ...
    
    def get_kind(self): # -> Literal['variable']:
        ...
    


class InlineParameter(_Inliner):
    def __init__(self, *args, **kwds) -> None:
        ...
    
    def get_changes(self, **kwds):
        """Get the changes needed by this refactoring

        See `rope.refactor.change_signature.ChangeSignature.get_changes()`
        for arguments.
        """
        ...
    
    def get_kind(self): # -> Literal['parameter']:
        ...
    


class _ComplexExpressionVisitor:
    def __init__(self) -> None:
        ...
    


class _DefinitionGenerator:
    unique_prefix = ...
    def __init__(self, project, pyfunction, body=...) -> None:
        ...
    
    def get_function_name(self):
        ...
    
    def get_definition(self, primary, pyname, call, host_vars=..., returns=...): # -> tuple[LiteralString, str | None]:
        ...
    


class _InlineFunctionCallsForModuleHandle:
    def __init__(self, project, resource, definition_generator, aim_offset=...) -> None:
        """Inlines occurrences

        If `aim` is not `None` only the occurrences that intersect
        `aim` offset will be inlined.

        """
        ...
    
    def occurred_inside_skip(self, change_collector, occurrence): # -> None:
        ...
    
    def occurred_outside_skip(self, change_collector, occurrence): # -> None:
        ...
    
    @property
    @utils.saveit
    def pymodule(self):
        ...
    
    @property
    @utils.saveit
    def source(self):
        ...
    
    @property
    @utils.saveit
    def lines(self):
        ...
    


