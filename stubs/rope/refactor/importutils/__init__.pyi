"""
This type stub file was generated by pyright.
"""

import rope.base.codeanalyze
import rope.base.evaluate
from rope.base import libutils
from rope.base.prefs import ImportStyle, get_preferred_import_style
from rope.base.change import ChangeContents, ChangeSet
from rope.refactor import occurrences, rename
from rope.refactor.importutils import actions, module_imports
from rope.refactor.importutils.importinfo import FromImport, NormalImport

"""A package for handling imports

This package provides tools for modifying module imports after
refactorings or as a separate task.

"""
class ImportOrganizer:
    """Perform some import-related commands

    Each method returns a `rope.base.change.Change` object.

    """
    def __init__(self, project) -> None:
        ...
    
    def organize_imports(self, resource, offset=...): # -> ChangeSet | None:
        ...
    
    def expand_star_imports(self, resource, offset=...): # -> ChangeSet | None:
        ...
    
    def froms_to_imports(self, resource, offset=...): # -> ChangeSet | None:
        ...
    
    def relatives_to_absolutes(self, resource, offset=...): # -> ChangeSet | None:
        ...
    
    def handle_long_imports(self, resource, offset=...): # -> ChangeSet | None:
        ...
    


class ImportTools:
    def __init__(self, project) -> None:
        ...
    
    def get_import(self, resource): # -> NormalImport:
        """The import statement for `resource`"""
        ...
    
    def get_from_import(self, resource, name): # -> FromImport:
        """The from import statement for `name` in `resource`"""
        ...
    
    def module_imports(self, module, imports_filter=...): # -> ModuleImports:
        ...
    
    def froms_to_imports(self, pymodule, import_filter=...): # -> LiteralString:
        ...
    
    def expand_stars(self, pymodule, import_filter=...): # -> LiteralString:
        ...
    
    def relatives_to_absolutes(self, pymodule, import_filter=...): # -> str | LiteralString:
        ...
    
    def organize_imports(self, pymodule, unused=..., duplicates=..., selfs=..., sort=..., import_filter=...): # -> LiteralString | str:
        ...
    
    def sort_imports(self, pymodule, import_filter=...): # -> LiteralString:
        ...
    
    def handle_long_imports(self, pymodule, maxdots=..., maxlength=..., import_filter=...): # -> LiteralString | str:
        ...
    


def get_imports(project, pydefined): # -> list[Any]:
    """A shortcut for getting the `ImportInfo` used in a scope"""
    ...

def get_module_imports(project, pymodule): # -> ModuleImports:
    """A shortcut for creating a `module_imports.ModuleImports` object"""
    ...

def add_import(project, pymodule, module_name, name=...): # -> tuple[LiteralString, Any]:
    ...

