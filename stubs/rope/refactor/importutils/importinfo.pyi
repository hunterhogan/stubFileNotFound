"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import List, Optional, Tuple

class ImportStatement:
    """Represent an import in a module

    `readonly` attribute controls whether this import can be changed
    by import actions or not.

    """
    def __init__(self, import_info, start_line, end_line, main_statement=..., blank_lines=...) -> None:
        ...
    
    import_info = ...
    def get_import_statement(self): # -> str | Any:
        ...
    
    def empty_import(self): # -> None:
        ...
    
    def move(self, lineno, blank_lines=...): # -> None:
        ...
    
    def get_old_location(self): # -> tuple[Any, Any]:
        ...
    
    def get_new_start(self): # -> None:
        ...
    
    def is_changed(self): # -> bool:
        ...
    
    def accept(self, visitor):
        ...
    


class ImportInfo(ABC):
    names_and_aliases: List[Tuple[str, Optional[str]]]
    @abstractmethod
    def get_imported_primaries(self, context) -> List[str]:
        ...
    
    def get_imported_names(self, context): # -> list[str]:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @abstractmethod
    def get_import_statement(self) -> str:
        ...
    
    def is_empty(self): # -> None:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __eq__(self, obj) -> bool:
        ...
    
    def __ne__(self, obj) -> bool:
        ...
    
    @staticmethod
    def get_empty_import(): # -> EmptyImport:
        ...
    


class NormalImport(ImportInfo):
    def __init__(self, names_and_aliases: List[Tuple[str, Optional[str]]]) -> None:
        ...
    
    def get_imported_primaries(self, context) -> List[str]:
        ...
    
    def get_import_statement(self) -> str:
        ...
    
    def is_empty(self): # -> bool:
        ...
    


class FromImport(ImportInfo):
    module_name: str
    level: int
    def __init__(self, module_name: str, level: int, names_and_aliases: List[Tuple[str, Optional[str]]]) -> None:
        ...
    
    def get_imported_primaries(self, context) -> List[str]:
        ...
    
    def get_imported_resource(self, context):
        """Get the imported resource

        Returns `None` if module was not found.
        """
        ...
    
    def get_imported_module(self, context):
        """Get the imported `PyModule`

        Raises `rope.base.exceptions.ModuleNotFoundError` if module
        could not be found.
        """
        ...
    
    def get_import_statement(self) -> str:
        ...
    
    def is_empty(self): # -> bool:
        ...
    
    def is_star_import(self): # -> bool:
        ...
    


class EmptyImport(ImportInfo):
    names_and_aliases = ...
    def is_empty(self): # -> Literal[True]:
        ...
    
    def get_imported_primaries(self, context) -> List[str]:
        ...
    
    def get_import_statement(self) -> str:
        ...
    


class ImportContext:
    def __init__(self, project, folder) -> None:
        ...
    


