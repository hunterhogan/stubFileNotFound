"""
This type stub file was generated by pyright.
"""

from rope.base import ast, utils

class ModuleImports:
    def __init__(self, project, pymodule, import_filter=...) -> None:
        ...
    
    @property
    @utils.saveit
    def imports(self): # -> list[Any]:
        ...
    
    def remove_unused_imports(self): # -> None:
        ...
    
    def get_used_imports(self, defined_pyobject): # -> list[Any]:
        ...
    
    def get_changed_source(self): # -> LiteralString:
        ...
    
    def add_import(self, import_info): # -> None:
        ...
    
    def filter_names(self, can_select): # -> None:
        ...
    
    def expand_stars(self): # -> None:
        ...
    
    def remove_duplicates(self): # -> None:
        ...
    
    def force_single_imports(self): # -> None:
        """force a single import per statement"""
        ...
    
    def get_relative_to_absolute_list(self): # -> list[Any]:
        ...
    
    def get_self_import_fix_and_rename_list(self): # -> tuple[set[Any], set[Any]]:
        ...
    
    def sort_imports(self): # -> None:
        ...
    
    def handle_long_imports(self, maxdots, maxlength): # -> set[Any]:
        ...
    
    def remove_pyname(self, pyname): # -> None:
        """Removes pyname when imported in ``from mod import x``"""
        ...
    


def get_first_decorator_or_function_start_line(node): # -> Any:
    ...

class _OneTimeSelector:
    def __init__(self, names) -> None:
        ...
    
    def __call__(self, imported_primary): # -> bool:
        ...
    


class _UnboundNameFinder(ast.RopeNodeVisitor):
    def __init__(self, pyobject) -> None:
        ...
    
    def is_bound(self, name, propagated=...): # -> None:
        ...
    
    def add_unbound(self, name): # -> None:
        ...
    


class _GlobalUnboundNameFinder(_UnboundNameFinder):
    def __init__(self, pymodule, wanted_pyobject) -> None:
        ...
    
    def is_bound(self, primary, propagated=...): # -> bool:
        ...
    
    def add_unbound(self, name): # -> None:
        ...
    


class _LocalUnboundNameFinder(_UnboundNameFinder):
    def __init__(self, pyobject, parent) -> None:
        ...
    
    def is_bound(self, primary, propagated=...): # -> Literal[True]:
        ...
    
    def add_unbound(self, name): # -> None:
        ...
    


class _GlobalImportFinder:
    def __init__(self, pymodule) -> None:
        ...
    
    def visit_import(self, node, end_line): # -> None:
        ...
    
    def get_separating_line_count(self): # -> int:
        ...
    
    def visit_from(self, node, end_line): # -> None:
        ...
    
    def find_import_statements(self): # -> list[Any]:
        ...
    


