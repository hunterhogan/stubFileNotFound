"""
This type stub file was generated by pyright.
"""

class ImportInfoVisitor:
    def dispatch(self, import_): # -> Any | None:
        ...
    
    def visitEmptyImport(self, import_stmt, import_info): # -> None:
        ...
    
    def visitNormalImport(self, import_stmt, import_info): # -> None:
        ...
    
    def visitFromImport(self, import_stmt, import_info): # -> None:
        ...
    


class RelativeToAbsoluteVisitor(ImportInfoVisitor):
    def __init__(self, project, current_folder) -> None:
        ...
    
    def visitNormalImport(self, import_stmt, import_info): # -> None:
        ...
    
    def visitFromImport(self, import_stmt, import_info): # -> None:
        ...
    


class FilteringVisitor(ImportInfoVisitor):
    def __init__(self, project, folder, can_select) -> None:
        ...
    
    def visitNormalImport(self, import_stmt, import_info): # -> NormalImport:
        ...
    
    def visitFromImport(self, import_stmt, import_info): # -> FromImport:
        ...
    


class RemovingVisitor(ImportInfoVisitor):
    def __init__(self, project, folder, can_select) -> None:
        ...
    
    def dispatch(self, import_): # -> None:
        ...
    


class AddingVisitor(ImportInfoVisitor):
    """A class for adding imports

    Given a list of `ImportInfo`, it tries to add each import to the
    module and returns `True` and gives up when an import can be added
    to older ones.

    """
    def __init__(self, project, import_list) -> None:
        ...
    
    def dispatch(self, import_): # -> Literal[True] | None:
        ...
    
    def visitNormalImport(self, import_stmt, import_info): # -> bool | None:
        ...
    
    def visitFromImport(self, import_stmt, import_info): # -> Literal[True] | None:
        ...
    


class ExpandStarsVisitor(ImportInfoVisitor):
    def __init__(self, project, folder, can_select) -> None:
        ...
    
    def visitNormalImport(self, import_stmt, import_info): # -> None:
        ...
    
    def visitFromImport(self, import_stmt, import_info): # -> None:
        ...
    


class SelfImportVisitor(ImportInfoVisitor):
    def __init__(self, project, current_folder, resource) -> None:
        ...
    
    def visitNormalImport(self, import_stmt, import_info): # -> None:
        ...
    
    def visitFromImport(self, import_stmt, import_info): # -> None:
        ...
    


class SortingVisitor(ImportInfoVisitor):
    def __init__(self, project, current_folder) -> None:
        ...
    
    def visitNormalImport(self, import_stmt, import_info): # -> None:
        ...
    
    def visitFromImport(self, import_stmt, import_info): # -> None:
        ...
    


class LongImportVisitor(ImportInfoVisitor):
    def __init__(self, current_folder, project, maxdots, maxlength) -> None:
        ...
    
    def visitNormalImport(self, import_stmt, import_info): # -> None:
        ...
    


class RemovePyNameVisitor(ImportInfoVisitor):
    def __init__(self, project, pymodule, pyname, folder) -> None:
        ...
    
    def visitFromImport(self, import_stmt, import_info): # -> FromImport:
        ...
    
    def dispatch(self, import_): # -> None:
        ...
    


