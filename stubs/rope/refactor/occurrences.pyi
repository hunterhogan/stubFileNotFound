"""
This type stub file was generated by pyright.
"""

from rope.base import utils
from typing import Iterator

"""Find occurrences of a name in a project.

This module consists of a `Finder` that finds all occurrences of a name
in a project. The `Finder.find_occurrences()` method is a generator that
yields `Occurrence` instances for each occurrence of the name. To create
a `Finder` object, use the `create_finder()` function:

    finder = occurrences.create_finder(project, 'foo', pyname)
    for occurrence in finder.find_occurrences():
        pass

It's possible to filter the occurrences. They can be specified when
calling the `create_finder()` function.

  * `only_calls`: If True, return only those instances where the name is
    a function that's being called.

  * `imports`: If False, don't return instances that are in import
    statements.

  * `unsure`: If a predicate function, return instances where we don't
    know what the name references. It also filters based on the
    predicate function.

  * `docs`: If True, it will search for occurrences in regions normally
    ignored. E.g., strings and comments.

  * `in_hierarchy`: If True, it will find occurrences if the name is in
    the class's hierarchy.

  * `instance`: Used only when you want implicit interfaces to be
    considered.

  * `keywords`: If False, don't return instances that are the names of keyword
    arguments
"""
class Finder:
    """For finding occurrences of a name

    The constructor takes a `filters` argument.  It should be a list
    of functions that take a single argument.  For each possible
    occurrence, these functions are called in order with the an
    instance of `Occurrence`:

      * If it returns `None` other filters are tried.
      * If it returns `True`, the occurrence will be a match.
      * If it returns `False`, the occurrence will be skipped.
      * If all of the filters return `None`, it is skipped also.

    """
    def __init__(self, project, name, filters=..., docs=...) -> None:
        ...

    def find_occurrences(self, resource=..., pymodule=...): # -> Generator[Occurrence, Any, None]:
        """Generate `Occurrence` instances"""
        ...



def create_finder(project, name, pyname, only_calls=..., imports=..., unsure=..., docs=..., instance=..., in_hierarchy=..., keywords=...): # -> Finder:
    """A factory for `Finder`

    Based on the arguments it creates a list of filters.  `instance`
    argument is needed only when you want implicit interfaces to be
    considered.

    """
    ...

class Occurrence:
    def __init__(self, tools, offset) -> None:
        ...

    @utils.saveit
    def get_word_range(self):
        ...

    @utils.saveit
    def get_primary_range(self):
        ...

    @utils.saveit
    def get_pyname(self): # -> None:
        ...

    @utils.saveit
    def get_primary_and_pyname(self): # -> None:
        ...

    @utils.saveit
    def is_in_import_statement(self):
        ...

    def is_called(self):
        ...

    def is_defined(self):
        ...

    def is_a_fixed_primary(self):
        ...

    def is_written(self):
        ...

    def is_unsure(self): # -> bool | None:
        ...

    def is_function_keyword_parameter(self):
        ...

    @property
    @utils.saveit
    def lineno(self):
        ...



def same_pyname(expected, pyname): # -> bool:
    """Check whether `expected` and `pyname` are the same"""
    ...

def unsure_pyname(pyname, unbound=...): # -> bool | None:
    """Return `True` if we don't know what this name references"""
    ...

class PyNameFilter:
    """For finding occurrences of a name."""
    def __init__(self, pyname) -> None:
        ...

    def __call__(self, occurrence): # -> Literal[True] | None:
        ...



class InHierarchyFilter:
    """Finds the occurrence if the name is in the class's hierarchy."""
    def __init__(self, pyname, implementations_only=...) -> None:
        ...

    def __call__(self, occurrence): # -> Literal[True] | None:
        ...



class UnsureFilter:
    """Occurrences where we don't knoow what the name references."""
    def __init__(self, unsure) -> None:
        ...

    def __call__(self, occurrence): # -> Literal[True] | None:
        ...



class NoImportsFilter:
    """Don't include import statements as occurrences."""
    def __call__(self, occurrence): # -> Literal[False] | None:
        ...



class CallsFilter:
    """Filter out non-call occurrences."""
    def __call__(self, occurrence): # -> Literal[False] | None:
        ...



class NoKeywordsFilter:
    """Filter out keyword parameters."""
    def __call__(self, occurrence): # -> Literal[False] | None:
        ...



class _TextualFinder:
    def __init__(self, name, docs=...) -> None:
        ...

    def find_offsets(self, source: str) -> Iterator[int]:
        ...

    @staticmethod
    def any(name, list_):
        ...



class _OccurrenceToolsCreator:
    def __init__(self, project, resource=..., pymodule=..., docs=...) -> None:
        ...

    @property
    @utils.saveit
    def name_finder(self): # -> ScopeNameFinder:
        ...

    @property
    @utils.saveit
    def source_code(self):
        ...

    @property
    @utils.saveit
    def word_finder(self): # -> Worder:
        ...

    @property
    @utils.saveit
    def resource(self): # -> None:
        ...

    @property
    @utils.saveit
    def pymodule(self):
        ...



