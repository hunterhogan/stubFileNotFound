"""
This type stub file was generated by pyright.
"""

import rope.base.pynames
from typing import Optional, Tuple
from rope.base import ast, exceptions

BadIdentifierError = exceptions.BadIdentifierError
def eval_location(pymodule, offset): # -> PyName | None:
    """Find the pyname at the offset"""
    ...

def eval_location2(pymodule, offset): # -> Tuple[PyName | None, PyName | None]:
    """Find the primary and pyname at offset"""
    ...

def eval_node(scope, node): # -> UnboundName | None:
    """Evaluate a `ast.AST` node and return a PyName

    Return `None` if the expression cannot be evaluated.
    """
    ...

def eval_node2(scope, node): # -> tuple[UnboundName | Any | None, Any | UnboundName | None]:
    ...

def eval_str(holding_scope, name): # -> UnboundName | None:
    ...

def eval_str2(holding_scope, name): # -> tuple[UnboundName | Any | None, Any | UnboundName | None]:
    ...

class ScopeNameFinder:
    def __init__(self, pymodule) -> None:
        ...
    
    def get_pyname_at(self, offset): # -> PyName | None:
        ...
    
    def get_primary_and_pyname_at(self, offset: int) -> Tuple[Optional[rope.base.pynames.PyName], Optional[rope.base.pynames.PyName]]:
        ...
    
    def get_enclosing_function(self, offset): # -> None:
        ...
    


class StatementEvaluator(ast.RopeNodeVisitor):
    def __init__(self, scope) -> None:
        ...
    


