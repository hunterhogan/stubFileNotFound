"""
This type stub file was generated by pyright.
"""

class ResourceObserver:
    """Provides the interface for observing resources

    `ResourceObserver` can be registered using `Project.
    add_observer()`.  But most of the time `FilteredResourceObserver`
    should be used.  `ResourceObserver` report all changes passed
    to them and they don't report changes to all resources.  For
    example if a folder is removed, it only calls `removed()` for that
    folder and not its contents.  You can use
    `FilteredResourceObserver` if you are interested in changes only
    to a list of resources.  And you want changes to be reported on
    individual resources.

    """
    def __init__(self, changed=..., moved=..., created=..., removed=..., validate=...) -> None:
        ...
    
    def resource_changed(self, resource): # -> None:
        """It is called when the resource changes"""
        ...
    
    def resource_moved(self, resource, new_resource): # -> None:
        """It is called when a resource is moved"""
        ...
    
    def resource_created(self, resource): # -> None:
        """Is called when a new resource is created"""
        ...
    
    def resource_removed(self, resource): # -> None:
        """Is called when a new resource is removed"""
        ...
    
    def validate(self, resource): # -> None:
        """Validate the existence of this resource and its children.

        This function is called when rope need to update its resource
        cache about the files that might have been changed or removed
        by other processes.

        """
        ...
    


class FilteredResourceObserver:
    """A useful decorator for `ResourceObserver`

    Most resource observers have a list of resources and are
    interested only in changes to those files.  This class satisfies
    this need.  It dispatches resource changed and removed messages.
    It performs these tasks:

    * Changes to files and folders are analyzed to check whether any
      of the interesting resources are changed or not.  If they are,
      it reports these changes to `resource_observer` passed to the
      constructor.
    * When a resource is removed it checks whether any of the
      interesting resources are contained in that folder and reports
      them to `resource_observer`.
    * When validating a folder it validates all of the interesting
      files in that folder.

    Since most resource observers are interested in a list of
    resources that change over time, `add_resource` and
    `remove_resource` might be useful.

    """
    def __init__(self, resource_observer, initial_resources=..., timekeeper=...) -> None:
        ...
    
    def add_resource(self, resource): # -> None:
        """Add a resource to the list of interesting resources"""
        ...
    
    def remove_resource(self, resource): # -> None:
        """Add a resource to the list of interesting resources"""
        ...
    
    def clear_resources(self): # -> None:
        """Removes all registered resources"""
        ...
    
    def resource_changed(self, resource): # -> None:
        ...
    
    def resource_moved(self, resource, new_resource): # -> None:
        ...
    
    def resource_created(self, resource): # -> None:
        ...
    
    def resource_removed(self, resource): # -> None:
        ...
    
    def validate(self, resource): # -> None:
        ...
    


class ChangeIndicator:
    def get_indicator(self, resource): # -> tuple[float, int, int] | tuple[float, int]:
        """Return the modification time and size of a `Resource`."""
        ...
    


class _Changes:
    def __init__(self) -> None:
        ...
    
    def add_changed(self, resource): # -> None:
        ...
    
    def add_removed(self, resource, new_resource=...): # -> None:
        ...
    
    def add_created(self, resource): # -> None:
        ...
    


