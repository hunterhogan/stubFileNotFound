"""
This type stub file was generated by pyright.
"""

MINIMAL_LEN_FOR_AS = ...
def get_name_at(resource, offset): # -> Any:
    ...

class Worder:
    """A class for finding boundaries of words and expressions

    Note that in these methods, offset should be the index of the
    character not the index of the character after it.

    Some of the methods here doesn't exactly do what their name might lead you
    to think they do, these probably should be fixed. Refer to
    ropetest/codeanalyzetest.py for what these methods returns. Note that
    codeanalyzetest.py documents the current behavior, rather than what they
    should've been.
    """
    def __init__(self, code, handle_ignores=...) -> None:
        ...
    
    def get_primary_at(self, offset): # -> Any:
        ...
    
    def get_word_at(self, offset): # -> Any:
        ...
    
    def get_primary_range(self, offset): # -> Any:
        ...
    
    def get_splitted_primary_before(self, offset): # -> Any:
        ...
    
    def get_word_range(self, offset): # -> Any:
        ...
    
    def is_function_keyword_parameter(self, offset): # -> bool:
        ...
    
    def is_a_class_or_function_name_in_header(self, offset): # -> bool:
        ...
    
    def is_from_statement_module(self, offset): # -> Literal[False]:
        ...
    
    def is_from_aliased(self, offset): # -> Literal[False]:
        ...
    
    def is_import_statement_aliased_module(self, offset): # -> Literal[False]:
        ...
    
    def find_parens_start_from_inside(self, offset): # -> int:
        ...
    
    def is_a_name_after_from_import(self, offset): # -> Literal[False]:
        ...
    
    def is_from_statement(self, offset): # -> Literal[False]:
        ...
    
    def get_from_aliased(self, offset): # -> None:
        ...
    
    def is_import_statement(self, offset): # -> Literal[False]:
        ...
    
    def is_assigned_here(self, offset): # -> bool:
        ...
    
    def is_a_function_being_called(self, offset): # -> bool:
        ...
    
    def get_word_parens_range(self, offset): # -> tuple[Any, Any]:
        ...
    
    def is_name_assigned_in_class_body(self, offset): # -> Literal[False]:
        ...
    
    def is_on_function_call_keyword(self, offset): # -> bool:
        ...
    
    def get_parameters(self, first, last): # -> tuple[list[Any], list[Any]]:
        ...
    
    def get_from_module(self, offset): # -> None:
        ...
    
    def is_assigned_in_a_tuple_assignment(self, offset): # -> Literal[False]:
        ...
    
    def get_assignment_type(self, offset): # -> None:
        ...
    
    def get_function_and_args_in_header(self, offset):
        ...
    
    def get_lambda_and_args(self, offset):
        ...
    
    def find_function_offset(self, offset): # -> int:
        ...
    


class _RealFinder:
    def __init__(self, code, raw) -> None:
        ...
    
    def get_word_at(self, offset):
        ...
    
    def get_primary_at(self, offset):
        ...
    
    def get_splitted_primary_before(self, offset): # -> tuple[Literal[''], Literal[''], Literal[0]] | tuple[Literal[''], Literal[''], Any] | tuple[Literal[''], Any, Any | int] | tuple[Any, Literal[''], Any] | tuple[Any, Any, Any | int]:
        """returns expression, starting, starting_offset

        This function is used in `rope.codeassist.assist` function.
        """
        ...
    
    def is_name_assigned_in_class_body(self, offset): # -> Literal[False]:
        ...
    
    def is_a_class_or_function_name_in_header(self, offset): # -> bool:
        ...
    
    def is_a_function_being_called(self, offset): # -> bool:
        ...
    
    def is_import_statement(self, offset): # -> Literal[False]:
        ...
    
    def is_from_statement(self, offset): # -> Literal[False]:
        ...
    
    def is_from_statement_module(self, offset): # -> Literal[False]:
        ...
    
    def is_import_statement_aliased_module(self, offset): # -> Literal[False]:
        ...
    
    def is_a_name_after_from_import(self, offset): # -> Literal[False]:
        ...
    
    def get_from_module(self, offset): # -> None:
        ...
    
    def is_from_aliased(self, offset): # -> Literal[False]:
        ...
    
    def get_from_aliased(self, offset): # -> None:
        ...
    
    def is_function_keyword_parameter(self, offset): # -> bool:
        ...
    
    def is_on_function_call_keyword(self, offset): # -> bool:
        ...
    
    def find_parens_start_from_inside(self, offset): # -> int:
        ...
    
    def is_assigned_here(self, offset): # -> bool:
        ...
    
    def get_assignment_type(self, offset): # -> None:
        ...
    
    def get_primary_range(self, offset): # -> tuple[Any | int, Any]:
        ...
    
    def get_word_range(self, offset): # -> tuple[int, int]:
        ...
    
    def get_word_parens_range(self, offset, opening=..., closing=...): # -> tuple[Any, Any]:
        ...
    
    def get_parameters(self, first, last): # -> tuple[list[Any], list[Any]]:
        ...
    
    def is_assigned_in_a_tuple_assignment(self, offset): # -> Literal[False]:
        ...
    
    def get_function_and_args_in_header(self, offset):
        ...
    
    def find_function_offset(self, offset, definition=...): # -> int:
        ...
    
    def get_lambda_and_args(self, offset):
        ...
    


