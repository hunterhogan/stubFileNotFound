"""
This type stub file was generated by pyright.
"""

from typing import Union
from rope.base.fscommands import FileContent

class Change:
    """The base class for changes

    Rope refactorings return `Change` objects.  They can be previewed,
    committed or undone.
    """
    def do(self, job_set=...): # -> None:
        """Perform the change

        .. note:: Do use this directly.  Use `Project.do()` instead.
        """
        ...
    
    def undo(self, job_set=...): # -> None:
        """Perform the change

        .. note:: Do use this directly.  Use `History.undo()` instead.
        """
        ...
    
    def get_description(self): # -> str:
        """Return the description of this change

        This can be used for previewing the changes.
        """
        ...
    
    def get_changed_resources(self): # -> list[Any]:
        """Return the list of resources that will be changed"""
        ...
    


class ChangeSet(Change):
    """A collection of `Change` objects

    This class holds a collection of changes.  This class provides
    these fields:

    * `changes`: the list of changes
    * `description`: the goal of these changes
    """
    def __init__(self, description, timestamp=...) -> None:
        ...
    
    def do(self, job_set=...): # -> None:
        ...
    
    def undo(self, job_set=...): # -> None:
        ...
    
    def add_change(self, change): # -> None:
        ...
    
    def get_description(self): # -> str:
        ...
    
    def __str__(self) -> str:
        ...
    
    def get_changed_resources(self): # -> set[Any]:
        ...
    


class ChangeContents(Change):
    """A class to change the contents of a file

    Fields:

    * `resource`: The `rope.base.resources.File` to change
    * `new_contents`: What to write in the file
    """
    def __init__(self, resource, new_contents, old_contents=...) -> None:
        ...
    
    @_handle_job_set
    def do(self): # -> None:
        ...
    
    @_handle_job_set
    def undo(self): # -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def get_description(self): # -> str:
        ...
    
    def get_changed_resources(self): # -> list[Any]:
        ...
    


class MoveResource(Change):
    """Move a resource to a new location

    Fields:

    * `resource`: The `rope.base.resources.Resource` to move
    * `new_resource`: The destination for move; It is the moved
      resource not the folder containing that resource.
    """
    def __init__(self, resource, new_location, exact=...) -> None:
        ...
    
    @_handle_job_set
    def do(self): # -> None:
        ...
    
    @_handle_job_set
    def undo(self): # -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def get_description(self): # -> str:
        ...
    
    def get_changed_resources(self): # -> list[Any]:
        ...
    


class CreateResource(Change):
    """A class to create a resource

    Fields:

    * `resource`: The resource to create
    """
    def __init__(self, resource) -> None:
        ...
    
    @_handle_job_set
    def do(self): # -> None:
        ...
    
    @_handle_job_set
    def undo(self): # -> None:
        ...
    
    def __str__(self) -> str:
        ...
    
    def get_description(self):
        ...
    
    def get_changed_resources(self): # -> list[Any]:
        ...
    


class CreateFolder(CreateResource):
    """A class to create a folder

    See docs for `CreateResource`.
    """
    def __init__(self, parent, name) -> None:
        ...
    


class CreateFile(CreateResource):
    """A class to create a file

    See docs for `CreateResource`.
    """
    def __init__(self, parent, name) -> None:
        ...
    


class RemoveResource(Change):
    """A class to remove a resource

    Fields:

    * `resource`: The resource to be removed
    """
    def __init__(self, resource) -> None:
        ...
    
    @_handle_job_set
    def do(self): # -> None:
        ...
    
    @_handle_job_set
    def undo(self):
        ...
    
    def __str__(self) -> str:
        ...
    
    def get_changed_resources(self): # -> list[Any]:
        ...
    


def count_changes(change): # -> int:
    """Counts the number of basic changes a `Change` will make"""
    ...

def create_job_set(task_handle, change):
    ...

class _ResourceOperations:
    def __init__(self, project) -> None:
        ...
    
    def write_file(self, resource, contents: Union[str, FileContent]): # -> None:
        ...
    
    def move(self, resource, new_resource): # -> None:
        ...
    
    def create(self, resource): # -> None:
        ...
    
    def remove(self, resource): # -> None:
        ...
    


class ChangeToData:
    def convertChangeSet(self, change): # -> tuple[Any, list[tuple[str, Any]], Any]:
        ...
    
    def convertChangeContents(self, change): # -> tuple[Any, Any, Any]:
        ...
    
    def convertMoveResource(self, change): # -> tuple[Any, Any]:
        ...
    
    def convertCreateResource(self, change): # -> tuple[Any, Any]:
        ...
    
    def convertRemoveResource(self, change): # -> tuple[Any, Any]:
        ...
    
    def __call__(self, change): # -> tuple[str, Any]:
        ...
    


class DataToChange:
    def __init__(self, project) -> None:
        ...
    
    def makeChangeSet(self, description, changes, time=...): # -> ChangeSet:
        ...
    
    def makeChangeContents(self, path, new_contents, old_contents): # -> ChangeContents:
        ...
    
    def makeMoveResource(self, old_path, new_path): # -> MoveResource:
        ...
    
    def makeCreateResource(self, path, is_folder): # -> CreateResource:
        ...
    
    def makeRemoveResource(self, path, is_folder): # -> RemoveResource:
        ...
    
    def __call__(self, data): # -> Any:
        ...
    


