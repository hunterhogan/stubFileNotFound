"""
This type stub file was generated by pyright.
"""

import typing
import rope.base.pyobjects
from rope.base import pyobjectsdef, utils
from typing import Union

if typing.TYPE_CHECKING:
    ...
class PyName:
    """References to `PyObject` inside python programs"""
    def get_object(self): # -> None:
        """Return the `PyObject` object referenced by this `PyName`"""
        ...
    
    def get_definition_location(self): # -> None:
        """Return a (module, lineno) tuple"""
        ...
    


class DefinedName(PyName):
    def __init__(self, pyobject) -> None:
        ...
    
    def get_object(self): # -> Any:
        ...
    
    def get_definition_location(self): # -> tuple[Any, Any]:
        ...
    


class AssignedName(PyName):
    ...


class UnboundName(PyName):
    def __init__(self, pyobject=...) -> None:
        ...
    
    def get_object(self): # -> None:
        ...
    
    def get_definition_location(self): # -> tuple[None, None]:
        ...
    


class AssignmentValue:
    """An assigned expression"""
    def __init__(self, ast_node, levels=..., evaluation=..., assign_type=..., type_hint=...) -> None:
        """The `level` is `None` for simple assignments and is
        a list of numbers for tuple assignments for example in::

           a, (b, c) = x

        The levels for for `a` is ``[0]``, for `b` is ``[1, 0]`` and for
        `c` is ``[1, 1]``.

        """
        ...
    
    def get_lineno(self):
        ...
    


class EvaluatedName(PyName):
    """A name whose object will be evaluated later"""
    def __init__(self, callback, module=..., lineno=...) -> None:
        ...
    
    def get_object(self): # -> None:
        ...
    
    def get_definition_location(self): # -> tuple[Any | None, Any | None]:
        ...
    
    def invalidate(self): # -> None:
        """Forget the `PyObject` this `PyName` holds"""
        ...
    


class ParameterName(PyName):
    ...


class ImportedModule(PyName):
    def __init__(self, importing_module: Union[pyobjectsdef.PyModule, pyobjectsdef.PyPackage,], module_name=..., level=..., resource=...) -> None:
        ...
    
    def get_object(self): # -> None:
        ...
    
    def get_definition_location(self): # -> tuple[None, None] | tuple[PyDefinedObject | Any, Literal[1]]:
        ...
    


class ImportedName(PyName):
    def __init__(self, imported_module, imported_name) -> None:
        ...
    
    @utils.prevent_recursion(rope.base.pyobjects.get_unknown)
    def get_object(self): # -> None:
        ...
    
    @utils.prevent_recursion(lambda : (None, None))
    def get_definition_location(self): # -> tuple[None, None]:
        ...
    


class _Inferred:
    def __init__(self, get_inferred, concluded=...) -> None:
        ...
    
    @utils.prevent_recursion(_circular_inference)
    def get(self, *args, **kwds): # -> None:
        ...
    
    def set(self, pyobject): # -> None:
        ...
    


