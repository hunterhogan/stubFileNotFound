"""
This type stub file was generated by pyright.
"""

from rope.base import utils

class Scope:
    def __init__(self, pycore, pyobject, parent_scope) -> None:
        ...
    
    def get_names(self):
        """Return the names defined or imported in this scope"""
        ...
    
    def get_defined_names(self):
        """Return the names defined in this scope"""
        ...
    
    def get_name(self, name):
        """Return name `PyName` defined in this scope"""
        ...
    
    def __getitem__(self, key):
        """The same as ``get_name(key)``"""
        ...
    
    def __contains__(self, key): # -> bool:
        """The same as ``key in self.get_names()``"""
        ...
    
    @utils.saveit
    def get_scopes(self): # -> list[Any]:
        """Return the subscopes of this scope

        The returned scopes should be sorted by the order they appear.
        """
        ...
    
    def lookup(self, name): # -> None:
        ...
    
    def get_propagated_names(self):
        """Return the visible names of this scope

        Return the names defined in this scope that are visible from
        scopes containing this scope.  This method returns the same
        dictionary returned by `get_names()` except for `ClassScope`
        which returns an empty dict.
        """
        ...
    
    def get_start(self):
        ...
    
    def get_body_start(self):
        ...
    
    def get_end(self):
        ...
    
    @utils.saveit
    def get_logical_end(self):
        ...
    
    start = ...
    end = ...
    logical_end = ...
    def get_kind(self): # -> None:
        ...
    
    def get_region(self):
        ...
    
    def in_region(self, offset):
        """Checks if offset is in scope region"""
        ...
    


class GlobalScope(Scope):
    def __init__(self, pycore, module) -> None:
        ...
    
    def get_start(self): # -> Literal[1]:
        ...
    
    def get_kind(self): # -> Literal['Module']:
        ...
    
    def get_name(self, name):
        ...
    
    def get_names(self):
        ...
    
    def get_inner_scope_for_line(self, lineno, indents=...):
        ...
    
    def get_inner_scope_for_offset(self, offset):
        ...
    
    @property
    def builtin_names(self): # -> dict[Any, Any]:
        ...
    


class ComprehensionScope(Scope):
    def __init__(self, pycore, pyobject, visitor) -> None:
        ...
    
    def get_names(self): # -> dict[Any, Any] | None:
        ...
    
    def get_logical_end(self):
        ...
    
    logical_end = ...
    def get_body_start(self):
        ...
    


class FunctionScope(Scope):
    def __init__(self, pycore, pyobject, visitor) -> None:
        ...
    
    def get_names(self): # -> None:
        ...
    
    def get_kind(self): # -> Literal['Function']:
        ...
    
    def invalidate_data(self): # -> None:
        ...
    


class ClassScope(Scope):
    def __init__(self, pycore, pyobject) -> None:
        ...
    
    def get_kind(self): # -> Literal['Class']:
        ...
    
    def get_propagated_names(self): # -> dict[Any, Any]:
        ...
    


class _HoldingScopeFinder:
    def __init__(self, pymodule) -> None:
        ...
    
    def get_indents(self, lineno): # -> int:
        ...
    
    def get_holding_scope(self, module_scope, lineno, line_indents=...):
        ...
    
    @staticmethod
    def get_holding_scope_for_offset(scope, offset):
        ...
    
    def find_scope_end(self, scope):
        ...
    
    @property
    def lines(self):
        ...
    
    @property
    def code(self):
        ...
    
    @property
    def logical_lines(self):
        ...
    


class TemporaryScope(Scope):
    """Currently used for list comprehensions and generator expressions

    These scopes do not appear in the `get_scopes()` method of their
    parent scopes.
    """
    def __init__(self, pycore, parent_scope, names) -> None:
        ...
    
    def get_names(self): # -> Any:
        ...
    
    def get_defined_names(self): # -> Any:
        ...
    
    def get_kind(self): # -> Literal['Temporary']:
        ...
    


