"""
This type stub file was generated by pyright.
"""

from rope.base import utils

"""A few useful functions for using rope as a library"""
def path_to_resource(project, path, type=...): # -> None:
    """Get the resource at path

    You only need to specify `type` if `path` does not exist.  It can
    be either 'file' or 'folder'.  If the type is `None` it is assumed
    that the resource already exists.

    Note that this function uses `Project.get_resource()`,
    `Project.get_file()`, and `Project.get_folder()` methods.

    """
    ...

def path_relative_to_project_root(project, path): # -> Literal[''] | None:
    ...

@utils.deprecated()
def relative(root, path): # -> Literal[''] | None:
    ...

def report_change(project, path, old_content): # -> None:
    """Report that the contents of file at `path` was changed

    The new contents of file is retrieved by reading the file.

    """
    ...

def analyze_module(project, resource): # -> None:
    """Perform static object analysis on a python file in the project

    Note that this might be really time consuming.
    """
    ...

def analyze_modules(project, task_handle=...): # -> None:
    """Perform static object analysis on all python files in the project

    Note that this might be really time consuming.
    """
    ...

def get_string_module(project, code, resource=..., force_errors=...): # -> PyModule:
    """Returns a `PyObject` object for the given code

    If `force_errors` is `True`, `exceptions.ModuleSyntaxError` is
    raised if module has syntax errors.  This overrides
    ``ignore_syntax_errors`` project config.

    """
    ...

def get_string_scope(project, code, resource=...): # -> None:
    """Returns a `Scope` object for the given code"""
    ...

def is_python_file(project, resource):
    ...

def modname(resource):
    ...

