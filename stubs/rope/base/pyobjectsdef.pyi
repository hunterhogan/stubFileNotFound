"""
This type stub file was generated by pyright.
"""

from rope.base import ast, pyobjects, utils

class PyFunction(pyobjects.PyFunction):
    def __init__(self, pycore, ast_node, parent) -> None:
        ...
    
    def get_parameters(self): # -> dict[Any, Any]:
        ...
    
    def get_parameter(self, index): # -> None:
        ...
    
    def get_returned_object(self, args): # -> None:
        ...
    
    def get_name(self):
        ...
    
    def get_param_names(self, special_args=...): # -> list[str]:
        ...
    
    def get_kind(self): # -> Literal['staticmethod', 'classmethod', 'method', 'function']:
        """Get function type

        It returns one of 'function', 'method', 'staticmethod' or
        'classmethod' strs.

        """
        ...
    
    @property
    def decorators(self): # -> Any | None:
        ...
    


class PyComprehension(pyobjects.PyComprehension):
    def __init__(self, pycore, ast_node, parent) -> None:
        ...
    
    def get_kind(self): # -> Literal['Comprehension']:
        ...
    


class PyClass(pyobjects.PyClass):
    def __init__(self, pycore, ast_node, parent) -> None:
        ...
    
    def get_superclasses(self):
        ...
    
    def get_name(self):
        ...
    


class PyModule(pyobjects.PyModule):
    def __init__(self, pycore, source=..., resource=..., force_errors=...) -> None:
        ...
    
    @property
    @utils.saveit
    def lines(self): # -> SourceLinesAdapter:
        """A `SourceLinesAdapter`"""
        ...
    
    @property
    @utils.saveit
    def logical_lines(self): # -> CachingLogicalLineFinder:
        """A `LogicalLinesFinder`"""
        ...
    
    def get_name(self): # -> Literal['']:
        ...
    


class PyPackage(pyobjects.PyPackage):
    def __init__(self, pycore, resource=..., force_errors=...) -> None:
        ...
    
    def get_module(self): # -> Self:
        ...
    
    def get_name(self): # -> Literal['']:
        ...
    


class _AnnAssignVisitor(ast.RopeNodeVisitor):
    def __init__(self, scope_visitor) -> None:
        ...
    


class _ExpressionVisitor(ast.RopeNodeVisitor):
    def __init__(self, scope_visitor) -> None:
        ...
    


class _AssignVisitor(ast.RopeNodeVisitor):
    def __init__(self, scope_visitor) -> None:
        ...
    


class _ScopeVisitor(_ExpressionVisitor):
    def __init__(self, pycore, owner_object) -> None:
        ...
    
    def get_module(self): # -> None:
        ...
    


class _ComprehensionVisitor(_ScopeVisitor):
    ...


class _GlobalVisitor(_ScopeVisitor):
    ...


class _ClassVisitor(_ScopeVisitor):
    ...


class _FunctionVisitor(_ScopeVisitor):
    def __init__(self, pycore, owner_object) -> None:
        ...
    


class _ClassInitVisitor(_AssignVisitor):
    def __init__(self, scope_visitor, self_name) -> None:
        ...
    


class StarImport:
    def __init__(self, imported_module) -> None:
        ...
    
    def get_names(self): # -> dict[Any, Any]:
        ...
    


