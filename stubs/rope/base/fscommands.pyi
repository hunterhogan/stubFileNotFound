"""
This type stub file was generated by pyright.
"""

import typing

"""Project file system commands.

This modules implements file system operations used by rope.  Different
version control systems can be supported by implementing the interface
provided by `FileSystemCommands` class.  See `SubversionCommands` and
`MercurialCommands` for example.

"""
FileContent = typing.NewType("FileContent", bytes)
def create_fscommands(root): # -> FileSystemCommands:
    ...

class FileSystemCommands:
    def create_file(self, path): # -> None:
        ...
    
    def create_folder(self, path): # -> None:
        ...
    
    def move(self, path, new_location): # -> None:
        ...
    
    def remove(self, path): # -> None:
        ...
    
    def write(self, path, data): # -> None:
        ...
    
    def read(self, path): # -> bytes:
        ...
    


class SubversionCommands:
    def __init__(self, *args) -> None:
        ...
    
    def create_file(self, path): # -> None:
        ...
    
    def create_folder(self, path): # -> None:
        ...
    
    def move(self, path, new_location): # -> None:
        ...
    
    def remove(self, path): # -> None:
        ...
    
    def write(self, path, data): # -> None:
        ...
    
    def read(self, path): # -> bytes:
        ...
    


class MercurialCommands:
    def __init__(self, root) -> None:
        ...
    
    def create_file(self, path): # -> None:
        ...
    
    def create_folder(self, path): # -> None:
        ...
    
    def move(self, path, new_location): # -> None:
        ...
    
    def remove(self, path): # -> None:
        ...
    
    def write(self, path, data): # -> None:
        ...
    
    def read(self, path): # -> bytes:
        ...
    


class GITCommands:
    def __init__(self, root) -> None:
        ...
    
    def create_file(self, path): # -> None:
        ...
    
    def create_folder(self, path): # -> None:
        ...
    
    def move(self, path, new_location): # -> None:
        ...
    
    def remove(self, path): # -> None:
        ...
    
    def write(self, path, data): # -> None:
        ...
    
    def read(self, path): # -> bytes:
        ...
    


class DarcsCommands:
    def __init__(self, root) -> None:
        ...
    
    def create_file(self, path): # -> None:
        ...
    
    def create_folder(self, path): # -> None:
        ...
    
    def move(self, path, new_location): # -> None:
        ...
    
    def remove(self, path): # -> None:
        ...
    
    def read(self, path): # -> bytes:
        ...
    
    def write(self, path, data): # -> None:
        ...
    


def unicode_to_file_data(contents: str, encoding=..., newlines=...) -> FileContent:
    ...

def file_data_to_unicode(data, encoding=...): # -> tuple[str | Any, Literal['\r', '\r\n', '\n']]:
    ...

def read_str_coding(source): # -> None:
    ...

