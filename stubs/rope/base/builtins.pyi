"""
This type stub file was generated by pyright.
"""

from rope.base import pynames, pyobjects, utils

"""This module tries to support builtin types and functions."""
class BuiltinModule(pyobjects.AbstractModule):
    def __init__(self, name, pycore=..., initial=...) -> None:
        ...
    
    parent = ...
    def get_attributes(self): # -> dict[Any, Any]:
        ...
    
    def get_doc(self): # -> Any | None:
        ...
    
    def get_name(self):
        ...
    
    @property
    @utils.saveit
    def attributes(self): # -> dict[Any, Any]:
        ...
    
    @property
    @utils.saveit
    def module(self): # -> Any | None:
        ...
    


class _BuiltinElement:
    def __init__(self, builtin, parent=...) -> None:
        ...
    
    def get_doc(self): # -> Any | None:
        ...
    
    def get_name(self): # -> Any | None:
        ...
    
    @property
    def parent(self): # -> BuiltinModule:
        ...
    


class BuiltinClass(_BuiltinElement, pyobjects.AbstractClass):
    def __init__(self, builtin, attributes, parent=...) -> None:
        ...
    
    @utils.saveit
    def get_attributes(self): # -> dict[Any, Any]:
        ...
    
    def get_module(self): # -> BuiltinModule:
        ...
    


class BuiltinFunction(_BuiltinElement, pyobjects.AbstractFunction):
    def __init__(self, returned=..., function=..., builtin=..., argnames=..., parent=...) -> None:
        ...
    
    def get_returned_object(self, args): # -> None:
        ...
    
    def get_param_names(self, special_args=...):
        ...
    


class BuiltinUnknown(_BuiltinElement, pyobjects.PyObject):
    def __init__(self, builtin) -> None:
        ...
    
    def get_name(self): # -> Any | None:
        ...
    
    @utils.saveit
    def get_attributes(self): # -> dict[Any, Any]:
        ...
    


class _CallContext:
    def __init__(self, argnames, args) -> None:
        ...
    
    def get_argument(self, name): # -> None:
        ...
    
    def get_pyname(self, name): # -> None:
        ...
    
    def get_arguments(self, argnames): # -> None:
        ...
    
    def get_pynames(self, argnames): # -> None:
        ...
    
    def get_per_name(self): # -> None:
        ...
    
    def save_per_name(self, value): # -> None:
        ...
    


class _AttributeCollector:
    def __init__(self, type) -> None:
        ...
    
    def __call__(self, name, returned=..., function=..., argnames=..., check_existence=..., parent=...): # -> None:
        ...
    
    def __setitem__(self, name, value): # -> None:
        ...
    


class List(BuiltinClass):
    def __init__(self, holding=...) -> None:
        ...
    


get_list = ...
get_list_type = ...
class Dict(BuiltinClass):
    def __init__(self, keys=..., values=...) -> None:
        ...
    


get_dict = ...
get_dict_type = ...
class Tuple(BuiltinClass):
    def __init__(self, *objects) -> None:
        ...
    
    def get_holding_objects(self): # -> tuple[Any, ...]:
        ...
    


get_tuple = ...
get_tuple_type = ...
class Set(BuiltinClass):
    def __init__(self, holding=...) -> None:
        ...
    


get_set = ...
get_set_type = ...
class Str(BuiltinClass):
    def __init__(self) -> None:
        ...
    
    def get_doc(self): # -> str | None:
        ...
    


get_str = ...
get_str_type = ...
class BuiltinName(pynames.PyName):
    def __init__(self, pyobject) -> None:
        ...
    
    def get_object(self): # -> Any:
        ...
    
    def get_definition_location(self): # -> tuple[None, None]:
        ...
    


class Iterator(pyobjects.AbstractClass):
    def __init__(self, holding=...) -> None:
        ...
    
    def get_attributes(self): # -> dict[str, BuiltinName]:
        ...
    
    def get_returned_object(self, args): # -> None:
        ...
    


get_iterator = ...
class Generator(pyobjects.AbstractClass):
    def __init__(self, holding=...) -> None:
        ...
    
    def get_attributes(self): # -> dict[str, BuiltinName]:
        ...
    
    def get_returned_object(self, args): # -> None:
        ...
    


get_generator = ...
class File(BuiltinClass):
    def __init__(self, filename=..., mode=..., *args) -> None:
        ...
    


get_file = ...
get_file_type = ...
class Property(BuiltinClass):
    def __init__(self, fget=..., fset=..., fdel=..., fdoc=...) -> None:
        ...
    
    def get_property_object(self, args): # -> None:
        ...
    


class Lambda(pyobjects.AbstractFunction):
    def __init__(self, node, scope) -> None:
        ...
    
    def get_returned_object(self, args): # -> None:
        ...
    
    def get_module(self):
        ...
    
    def get_scope(self): # -> Any:
        ...
    
    def get_kind(self): # -> Literal['lambda']:
        ...
    
    def get_ast(self): # -> Any:
        ...
    
    def get_attributes(self): # -> dict[Any, Any]:
        ...
    
    def get_name(self): # -> Literal['lambda']:
        ...
    
    def get_param_names(self, special_args=...): # -> list[str]:
        ...
    
    @property
    def parent(self):
        ...
    


class BuiltinObject(BuiltinClass):
    def __init__(self) -> None:
        ...
    


class BuiltinType(BuiltinClass):
    def __init__(self) -> None:
        ...
    


_initial_builtins = ...
builtins = ...
