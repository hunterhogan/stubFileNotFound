"""
This type stub file was generated by pyright.
"""

class Arguments:
    """A class for evaluating parameters passed to a function

    You can use the `create_arguments` factory.  It handles implicit
    first arguments.

    """
    def __init__(self, args, scope) -> None:
        ...
    
    def get_arguments(self, parameters): # -> list[Any]:
        ...
    
    def get_pynames(self, parameters): # -> list[None]:
        ...
    
    def get_instance_pyname(self): # -> UnboundName | None:
        ...
    


def create_arguments(primary, pyfunction, call_node, scope): # -> Arguments:
    """A factory for creating `Arguments`"""
    ...

class ObjectArguments:
    def __init__(self, pynames) -> None:
        ...
    
    def get_arguments(self, parameters): # -> list[Any]:
        ...
    
    def get_pynames(self, parameters): # -> Any:
        ...
    
    def get_instance_pyname(self):
        ...
    


class MixedArguments:
    def __init__(self, pyname, arguments, scope) -> None:
        """`arguments` is an instance of `Arguments`"""
        ...
    
    def get_pynames(self, parameters):
        ...
    
    def get_arguments(self, parameters): # -> list[Any]:
        ...
    
    def get_instance_pyname(self): # -> Any:
        ...
    


