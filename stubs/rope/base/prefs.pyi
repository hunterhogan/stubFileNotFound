"""
This type stub file was generated by pyright.
"""

from enum import Enum
from dataclasses import dataclass
from typing import Any, Callable, Dict, List, Optional, Tuple
from packaging.requirements import Requirement
from pytoolconfig import PyToolConfig
from pytoolconfig.sources import Source
from rope.base.resources import Folder

"""Rope preferences."""
@dataclass
class AutoimportPrefs:
    aliases: List[Tuple[str, str]] = ...


@dataclass
class ImportPrefs:
    preferred_import_style: str = ...


@dataclass
class Prefs:
    """Class to store rope preferences."""
    ignored_resources: List[str] = ...
    python_files: List[str] = ...
    source_folders: List[str] = ...
    python_path: List[str] = ...
    save_objectdb: bool = ...
    compress_objectdb: bool = ...
    automatic_soa: bool = ...
    soa_followed_calls: int = ...
    perform_doa: bool = ...
    validate_objectdb: bool = ...
    max_history_items: int = ...
    save_history: bool = ...
    compress_history: bool = ...
    indent_size: int = ...
    extension_modules: List[str] = ...
    import_dynload_stdmods: bool = ...
    ignore_syntax_errors: bool = ...
    ignore_bad_imports: bool = ...
    prefer_module_from_imports: bool = ...
    split_imports: bool = ...
    pull_imports_to_top: bool = ...
    sort_imports_alphabetically: bool = ...
    type_hinting_factory: str = ...
    project_opened: Optional[Callable] = ...
    py_version: Optional[Tuple[int, int]] = ...
    dependencies: Optional[List[Requirement]] = ...
    callbacks: Dict[str, Callable[[Any], None]] = ...
    autoimport: AutoimportPrefs = ...
    imports: ImportPrefs = ...
    def set(self, key: str, value: Any): # -> None:
        """Set the value of `key` preference to `value`."""
        ...
    
    def add(self, key: str, value: Any): # -> None:
        """Add an entry to a list preference

        Add `value` to the list of entries for the `key` preference.

        """
        ...
    
    def get(self, key: str, default: Any = ...): # -> Any:
        """Get the value of the key preference"""
        ...
    
    def add_callback(self, key: str, callback: Callable): # -> None:
        """Add `key` preference with `callback` function

        Whenever `key` is set the callback is called with the
        given `value` as parameter.

        """
        ...
    
    def __setitem__(self, key: str, value: Any): # -> None:
        ...
    
    def __getitem__(self, key: str): # -> Any:
        ...
    


class _RopeConfigSource(Source):
    """Custom source for rope config.py files."""
    name: str = ...
    run_globals: Dict
    def __init__(self, ropefolder: Folder) -> None:
        ...
    
    def parse(self) -> Optional[Dict]:
        ...
    


def get_config(root: Folder, ropefolder: Folder) -> PyToolConfig:
    ...

class ImportStyle(Enum):
    normal_import = ...
    from_module = ...
    from_global = ...


DEFAULT_IMPORT_STYLE = ...
def get_preferred_import_style(prefs: Prefs) -> ImportStyle:
    ...

