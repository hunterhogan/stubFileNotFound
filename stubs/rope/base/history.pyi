"""
This type stub file was generated by pyright.
"""

from rope.base import utils

class History:
    """A class that holds project history"""
    def __init__(self, project, maxundos=...) -> None:
        ...
    
    def do(self, changes, task_handle=...): # -> None:
        """Perform the change and add it to the `self.undo_list`

        Note that uninteresting changes (changes to ignored files)
        will not be appended to `self.undo_list`.

        """
        ...
    
    def undo(self, change=..., drop=..., task_handle=...): # -> Any:
        """Redo done changes from the history

        When `change` is `None`, the last done change will be undone.
        If change is not `None` it should be an item from
        `self.undo_list`; this change and all changes that depend on
        it will be undone.  In both cases the list of undone changes
        will be returned.

        If `drop` is `True`, the undone change will not be appended to
        the redo list.

        """
        ...
    
    def redo(self, change=..., task_handle=...): # -> Any:
        """Redo undone changes from the history

        When `change` is `None`, the last undone change will be
        redone.  If change is not `None` it should be an item from
        `self.redo_list`; this change and all changes that depend on
        it will be redone.  In both cases the list of redone changes
        will be returned.

        """
        ...
    
    def contents_before_current_change(self, file): # -> None:
        ...
    
    def write(self): # -> None:
        ...
    
    def get_file_undo_list(self, resource): # -> list[Any]:
        ...
    
    def __str__(self) -> str:
        ...
    
    undo_list = ...
    redo_list = ...
    @property
    def tobe_undone(self): # -> Any | None:
        """The last done change if available, `None` otherwise"""
        ...
    
    @property
    def tobe_redone(self): # -> Any | None:
        """The last undone change if available, `None` otherwise"""
        ...
    
    @property
    def max_undos(self):
        ...
    
    @property
    def save(self):
        ...
    
    @property
    @utils.deprecated("compress_history is no longer supported")
    def compress(self): # -> Literal[False]:
        ...
    
    def clear(self): # -> None:
        """Forget all undo and redo information"""
        ...
    


class _FindChangeDependencies:
    def __init__(self, change_list) -> None:
        ...
    
    def __call__(self): # -> list[Any]:
        ...
    


