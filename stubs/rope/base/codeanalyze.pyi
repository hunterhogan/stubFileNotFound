"""
This type stub file was generated by pyright.
"""

class ChangeCollector:
    def __init__(self, text) -> None:
        ...
    
    def add_change(self, start, end, new_text=...): # -> None:
        ...
    
    def get_changed(self): # -> LiteralString | None:
        ...
    


class SourceLinesAdapter:
    """Adapts source to Lines interface

    Note: The creation of this class is expensive.
    """
    def __init__(self, source_code) -> None:
        ...
    
    def get_line(self, lineno):
        ...
    
    def length(self): # -> int:
        ...
    
    def get_line_number(self, offset): # -> int:
        ...
    
    def get_line_start(self, lineno):
        ...
    
    def get_line_end(self, lineno):
        ...
    


class ArrayLinesAdapter:
    def __init__(self, lines) -> None:
        ...
    
    def get_line(self, line_number):
        ...
    
    def length(self): # -> int:
        ...
    


class LinesToReadline:
    def __init__(self, lines, start) -> None:
        ...
    
    def readline(self): # -> Literal['']:
        ...
    
    def __call__(self): # -> Literal['']:
        ...
    


class _CustomGenerator:
    def __init__(self, lines) -> None:
        ...
    
    def __call__(self): # -> list[Any]:
        ...
    
    _main_tokens = ...


def custom_generator(lines): # -> list[Any]:
    ...

class LogicalLineFinder:
    def __init__(self, lines) -> None:
        ...
    
    def logical_line_in(self, line_number): # -> tuple[Any, Any]:
        ...
    
    def generate_starts(self, start_line=..., end_line=...): # -> Generator[int, Any, None]:
        ...
    
    def generate_regions(self, start_line=..., end_line=...): # -> Generator[tuple[int, int], Any, None]:
        ...
    


def tokenizer_generator(lines): # -> Generator[tuple[int, int], Any, None]:
    ...

class CachingLogicalLineFinder:
    def __init__(self, lines, generate=...) -> None:
        ...
    
    _starts = ...
    @property
    def starts(self): # -> None:
        ...
    
    _ends = ...
    @property
    def ends(self): # -> None:
        ...
    
    def logical_line_in(self, line_number): # -> tuple[Any, Any]:
        ...
    
    def generate_starts(self, start_line=..., end_line=...): # -> Generator[int, Any, None]:
        ...
    


def get_block_start(lines, lineno, maximum_indents=...): # -> int:
    """Approximate block start"""
    ...

_block_start_pattern = ...
def get_block_start_patterns(): # -> Pattern[str]:
    ...

def count_line_indents(line): # -> int:
    ...

def get_string_pattern_with_prefix(prefix, prefix_group_name=...): # -> LiteralString:
    ...

def get_string_pattern(): # -> LiteralString:
    ...

def get_formatted_string_pattern(): # -> LiteralString:
    ...

def get_any_string_pattern(): # -> LiteralString:
    ...

def get_comment_pattern(): # -> Literal['#[^\\n]*']:
    ...

