"""
This type stub file was generated by pyright.
"""

from typing import Optional
from rope.base import utils
from rope.base.prefs import Prefs
from rope.base.resources import File

class _Project:
    prefs: Prefs
    def __init__(self, fscommands) -> None:
        ...
    
    def get_resource(self, resource_name): # -> File | Folder:
        """Get a resource in a project.

        `resource_name` is the path of a resource in a project.  It is
        the path of a resource relative to project root.  Project root
        folder address is an empty string.  If the resource does not
        exist a `exceptions.ResourceNotFound` exception would be
        raised.  Use `get_file()` and `get_folder()` when you need to
        get nonexistent `Resource`.

        """
        ...
    
    def get_module(self, name, folder=...): # -> BuiltinModule | PyModule | PyPackage:
        """Returns a `PyObject` if the module was found."""
        ...
    
    def get_python_path_folders(self): # -> list[Any]:
        ...
    
    def get_source_folders(self): # -> list[Any]:
        """Returns project source folders"""
        ...
    
    def validate(self, folder): # -> None:
        """Validate files and folders contained in this folder

        It validates all of the files and folders contained in this
        folder if some observers are interested in them.

        """
        ...
    
    def add_observer(self, observer): # -> None:
        """Register a `ResourceObserver`

        See `FilteredResourceObserver`.
        """
        ...
    
    def remove_observer(self, observer): # -> None:
        """Remove a registered `ResourceObserver`"""
        ...
    
    def do(self, changes, task_handle=...): # -> None:
        """Apply the changes in a `ChangeSet`

        Most of the time you call this function for committing the
        changes for a refactoring.
        """
        ...
    
    def get_pymodule(self, resource, force_errors=...): # -> PyModule | PyPackage:
        ...
    
    def get_pycore(self): # -> PyCore:
        ...
    
    def get_file(self, path): # -> File:
        """Get the file with `path` (it may not exist)"""
        ...
    
    def get_folder(self, path): # -> Folder:
        """Get the folder with `path` (it may not exist)"""
        ...
    
    def get_prefs(self): # -> Prefs:
        ...
    
    def get_relative_module(self, name, folder, level): # -> PyModule | PyPackage:
        ...
    
    def find_module(self, modname, folder=...) -> Optional[File]:
        """Returns a resource corresponding to the given module

        returns None if it can not be found
        """
        ...
    
    def find_relative_module(self, modname, folder, level): # -> None:
        ...
    
    def is_ignored(self, resource): # -> Literal[False]:
        ...
    
    @property
    @utils.saveit
    def history(self): # -> History:
        ...
    
    @property
    @utils.saveit
    def pycore(self): # -> PyCore:
        ...
    
    def close(self): # -> None:
        ...
    
    ropefolder = ...


class Project(_Project):
    """A Project containing files and folders"""
    def __init__(self, projectroot, fscommands=..., ropefolder=..., **prefs) -> None:
        """A rope project

        :parameters:
            - `projectroot`: The address of the root folder of the project
            - `fscommands`: Implements the file system operations used
              by rope; have a look at `rope.base.fscommands`
            - `ropefolder`: The name of the folder in which rope stores
              project configurations and data.  Pass `None` for not using
              such a folder at all.
            - `prefs`: Specify project preferences.  These values
              overwrite config file preferences.

        """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def get_files(self): # -> set[Any]:
        ...
    
    def get_python_files(self): # -> list[Any]:
        """Returns all python files available in the project"""
        ...
    
    def is_ignored(self, resource): # -> bool:
        ...
    
    def sync(self): # -> None:
        """Closes project open resources"""
        ...
    
    def close(self): # -> None:
        """Closes project open resources"""
        ...
    
    def set(self, key, value): # -> None:
        """Set the `key` preference to `value`"""
        ...
    
    @property
    def ropefolder(self): # -> Folder | None:
        ...
    
    def validate(self, folder=...): # -> None:
        ...
    
    root = ...
    address = ...


class NoProject(_Project):
    """A null object for holding out of project files.

    This class is singleton use `get_no_project` global function
    """
    def __init__(self) -> None:
        ...
    
    def get_resource(self, name): # -> File | Folder:
        ...
    
    def get_files(self): # -> list[Any]:
        ...
    
    def get_python_files(self): # -> list[Any]:
        ...
    
    _no_project = ...


def get_no_project(): # -> None:
    ...

class _FileListCacher:
    def __init__(self, project) -> None:
        ...
    
    def get_files(self): # -> set[Any]:
        ...
    


class _DataFiles:
    def __init__(self, project) -> None:
        ...
    
    def read_data(self, name): # -> list[Any] | None:
        ...
    
    def write_data(self, name, data): # -> None:
        ...
    
    def add_write_hook(self, hook): # -> None:
        ...
    
    def write(self): # -> None:
        ...
    


