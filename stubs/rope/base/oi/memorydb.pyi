"""
This type stub file was generated by pyright.
"""

from rope.base import utils
from rope.base.oi import objectdb

class MemoryDB(objectdb.FileDict):
    def __init__(self, project, persist=...) -> None:
        ...
    
    def keys(self): # -> dict_keys[Any, Any]:
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __setitem__(self):
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def __getitem__(self, key): # -> FileInfo:
        ...
    
    def create(self, path): # -> None:
        ...
    
    def rename(self, file, newfile): # -> None:
        ...
    
    def __delitem__(self, file): # -> None:
        ...
    
    def write(self): # -> None:
        ...
    
    @property
    @utils.deprecated("compress_objectdb is no longer supported")
    def compress(self): # -> Literal[False]:
        ...
    
    @property
    def persist(self):
        ...
    


class FileInfo(objectdb.FileInfo):
    def __init__(self, scopes) -> None:
        ...
    
    def create_scope(self, key): # -> None:
        ...
    
    def keys(self):
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def __getitem__(self, key):
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __setitem__(self):
        ...
    


class ScopeInfo(objectdb.ScopeInfo):
    def __init__(self) -> None:
        ...
    
    def get_per_name(self, name): # -> None:
        ...
    
    def save_per_name(self, name, value): # -> None:
        ...
    
    def get_returned(self, parameters): # -> None:
        ...
    
    def get_call_infos(self): # -> Generator[CallInfo, Any, None]:
        ...
    
    def add_call(self, parameters, returned): # -> None:
        ...
    
    def __getstate__(self): # -> dict[str, Any]:
        ...
    
    def __setstate__(self, data): # -> None:
        ...
    


