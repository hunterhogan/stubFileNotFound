"""
This type stub file was generated by pyright.
"""

"""Provides classes for persisting `PyObject`"""
class PyObjectToTextual:
    """For transforming `PyObject` to textual form

    This can be used for storing `PyObjects` in files.  Use
    `TextualToPyObject` for converting back.

    """
    def __init__(self, project) -> None:
        ...
    
    def transform(self, pyobject): # -> tuple[Literal['none']] | Any | tuple[Literal['unknown']]:
        """Transform a `PyObject` to textual form"""
        ...
    
    def __call__(self, pyobject): # -> tuple[Literal['none']] | Any | tuple[Literal['unknown']]:
        ...
    
    def PyObject_to_textual(self, pyobject): # -> tuple[Literal['instance'], tuple[Literal['none']] | Any | tuple[Literal['unknown']]] | tuple[Literal['none']] | Any | tuple[Literal['unknown']]:
        ...
    
    def PyFunction_to_textual(self, pyobject): # -> tuple[Literal['defined'], Any, LiteralString]:
        ...
    
    def PyClass_to_textual(self, pyobject): # -> tuple[Literal['defined'], Any, LiteralString]:
        ...
    
    def PyModule_to_textual(self, pyobject): # -> tuple[Literal['defined'], Any]:
        ...
    
    def PyPackage_to_textual(self, pyobject): # -> tuple[Literal['defined'], Any]:
        ...
    
    def List_to_textual(self, pyobject): # -> tuple[Literal['builtin'], Literal['list'], tuple[Literal['none']] | Any | tuple[Literal['unknown']]]:
        ...
    
    def Dict_to_textual(self, pyobject): # -> tuple[Literal['builtin'], Literal['dict'], tuple[Literal['none']] | Any | tuple[Literal['unknown']], tuple[Literal['none']] | Any | tuple[Literal['unknown']]]:
        ...
    
    def Tuple_to_textual(self, pyobject): # -> tuple[tuple[Literal['none']] | Any | tuple[Literal['unknown']] | str, ...]:
        ...
    
    def Set_to_textual(self, pyobject): # -> tuple[Literal['builtin'], Literal['set'], tuple[Literal['none']] | Any | tuple[Literal['unknown']]]:
        ...
    
    def Iterator_to_textual(self, pyobject): # -> tuple[Literal['builtin'], Literal['iter'], tuple[Literal['none']] | Any | tuple[Literal['unknown']]]:
        ...
    
    def Generator_to_textual(self, pyobject): # -> tuple[Literal['builtin'], Literal['generator'], tuple[Literal['none']] | Any | tuple[Literal['unknown']]]:
        ...
    
    def Str_to_textual(self, pyobject): # -> tuple[Literal['builtin'], Literal['str']]:
        ...
    
    def File_to_textual(self, pyobject): # -> tuple[Literal['builtin'], Literal['file']]:
        ...
    
    def BuiltinFunction_to_textual(self, pyobject): # -> tuple[Literal['builtin'], Literal['function'], Any]:
        ...
    
    def resource_to_path(self, resource):
        ...
    


class TextualToPyObject:
    """For transforming textual form to `PyObject`"""
    def __init__(self, project, allow_in_project_absolutes=...) -> None:
        ...
    
    def __call__(self, textual): # -> Any | None:
        ...
    
    def transform(self, textual): # -> Any | None:
        """Transform an object from textual form to `PyObject`"""
        ...
    
    def builtin_to_pyobject(self, textual): # -> Any | None:
        ...
    
    def builtin_str_to_pyobject(self, textual): # -> PyObject:
        ...
    
    def builtin_list_to_pyobject(self, textual): # -> PyObject:
        ...
    
    def builtin_dict_to_pyobject(self, textual): # -> PyObject:
        ...
    
    def builtin_tuple_to_pyobject(self, textual): # -> PyObject:
        ...
    
    def builtin_set_to_pyobject(self, textual): # -> PyObject:
        ...
    
    def builtin_iter_to_pyobject(self, textual): # -> PyObject:
        ...
    
    def builtin_generator_to_pyobject(self, textual): # -> PyObject:
        ...
    
    def builtin_file_to_pyobject(self, textual): # -> PyObject:
        ...
    
    def builtin_function_to_pyobject(self, textual): # -> None:
        ...
    
    def unknown_to_pyobject(self, textual): # -> None:
        ...
    
    def none_to_pyobject(self, textual): # -> None:
        ...
    
    def defined_to_pyobject(self, textual): # -> None:
        ...
    
    def instance_to_pyobject(self, textual): # -> None:
        ...
    
    def path_to_resource(self, path): # -> None:
        ...
    


class DOITextualToPyObject(TextualToPyObject):
    """For transforming textual form to `PyObject`

    The textual form DOI uses is different from rope's standard
    textual form.  The reason is that we cannot find the needed
    information by analyzing live objects.  This class can be
    used to transform DOI textual form to `PyObject` and later
    we can convert it to standard textual form using
    `TextualToPyObject` class.

    """
    def defined_to_pyobject(self, textual): # -> None:
        ...
    
    def path_to_resource(self, path): # -> None:
        ...
    


