"""
This type stub file was generated by pyright.
"""

from rope.base.oi.type_hinting.providers import interfaces

"""
Hinting the type using docstring of class/function.

It's an irreplaceable thing if you are using Dependency Injection with passive class:
http://www.martinfowler.com/articles/injection.html

Some code extracted (or based on code) from:
https://github.com/davidhalter/jedi/blob/b489019f5bd5750051122b94cc767df47751ecb7/jedi/evaluate/docstrings.py
Thanks to @davidhalter for this utils under MIT License.

Similar solutions:

    - https://www.jetbrains.com/pycharm/help/type-hinting-in-pycharm.html
    - https://www.python.org/dev/peps/pep-0484/#type-comments
    - http://www.pydev.org/manual_adv_type_hints.html
    - https://jedi.readthedocs.org/en/latest/docs/features.html#type-hinting

Discussions:

    - https://groups.google.com/d/topic/rope-dev/JlAzmZ83K1M/discussion
    - https://groups.google.com/d/topic/rope-dev/LCFNN98vckI/discussion

"""
class ParamProvider(interfaces.IParamProvider):
    def __init__(self, docstring_parser, resolver) -> None:
        """
        :type docstring_parser: rope.base.oi.type_hinting.providers.docstrings.IParamParser
        :type resolver: rope.base.oi.type_hinting.resolvers.interfaces.IResolver
        """
        ...
    
    def __call__(self, pyfunc, param_name): # -> None:
        """
        :type pyfunc: rope.base.pyobjectsdef.PyFunction
        :type param_name: str
        :rtype: rope.base.pyobjects.PyDefinedObject | rope.base.pyobjects.PyObject or None
        """
        ...
    


class ReturnProvider(interfaces.IReturnProvider):
    def __init__(self, docstring_parser, resolver) -> None:
        """
        :type docstring_parser: rope.base.oi.type_hinting.providers.docstrings.IReturnParser
        :type resolver: rope.base.oi.type_hinting.resolvers.interfaces.IResolver
        """
        ...
    
    def __call__(self, pyfunc): # -> None:
        """
        :type pyfunc: rope.base.pyobjectsdef.PyFunction
        :rtype: rope.base.pyobjects.PyDefinedObject | rope.base.pyobjects.PyObject or None
        """
        ...
    


class AssignmentProvider(interfaces.IAssignmentProvider):
    def __init__(self, docstring_parser, resolver) -> None:
        """
        :type docstring_parser: rope.base.oi.type_hinting.providers.docstrings.IParamParser
        :type resolver: rope.base.oi.type_hinting.resolvers.interfaces.IResolver
        """
        ...
    
    def __call__(self, pyname): # -> None:
        """
        :type pyname: rope.base.pynamesdef.AssignedName
        :rtype: rope.base.pyobjects.PyDefinedObject | rope.base.pyobjects.PyObject or None
        """
        ...
    


class IParamParser:
    def __call__(self, docstring, param_name): # -> None:
        """
        :type docstring: str
        :type param_name: str
        """
        ...
    


class IReturnParser:
    def __call__(self, docstring): # -> None:
        """
        :type docstring: str
        """
        ...
    


class DocstringParamParser(IParamParser):
    DOCSTRING_PARAM_PATTERNS = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, docstring, param_name): # -> list[Any] | list[str | Any]:
        """Search `docstring` for type(-s) of `param_name`.

        >>> DocstringParamParser()(':type param: int', 'param')
        ['int']
        >>> DocstringParamParser()('@type param: int', 'param')
        ['int']
        >>> DocstringParamParser()(':type param: :class:`threading.Thread`', 'param')
        ['threading.Thread']
        >>> bool(DocstringParamParser()('no document', 'param'))
        False
        >>> DocstringParamParser()(':param int param: some description', 'param')
        ['int']
        """
        ...
    


class DocstringReturnParser(IReturnParser):
    DOCSTRING_RETURN_PATTERNS = ...
    def __init__(self) -> None:
        ...
    
    def __call__(self, docstring): # -> list[Any] | list[str | Any]:
        ...
    


class RSTRoleStrip:
    RST_ROLE_PATTERN = ...
    def __call__(self, type_str): # -> str | Any:
        """
        Strip off the part looks like a ReST role in `type_str`.

        >>> RSTRoleStrip()(':class:`ClassName`')  # strip off :class:
        'ClassName'
        >>> RSTRoleStrip()(':py:obj:`module.Object`')  # works with domain
        'module.Object'
        >>> RSTRoleStrip()('ClassName')  # do nothing when not ReST role
        'ClassName'

        See also:
        http://sphinx-doc.org/domains.html#cross-referencing-python-objects

        """
        ...
    


