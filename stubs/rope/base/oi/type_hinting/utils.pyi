"""
This type stub file was generated by pyright.
"""

from typing import Optional, Union
from rope.base.pyobjects import PyDefinedObject, PyObject

def get_super_func(pyfunc): # -> PyFunction | None:
    ...

def get_super_assignment(pyname): # -> None:
    """
    :type pyname: rope.base.pynamesdef.AssignedName
    :type: rope.base.pynamesdef.AssignedName
    """
    ...

def get_class_with_attr_name(pyname): # -> tuple[PyClass, Any] | None:
    """
    :type pyname: rope.base.pynamesdef.AssignedName
    :return: rope.base.pyobjectsdef.PyClass, str
    :rtype: tuple
    """
    ...

def get_lineno_for_node(assign_node): # -> Literal[1]:
    ...

def get_mro(pyclass): # -> list[Any]:
    ...

def resolve_type(type_name: str, pyobject: Union[PyDefinedObject, PyObject]) -> Optional[Union[PyDefinedObject, PyObject]]:
    """
    Find proper type object from its name.
    """
    ...

class ParametrizeType:
    _supported_mapping = ...
    def __call__(self, pyobject, *args, **kwargs): # -> Any:
        """
        :type pyobject: rope.base.pyobjects.PyObject
        :rtype: rope.base.pyobjects.PyDefinedObject | rope.base.pyobjects.PyObject or None
        """
        ...
    


parametrize_type = ...
