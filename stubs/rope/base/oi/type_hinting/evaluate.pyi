"""
This type stub file was generated by pyright.
"""

from rope.base import utils as base_utils

class SymbolBase:
    name = ...
    def __init__(self) -> None:
        ...
    
    def nud(self, parser):
        ...
    
    def led(self, left, parser):
        ...
    
    def evaluate(self, pyobject):
        ...
    
    def __repr__(self): # -> str:
        ...
    


class SymbolTable:
    def multi(func): # -> Callable[..., None]:
        ...
    
    def __init__(self) -> None:
        ...
    
    def get(self, name, default=...): # -> None:
        ...
    
    def __getitem__(self, name):
        ...
    
    def __iter__(self): # -> Iterator[Any]:
        ...
    
    def symbol(self, name, bp=...): # -> type[S]:
        ...
    
    @multi
    def infix(self, name, bp): # -> None:
        ...
    
    @multi
    def infix_r(self, name, bp): # -> None:
        ...
    
    def ternary(self, name, name2, bp): # -> None:
        ...
    
    @multi
    def prefix(self, name, bp): # -> None:
        ...
    
    @multi
    def postfix(self, name, bp): # -> None:
        ...
    
    multi = ...


symbol_table = ...
class Lexer:
    _token_pattern = ...
    def __init__(self, symbol_table) -> None:
        ...
    
    def tokenize(self, program): # -> Generator[Any, Any, None]:
        ...
    


class Parser:
    token = ...
    next = ...
    def __init__(self, lexer) -> None:
        ...
    
    def parse(self, program):
        ...
    
    def expression(self, rbp=...):
        ...
    
    def advance(self, name=...): # -> None:
        ...
    


def method(s): # -> Callable[..., Any]:
    ...

@method(symbol("(name)"))
def nud(self, parser):
    ...

@method(symbol("(name)"))
def evaluate(self, pyobject): # -> PyDefinedObject | PyObject | None:
    ...

@method(symbol("["))
def led(self, left, parser):
    ...

@method(symbol("["))
def evaluate(self, pyobject): # -> Any:
    ...

@method(symbol("("))
def nud(self, parser):
    ...

@method(symbol("("))
def led(self, left, parser):
    ...

@method(symbol("("))
def evaluate(self, pyobject):
    ...

@method(symbol("or"))
@method(symbol("|"))
def evaluate(self, pyobject):
    ...

class Compiler:
    parser_factory = Parser
    lexer_factory = Lexer
    symbol_table = ...
    @base_utils.cached(500)
    def __call__(self, program):
        """
        :type program: str
        :rtype: rope.base.oi.type_hinting.evaluate.SymbolBase
        """
        ...
    


compile = ...
class Evaluator:
    compile = ...
    def __call__(self, program, pyobject):
        """Evaluates the program string or AST

        :type program: str or rope.base.oi.type_hinting.evaluate.SymbolBase
        :rtype: rope.base.pyobjects.PyDefinedObject | rope.base.pyobjects.PyObject or None
        """
        ...
    


evaluate = ...
