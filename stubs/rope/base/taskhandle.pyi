"""
This type stub file was generated by pyright.
"""

from abc import ABC, abstractmethod
from typing import Optional, Sequence
from rope.base import utils

class BaseJobSet(ABC):
    name: str = ...
    job_name: str = ...
    @abstractmethod
    def started_job(self, name: str) -> None:
        ...
    
    @abstractmethod
    def finished_job(self) -> None:
        ...
    
    @abstractmethod
    def check_status(self) -> None:
        ...
    
    @utils.deprecated("Just use JobSet.job_name attribute/property instead")
    def get_active_job_name(self) -> str:
        ...
    
    @abstractmethod
    def get_percent_done(self) -> Optional[float]:
        ...
    
    @utils.deprecated("Just use JobSet.name attribute/property instead")
    def get_name(self) -> str:
        ...
    
    @abstractmethod
    def increment(self) -> None:
        """
        Increment the number of tasks to complete.

        This is used if the number is not known ahead of time.
        """
        ...
    


class BaseTaskHandle(ABC):
    @abstractmethod
    def stop(self) -> None:
        ...
    
    @abstractmethod
    def current_jobset(self) -> Optional[BaseJobSet]:
        ...
    
    @abstractmethod
    def add_observer(self) -> None:
        ...
    
    @abstractmethod
    def is_stopped(self) -> bool:
        ...
    
    @abstractmethod
    def get_jobsets(self) -> Sequence[BaseJobSet]:
        ...
    
    def create_jobset(self, name: str = ..., count: Optional[int] = ...) -> BaseJobSet:
        ...
    


class TaskHandle(BaseTaskHandle):
    def __init__(self, name=..., interrupts=...) -> None:
        """Construct a TaskHandle

        If `interrupts` is `False` the task won't be interrupted by
        calling `TaskHandle.stop()`.

        """
        ...
    
    def stop(self): # -> None:
        """Interrupts the refactoring"""
        ...
    
    def current_jobset(self): # -> None:
        """Return the current `JobSet`"""
        ...
    
    def add_observer(self, observer): # -> None:
        """Register an observer for this task handle

        The observer is notified whenever the task is stopped or
        a job gets finished.

        """
        ...
    
    def is_stopped(self): # -> bool:
        ...
    
    def get_jobsets(self): # -> list[Any]:
        ...
    
    def create_jobset(self, name=..., count=...): # -> JobSet:
        ...
    


class JobSet(BaseJobSet):
    def __init__(self, handle, name, count) -> None:
        ...
    
    def started_job(self, name): # -> None:
        ...
    
    def finished_job(self): # -> None:
        ...
    
    def check_status(self): # -> None:
        ...
    
    @utils.deprecated("Just use JobSet.job_name attribute/property instead")
    def get_active_job_name(self): # -> str:
        ...
    
    def get_percent_done(self): # -> int | None:
        ...
    
    @utils.deprecated("Just use JobSet.name attribute/property instead")
    def get_name(self): # -> str:
        ...
    
    def increment(self): # -> None:
        ...
    


class NullTaskHandle(BaseTaskHandle):
    def is_stopped(self): # -> Literal[False]:
        ...
    
    def stop(self): # -> None:
        ...
    
    def create_jobset(self, *args, **kwds): # -> NullJobSet:
        ...
    
    def get_jobsets(self): # -> list[Any]:
        ...
    
    def add_observer(self, observer): # -> None:
        ...
    
    def current_jobset(self) -> None:
        """Return the current `JobSet`"""
        ...
    


class NullJobSet(BaseJobSet):
    def started_job(self, name): # -> None:
        ...
    
    def finished_job(self): # -> None:
        ...
    
    def check_status(self): # -> None:
        ...
    
    @utils.deprecated("Just use JobSet.job_name attribute/property instead")
    def get_active_job_name(self): # -> None:
        ...
    
    def get_percent_done(self): # -> None:
        ...
    
    @utils.deprecated("Just use JobSet.name attribute/property instead")
    def get_name(self): # -> None:
        ...
    
    def increment(self): # -> None:
        ...
    


DEFAULT_TASK_HANDLE = ...
DEFAULT_JOB_SET = ...
