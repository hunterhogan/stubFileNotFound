"""
This type stub file was generated by pyright.
"""

import collections
from python_toolbox import caching, nifty_collections, sequence_tools

infinity = ...
class ChainSpace(sequence_tools.CuteSequenceMixin, collections.abc.Sequence):
    '''
    A space of sequences chained together.

    This is similar to `itertools.chain`, except that items can be fetched by
    index number rather than just iteration.

    Example:

        >>> chain_space = ChainSpace(('abc', (1, 2, 3)))
        >>> chain_space
        <ChainSpace: 3+3>
        >>> chain_space[4]
        2
        >>> tuple(chain_space)
        ('a', 'b', 'c', 1, 2, 3)
        >>> chain_space.index(2)
        4

    '''
    def __init__(self, sequences) -> None:
        ...
    
    @caching.CachedProperty
    @nifty_collections.LazyTuple.factory()
    def accumulated_lengths(self): # -> Generator[Any | int, Any, None]:
        '''
        A sequence of the accumulated length as every sequence is added.

        For example, if this chain space has sequences with lengths of 10, 100
        and 1000, this would be `[0, 10, 110, 1110]`.
        '''
        ...
    
    length = ...
    def __repr__(self): # -> str:
        ...
    
    def __getitem__(self, i):
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        ...
    
    _reduced = ...
    __eq__ = ...
    def __contains__(self, item): # -> bool:
        ...
    
    def index(self, item):
        '''Get the index number of `item` in this space.'''
        ...
    
    def __bool__(self): # -> bool:
        ...
    


