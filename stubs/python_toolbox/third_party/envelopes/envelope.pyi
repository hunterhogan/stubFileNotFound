"""
This type stub file was generated by pyright.
"""

import sys

"""
envelopes.envelope
==================

This module contains the Envelope class.
"""
if sys.version_info[0] == 2:
    ...
else:
    basestring = str
    def unicode(_str, _charset): # -> str:
        ...
    
class MessageEncodeError(Exception):
    ...


class Envelope:
    """
    The Envelope class.

    **Address formats**

    The following formats are supported for e-mail addresses:

    * ``"user@server.com"`` - just the e-mail address part as a string,
    * ``"Some User <user@server.com>"`` - name and e-mail address parts as a string,
    * ``("user@server.com", "Some User")`` - e-mail address and name parts as a tuple.

    Whenever you come to manipulate addresses feel free to use any (or all) of
    the formats above.

    :param to_addr: ``To`` address or list of ``To`` addresses
    :param from_addr: ``From`` address
    :param subject: message subject
    :param html_body: optional HTML part of the message
    :param text_body: optional plain text part of the message
    :param cc_addr: optional single CC address or list of CC addresses
    :param bcc_addr: optional single BCC address or list of BCC addresses
    :param headers: optional dictionary of headers
    :param charset: message charset
    """
    ADDR_FORMAT = ...
    ADDR_REGEXP = ...
    def __init__(self, to_addr=..., from_addr=..., subject=..., html_body=..., text_body=..., cc_addr=..., bcc_addr=..., headers=..., charset=...) -> None:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def to_addr(self): # -> list[Any]:
        """List of ``To`` addresses."""
        ...
    
    def add_to_addr(self, to_addr): # -> None:
        """Adds a ``To`` address."""
        ...
    
    def clear_to_addr(self): # -> None:
        """Clears list of ``To`` addresses."""
        ...
    
    @property
    def from_addr(self): # -> None:
        ...
    
    @from_addr.setter
    def from_addr(self, from_addr): # -> None:
        ...
    
    @property
    def cc_addr(self): # -> list[Any]:
        """List of CC addresses."""
        ...
    
    def add_cc_addr(self, cc_addr): # -> None:
        """Adds a CC address."""
        ...
    
    def clear_cc_addr(self): # -> None:
        """Clears list of CC addresses."""
        ...
    
    @property
    def bcc_addr(self): # -> list[Any]:
        """List of BCC addresses."""
        ...
    
    def add_bcc_addr(self, bcc_addr): # -> None:
        """Adds a BCC address."""
        ...
    
    def clear_bcc_addr(self): # -> None:
        """Clears list of BCC addresses."""
        ...
    
    @property
    def charset(self): # -> str:
        """Message charset."""
        ...
    
    @charset.setter
    def charset(self, charset): # -> None:
        ...
    
    @property
    def headers(self): # -> dict[Any, Any]:
        """Dictionary of custom headers."""
        ...
    
    def add_header(self, key, value): # -> None:
        """Adds a custom header."""
        ...
    
    def clear_headers(self): # -> None:
        """Clears custom headers."""
        ...
    
    def to_mime_message(self): # -> MIMEMultipart:
        """Returns the envelope as
        :py:class:`email.mime.multipart.MIMEMultipart`."""
        ...
    
    def add_attachment(self, file_path, mimetype=...): # -> None:
        """Attaches a file located at *file_path* to the envelope. If
        *mimetype* is not specified an attempt to guess it is made. If nothing
        is guessed then `application/octet-stream` is used."""
        ...
    
    def send(self, *args, **kwargs): # -> tuple[SMTP, _SendErrs]:
        """Sends the envelope using a freshly created SMTP connection. *args*
        and *kwargs* are passed directly to :py:class:`envelopes.conn.SMTP`
        constructor.

        Returns a tuple of SMTP object and whatever its send method returns."""
        ...
    


