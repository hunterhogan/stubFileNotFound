"""
This type stub file was generated by pyright.
"""

import unittest
from python_toolbox import context_management
from python_toolbox.exceptions import CuteException

'''This module defines tools for testing.'''
class Failure(CuteException, AssertionError):
    '''A test has failed.'''
    ...


class RaiseAssertor(context_management.ContextManager):
    '''
    Asserts that a certain exception was raised in the suite. You may use a
    snippet of text that must appear in the exception message or a regex that
    the exception message must match.

    Example:

        with RaiseAssertor(ZeroDivisionError, 'modulo by zero'):
            1/0

    '''
    def __init__(self, exception_type=..., text=..., assert_exact_type=...) -> None:
        '''
        Construct the `RaiseAssertor`.

        `exception_type` is an exception type that the exception must be of;
        `text` may be either a snippet of text that must appear in the
        exception's message, or a regex pattern that the exception message must
        match. Specify `assert_exact_type=False` if you want to assert that the
        exception is of the exact `exception_type` specified, and not a
        subclass of it.
        '''
        ...
    
    def manage_context(self): # -> Generator[Self, Any, None]:
        '''Manage the `RaiseAssertor'`s context.'''
        ...
    


def assert_same_signature(*callables): # -> None:
    '''Assert that all the `callables` have the same function signature.'''
    ...

class _MissingAttribute:
    '''Object signifying that an attribute was not found.'''
    ...


def assert_polite_wrapper(wrapper, wrapped=..., same_signature=...): # -> None:
    '''
    Assert that `wrapper` is a polite function wrapper around `wrapped`.

    A function wrapper (usually created by a decorator) has a few
    responsibilties; maintain the same name, signature, documentation etc. of
    the original function, and a few others. Here we check that the wrapper did
    all of those things.
    '''
    ...

class TestCase(unittest.TestCase, context_management.ContextManager):
    setUp = ...
    tearDown = ...
    def manage_context(self): # -> Generator[Self, Any, None]:
        ...
    
    def setup(self): # -> None:
        ...
    
    def tear_down(self): # -> None:
        ...
    


