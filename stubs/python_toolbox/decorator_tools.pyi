"""
This type stub file was generated by pyright.
"""

'''Tools for decorators.'''
def helpful_decorator_builder(decorator_builder): # -> _Wrapped[Callable[..., Any], Any, Callable[..., Any], Any]:
    '''
    Take a decorator builder and return a "helpful" version of it.

    A decorator builder is a function that returns a decorator. A decorator
    is used like this:

        @foo
        def bar():
            pass

    While a decorator *builder* is used like this

        @foo()
        def bar():
            pass

    The parentheses are the difference.

    Sometimes the user forgets to put parentheses after the decorator builder;
    in that case, a helpful decorator builder is one that raises a helpful
    exception, instead of an obscure one. Decorate your decorator builders with
    `helpful_decorator_builder` to make them raise a helpful exception when the
    user forgets the parentheses.

    Limitations:

      - Do not use this on decorators that may take a function object as their
        first argument.

      - Cannot be used on classes.

    '''
    ...

