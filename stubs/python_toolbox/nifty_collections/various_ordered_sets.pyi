"""
This type stub file was generated by pyright.
"""

import collections

class BaseOrderedSet(collections.abc.Set, collections.abc.Sequence):
    '''
    Base class for `OrderedSet` and `FrozenOrderedSet`, i.e. set with an order.

    This behaves like a `set` except items have an order. (By default they're
    ordered by insertion order, but that order can be changed.)
    '''
    def __init__(self, iterable=...) -> None:
        ...
    
    def __getitem__(self, index):
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __contains__(self, key): # -> bool:
        ...
    
    def __iter__(self): # -> Generator[Any, Any, None]:
        ...
    
    def __reversed__(self): # -> Generator[Any, Any, None]:
        ...
    
    def __repr__(self): # -> LiteralString | str:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class FrozenOrderedSet(BaseOrderedSet):
    '''
    A `frozenset` with an order.

    This behaves like a `frozenset` (i.e. a set that can't be changed after
    creation) except items have an order. (By default they're ordered by
    insertion order, but that order can be changed.)
    '''
    def __hash__(self) -> int:
        ...
    


class OrderedSet(BaseOrderedSet, collections.abc.MutableSet):
    '''
    A `set` with an order.

    This behaves like a `set` except items have an order. (By default they're
    ordered by insertion order, but that order can be changed.)
    '''
    add = ...
    clear = ...
    def move_to_end(self, key, last=...): # -> None:
        '''
        Move an existing element to the end (or start if `last=False`.)
        '''
        ...
    
    def sort(self, key=..., reverse=...): # -> None:
        '''
        Sort the items according to their keys, changing the order in-place.

        The optional `key` argument will be passed to the `sorted` function as
        a key function.
        '''
        ...
    
    def discard(self, key): # -> None:
        '''
        Remove an element from a set if it is a member.

        If the element is not a member, do nothing.
        '''
        ...
    
    def pop(self, last=...):
        '''Remove and return an arbitrary set element.'''
        ...
    
    def get_frozen(self): # -> FrozenOrderedSet:
        '''Get a frozen version of this ordered set.'''
        ...
    


class EmittingOrderedSet(OrderedSet):
    '''An ordered set that emits to `.emitter` every time it's modified.'''
    def __init__(self, iterable=..., *, emitter=...) -> None:
        ...
    
    def add(self, key, last=...): # -> None:
        '''
        Add an element to a set.

        This has no effect if the element is already present.
        '''
        ...
    
    def discard(self, key): # -> None:
        '''
        Remove an element from a set if it is a member.

        If the element is not a member, do nothing.
        '''
        ...
    
    def clear(self): # -> None:
        '''Clear the ordered set, removing all items.'''
        ...
    
    def set_emitter(self, emitter): # -> None:
        '''Set `emitter` to be emitted with on every modification.'''
        ...
    
    def move_to_end(self, key, last=...): # -> None:
        '''
        Move an existing element to the end (or start if `last=False`.)
        '''
        ...
    
    _emitter_freezer = ...
    def __eq__(self, other) -> bool:
        ...
    
    def get_without_emitter(self): # -> OrderedSet:
        '''Get a version of this ordered set without an emitter attached.'''
        ...
    


