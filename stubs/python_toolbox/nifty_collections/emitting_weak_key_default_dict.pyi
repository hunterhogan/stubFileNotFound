"""
This type stub file was generated by pyright.
"""

from .weak_key_default_dict import WeakKeyDefaultDict

'''
Defines the `EmittingWeakKeyDefaultDict` class.

See its documentation for more details.
'''
class EmittingWeakKeyDefaultDict(WeakKeyDefaultDict):
    '''
    A key that references keys weakly, has a default factory, and emits.

    This is a combination of `weakref.WeakKeyDictionary` and
    `collections.defaultdict`, which emits every time it's modified.

    The keys are referenced weakly, so if there are no more references to the
    key, it gets removed from this dict.

    If a "default factory" is supplied, when a key is attempted that doesn't
    exist the default factory will be called to create its new value.

    Every time that a change is made, like a key is added or removed or gets
    its value changed, we do `.emitter.emit()`.
    '''
    def __init__(self, emitter, *args, **kwargs) -> None:
        ...
    
    def set_emitter(self, emitter): # -> None:
        '''Set the emitter that will be emitted every time a change is made.'''
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def pop(self, key, *args):
        """ D.pop(k[,d]) -> v, remove specified key and return the
        corresponding value. If key is not found, d is returned if given,
        otherwise KeyError is raised """
        ...
    
    def popitem(self): # -> tuple[Any, Any] | None:
        """ D.popitem() -> (k, v), remove and return some (key, value)
        pair as a 2-tuple; but raise KeyError if D is empty """
        ...
    
    def clear(self):
        """ D.clear() -> None.  Remove all items from D. """
        ...
    
    def __repr__(self): # -> str:
        ...
    
    def __reduce__(self): # -> tuple[type[Self], tuple[Any, Any | Callable[..., object]] | Any, None, None, Iterator[Any]]:
        """
        __reduce__ must return a 5-tuple as follows:

           - factory function
           - tuple of args for the factory function
           - additional state (here None)
           - sequence iterator (here None)
           - dictionary iterator (yielding successive (key, value) pairs

           This API is used by pickle.py and copy.py.
        """
        ...
    


