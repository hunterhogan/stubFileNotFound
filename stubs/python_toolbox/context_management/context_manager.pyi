"""
This type stub file was generated by pyright.
"""

import abc
from .abstract_context_manager import AbstractContextManager
from .mixins import _DecoratingContextManagerMixin
from .context_manager_type import ContextManagerType

class ContextManager(AbstractContextManager, _DecoratingContextManagerMixin, metaclass=ContextManagerType):
    '''
    Allows running preparation code before a given suite and cleanup after.

    To make a context manager, use `ContextManager` as a base class and either
    (a) define `__enter__` and `__exit__` methods or (b) define a
    `manage_context` method that returns a generator. An alternative way to
    create a context manager is to define a generator function and decorate it
    with `ContextManagerType`.

    In any case, the resulting context manager could be called either with the
    `with` keyword or by using it as a decorator to a function.

    For more details, see documentation of the containing module,
    `python_toolbox.context_manager`.
    '''
    @abc.abstractmethod
    def __enter__(self): # -> None:
        '''Prepare for suite execution.'''
        ...
    
    @abc.abstractmethod
    def __exit__(self, exc_type, exc_value, exc_traceback): # -> None:
        '''Cleanup after suite execution.'''
        ...
    


