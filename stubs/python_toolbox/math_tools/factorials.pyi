"""
This type stub file was generated by pyright.
"""

infinity = ...
infinities = ...
def factorial(x, start=...): # -> Any:
    '''
    Calculate a factorial.

    This differs from the built-in `math.factorial` in that it allows a `start`
    argument. If one is given, the function returns `(x!)/(start!)`.

    Examples:

        >>> factorial(5)
        120
        >>> factorial(5, 3)
        60

    '''
    ...

def inverse_factorial(number, round_up=...): # -> int | None:
    '''
    Get the integer that the factorial of would be `number`.

    If `number` isn't a factorial of an integer, the result will be rounded. By
    default it'll be rounded up, but you can specify `round_up=False` to have
    it be rounded down.

    Examples:

        >>> inverse_factorial(100)
        5
        >>> inverse_factorial(100, round_up=False)
        4

    '''
    ...

def from_factoradic(factoradic_number): # -> Literal[0]:
    '''
    Convert a factoradic representation to the number it's representing.

    Read about factoradic numbers here:
    https://en.wikipedia.org/wiki/Factorial_number_system

    Example:

        >>> from_factoradic((4, 0, 2, 0, 0))
        100

    '''
    ...

def to_factoradic(number, n_digits_pad=...): # -> tuple[Literal[0] | None, ...] | tuple[None, ...]:
    '''
    Convert a number to factoradic representation (in a tuple.)

    Read about factoradic numbers here:
    https://en.wikipedia.org/wiki/Factorial_number_system

    Example:

        >>> to_factoradic(100)
        (4, 0, 2, 0, 0)


    Use `n_digits_pad` if you want to have the result padded with zeroes:

        >>> to_factoradic(100, n_digits_pad=7)
        (0, 0, 4, 0, 2, 0, 0)

    '''
    ...

