"""
This type stub file was generated by pyright.
"""

from python_toolbox import caching

'''Module for describing Python objects as strings.'''
_unresolvable_string_pattern = ...
_address_in_unresolvable_string_pattern = ...
def describe(obj, shorten=..., root=..., namespace=...): # -> str | LiteralString:
    '''
    Describe a Python object has a string.

    For example:

        >>> describe([1, 2, {3: email.encoders}])
        '[1, 2, {3: 4}]'


    All the parameters are used for trying to give as short of a description as
    possible. The shortening is done only for addresses within the string.
    (Like 'email.encoders'.)

    `shorten=True` would try to skip redundant intermediate nodes. For example,
    if asked to describe `django.db.utils.ConnectionRouter` with `shorten` on,
    it will return 'django.db.ConnectionRouter', because the `ConnectionRouter`
    class is available at this shorter address as well.

    The parameters `root` and `namespace` help shorten addresses some more.
    It's assumed we can express any address in relation to `root`, or in
    relation to an item in `namespace`. For example, if `root=python_toolbox`
    or `namespace=python_toolbox.__dict__`, we could describe
    `python_toolbox.caching` as simply 'caching'.)
    '''
    ...

@caching.cache()
def get_address(obj, shorten=..., root=..., namespace=...): # -> str | LiteralString:
    '''
    Get the address of a Python object.

    This only works for objects that have addresses, like modules, classes,
    functions, methods, etc. It usually doesn't work on instances created
    during the program. (e.g. `[1, 2]` doesn't have an address.)
    '''
    ...

def shorten_address(address, root=..., namespace=...):
    '''
    Shorten an address by dropping redundant intermediate nodes.

    For example, 'python_toolbox.caching.cached_property.CachedProperty' could
    be shortened to 'python_toolbox.caching.CachedProperty', because the
    `CachedProperty` class is available at this shorter address as well.

    Note: `root` and `namespace` are only provided in order to access the
    object. This function doesn't do root- or namespace-shortening.
    '''
    ...

