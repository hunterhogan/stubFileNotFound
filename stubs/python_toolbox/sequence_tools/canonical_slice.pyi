"""
This type stub file was generated by pyright.
"""

infinity = ...
infinities = ...
class CanonicalSlice:
    '''
    A canonical representation of a `slice` with `start`, `stop`, and `step`.

    This is helpful because `slice`'s own `.start`, `.stop` and `.step` are
    sometimes specified as `None` for convenience, so Python will infer them
    automatically. Here we make them explicit. If we're given an iterable (or
    the length of one) in `iterable_or_length`, we'll give a canoncial slice
    for that length, otherwise we'll do a generic one, which is rarely usable
    for actual slicing because it often has `infinity` in it, so it's useful
    only for canonalization. (e.g. checking whether two different slices are
    actually equal.)

    When doing a generic canonical slice (without giving an iterable or
    length):

      - If `start` is `None`, it will be set to `0` (if the `step` is positive)
        or `infinity` (if the `step` is negative.)

      - If `stop` is `None`, it will be set to `infinity` (if the `step` is
        positive) or `0` (if the `step` is negative.)

      - If `step` is `None`, it will be changed to the default `1`.

    '''
    def __init__(self, slice_, iterable_or_length=..., offset=...) -> None:
        ...
    
    __iter__ = ...
    __repr__ = ...
    _reduced = ...
    __hash__ = ...
    __eq__ = ...
    __contains__ = ...


