"""
This type stub file was generated by pyright.
"""

from python_toolbox import caching
from .misc import CuteSequence

infinity = ...
infinities = ...
NoneType = ...
def parse_range_args(*args): # -> tuple[Literal[0], float, Literal[1]] | tuple[Literal[0], float | Any, Literal[1]] | tuple[Any | Literal[0], float | Any, Literal[1]] | tuple[Any | Literal[0], Any | float, Any]:
    ...

class CuteRange(CuteSequence):
    '''
    Improved version of Python's `range` that has extra features.

    `CuteRange` is like Python's built-in `range`, except (1) it's cute and (2)
    it's completely different. LOL, just kidding.

    `CuteRange` takes `start`, `stop` and `step` arguments just like `range`,
    but it allows you to use floating-point numbers (or decimals), and it
    allows you to use infinite numbers to produce infinite ranges.

    Obviously, `CuteRange` allows iteration, index access, searching for a
    number's index number, checking whether a number is in the range or not,
    and slicing.

    Examples:

        `CuteRange(float('inf'))` is an infinite range starting at zero and
        never ending.

        `CuteRange(7, float('inf'))` is an infinite range starting at 7 and
        never ending. (Like `itertools.count(7)` except it has all the
        amenities of a sequence, you can get items using list notation, you can
        slice it, you can get index numbers of items, etc.)

        `CuteRange(-1.6, 7.3)` is the finite range of numbers `(-1.6, -0.6,
        0.4, 1.4, 2.4, 3.4, 4.4, 5.4, 6.4)`.

        `CuteRange(10.4, -float('inf'), -7.1)` is the infinite range of numbers
        `(10.4, 3.3, -3.8, -10.9, -18.0, -25.1, ... )`.

    '''
    def __init__(self, *args) -> None:
        ...
    
    _reduced = ...
    __hash__ = ...
    __eq__ = ...
    distance_to_cover = ...
    @caching.CachedProperty
    def length(self): # -> Literal[0]:
        '''
        The length of the `CuteRange`.

        We're using a property `.length` rather than the built-in `__len__`
        because `__len__` can't handle infinite values or floats.
        '''
        ...
    
    __repr__ = ...
    @caching.CachedProperty
    def short_repr(self): # -> CachedProperty | object | Callable[..., str] | Callable[..., object] | str:
        '''
        A shorter representation of the `CuteRange`.

        This is different than `repr(cute_range)` only in cases where `step=1`.
        In these cases, while `repr(cute_range)` would be something like
        `CuteRange(7, 20)`, `cute_range.short_repr` would be `7..20`.
        '''
        ...
    
    def __getitem__(self, i, allow_out_of_range=...): # -> float | CuteRange:
        ...
    
    def __len__(self): # -> Integral | Literal[0]:
        ...
    
    def index(self, i, start=..., stop=...): # -> float | Literal[0]:
        '''Get the index number of `i` in this `CuteRange`.'''
        ...
    
    is_infinite = ...


