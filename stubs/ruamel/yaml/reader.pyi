from _typeshed import Incomplete
from ruamel.yaml.error import YAMLError
from typing import Any

__all__ = ['Reader', 'ReaderError']

class ReaderError(YAMLError):
    name: Incomplete
    character: Incomplete
    position: Incomplete
    encoding: Incomplete
    reason: Incomplete
    def __init__(self, name: Any, position: Any, character: Any, encoding: Any, reason: Any) -> None: ...
    def __str__(self) -> Any: ...

class Reader:
    loader: Incomplete
    def __init__(self, stream: Any, loader: Any = None) -> None: ...
    name: Any
    stream_pointer: int
    eof: bool
    buffer: str
    pointer: int
    raw_buffer: Any
    raw_decode: Incomplete
    encoding: str | None
    index: int
    line: int
    column: int
    def reset_reader(self) -> None: ...
    @property
    def stream(self) -> Any: ...
    _stream: Incomplete
    @stream.setter
    def stream(self, val: Any) -> None: ...
    def peek(self, index: int = 0) -> str: ...
    def prefix(self, length: int = 1) -> Any: ...
    def forward_1_1(self, length: int = 1) -> None: ...
    def forward(self, length: int = 1) -> None: ...
    def get_mark(self) -> Any: ...
    def determine_encoding(self) -> None: ...
    NON_PRINTABLE: Incomplete
    _printable_ascii: Incomplete
    @classmethod
    def _get_non_printable_ascii(cls, data: bytes) -> tuple[int, str] | None: ...
    @classmethod
    def _get_non_printable_regex(cls, data: str) -> tuple[int, str] | None: ...
    @classmethod
    def _get_non_printable(cls, data: str) -> tuple[int, str] | None: ...
    def check_printable(self, data: Any) -> None: ...
    def update(self, length: int) -> None: ...
    def update_raw(self, size: int | None = None) -> None: ...
