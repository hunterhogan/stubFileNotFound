from _typeshed import Incomplete
from typing import Any

class Version:
    _major: Incomplete
    _minor: Incomplete
    def __init__(self, major: int, minor: int) -> None: ...
    @property
    def major(self) -> int: ...
    @property
    def minor(self) -> int: ...
    def __eq__(self, v: Any) -> bool: ...
    def __lt__(self, v: Version) -> bool: ...
    def __le__(self, v: Version) -> bool: ...
    def __gt__(self, v: Version) -> bool: ...
    def __ge__(self, v: Version) -> bool: ...

def version(major: int | str | tuple[int, int] | None, minor: int | None = None) -> Version | None: ...

class Tag:
    _handle: Incomplete
    _prefix: Incomplete
    def __init__(self, handle: str, prefix: str) -> None: ...
    @property
    def handle(self) -> str: ...
    @property
    def prefix(self) -> str: ...

class DocInfo:
    """
    Store document information, can be used for analysis of a loaded YAML document
    requested_version: if explicitly set before load
    doc_version: from %YAML directive
    tags: from %TAG directives in scanned order
    """
    requested_version: Incomplete
    doc_version: Incomplete
    tags: Incomplete
    def __init__(self, requested_version: Version | None = None, doc_version: Version | None = None, tags: list[Tag] | None = None) -> None: ...
