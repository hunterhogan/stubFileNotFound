from _typeshed import Incomplete
from sympy.core.expr import Expr as Expr
from sympy.core.symbol import Dummy as Dummy
from sympy.core.sympify import _sympify as _sympify
from sympy.polys.domains import QQ as QQ
from sympy.polys.matrices import DomainMatrix as DomainMatrix
from sympy.polys.matrices.domainscalar import DomainScalar as DomainScalar
from sympy.polys.polyerrors import CoercionFailed as CoercionFailed
from sympy.polys.polytools import Poly as Poly, parallel_poly_from_expr as parallel_poly_from_expr

class MutablePolyDenseMatrix:
    """
    A mutable matrix of objects from poly module or to operate with them.

    Examples
    ========

    >>> from sympy.polys.polymatrix import PolyMatrix
    >>> from sympy import Symbol, Poly
    >>> x = Symbol('x')
    >>> pm1 = PolyMatrix([[Poly(x**2, x), Poly(-x, x)], [Poly(x**3, x), Poly(-1 + x, x)]])
    >>> v1 = PolyMatrix([[1, 0], [-1, 0]], x)
    >>> pm1*v1
    PolyMatrix([
    [    x**2 + x, 0],
    [x**3 - x + 1, 0]], ring=QQ[x])

    >>> pm1.ring
    ZZ[x]

    >>> v1*pm1
    PolyMatrix([
    [ x**2, -x],
    [-x**2,  x]], ring=QQ[x])

    >>> pm2 = PolyMatrix([[Poly(x**2, x, domain='QQ'), Poly(0, x, domain='QQ'), Poly(1, x, domain='QQ'),             Poly(x**3, x, domain='QQ'), Poly(0, x, domain='QQ'), Poly(-x**3, x, domain='QQ')]])
    >>> v2 = PolyMatrix([1, 0, 0, 0, 0, 0], x)
    >>> v2.ring
    QQ[x]
    >>> pm2*v2
    PolyMatrix([[x**2]], ring=QQ[x])

    """
    def __new__(cls, *args, ring: Incomplete | None = None): ...
    @classmethod
    def from_list(cls, rows, cols, items, gens, ring): ...
    @classmethod
    def from_dm(cls, dm): ...
    def to_Matrix(self): ...
    @classmethod
    def from_Matrix(cls, other, *gens, ring: Incomplete | None = None): ...
    def set_gens(self, gens): ...
    def __repr__(self) -> str: ...
    @property
    def shape(self): ...
    @property
    def rows(self): ...
    @property
    def cols(self): ...
    def __len__(self) -> int: ...
    def __getitem__(self, key): ...
    def __eq__(self, other): ...
    def __add__(self, other): ...
    def __sub__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __truediv__(self, other): ...
    def __neg__(self): ...
    def transpose(self): ...
    def row_join(self, other): ...
    def col_join(self, other): ...
    def applyfunc(self, func): ...
    @classmethod
    def eye(cls, n, gens): ...
    @classmethod
    def zeros(cls, m, n, gens): ...
    def rref(self, simplify: str = 'ignore', normalize_last: str = 'ignore'): ...
    def nullspace(self): ...
    def rank(self): ...
MutablePolyMatrix = MutablePolyDenseMatrix
PolyMatrix = MutablePolyDenseMatrix
