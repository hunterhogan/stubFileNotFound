from _typeshed import Incomplete
from sympy.polys.domains.domainelement import DomainElement
from sympy.polys.polyutils import PicklableWithSlots

__all__ = ['ModularInteger']

class ModularInteger(PicklableWithSlots, DomainElement):
    """A class representing a modular integer. """
    mod: Incomplete
    dom: Incomplete
    sym: Incomplete
    _parent: Incomplete
    __slots__: Incomplete
    def parent(self): ...
    val: Incomplete
    def __init__(self, val) -> None: ...
    def modulus(self): ...
    def __hash__(self): ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __int__(self) -> int: ...
    def to_int(self): ...
    def __pos__(self): ...
    def __neg__(self): ...
    @classmethod
    def _get_val(cls, other): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __truediv__(self, other): ...
    def __rtruediv__(self, other): ...
    def __mod__(self, other): ...
    def __rmod__(self, other): ...
    def __pow__(self, exp): ...
    def _compare(self, other, op): ...
    def _compare_deprecated(self, other, op): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...
    def __bool__(self) -> bool: ...
    @classmethod
    def _invert(cls, value): ...
    def invert(self): ...
