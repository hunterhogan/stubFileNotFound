from _typeshed import Incomplete

__all__ = ['BasePolynomialError', 'ExactQuotientFailed', 'PolynomialDivisionFailed', 'OperationNotSupported', 'HeuristicGCDFailed', 'HomomorphismFailed', 'IsomorphismFailed', 'ExtraneousFactors', 'EvaluationFailed', 'RefinementFailed', 'CoercionFailed', 'NotInvertible', 'NotReversible', 'NotAlgebraic', 'DomainError', 'PolynomialError', 'UnificationFailed', 'UnsolvableFactorError', 'GeneratorsError', 'GeneratorsNeeded', 'ComputationFailed', 'UnivariatePolynomialError', 'MultivariatePolynomialError', 'PolificationFailed', 'OptionError', 'FlagError']

class BasePolynomialError(Exception):
    """Base class for polynomial related exceptions. """
    def new(self, *args) -> None: ...

class ExactQuotientFailed(BasePolynomialError):
    def __init__(self, f, g, dom: Incomplete | None = None) -> None: ...
    def __str__(self) -> str: ...
    def new(self, f, g): ...

class PolynomialDivisionFailed(BasePolynomialError):
    f: Incomplete
    g: Incomplete
    domain: Incomplete
    def __init__(self, f, g, domain) -> None: ...
    def __str__(self) -> str: ...

class OperationNotSupported(BasePolynomialError):
    poly: Incomplete
    func: Incomplete
    def __init__(self, poly, func) -> None: ...
    def __str__(self) -> str: ...

class HeuristicGCDFailed(BasePolynomialError): ...
class ModularGCDFailed(BasePolynomialError): ...
class HomomorphismFailed(BasePolynomialError): ...
class IsomorphismFailed(BasePolynomialError): ...
class ExtraneousFactors(BasePolynomialError): ...
class EvaluationFailed(BasePolynomialError): ...
class RefinementFailed(BasePolynomialError): ...
class CoercionFailed(BasePolynomialError): ...
class NotInvertible(BasePolynomialError): ...
class NotReversible(BasePolynomialError): ...
class NotAlgebraic(BasePolynomialError): ...
class DomainError(BasePolynomialError): ...
class PolynomialError(BasePolynomialError): ...
class UnificationFailed(BasePolynomialError): ...
class UnsolvableFactorError(BasePolynomialError):
    """Raised if ``roots`` is called with strict=True and a polynomial
     having a factor whose solutions are not expressible in radicals
     is encountered."""
class GeneratorsError(BasePolynomialError): ...
class GeneratorsNeeded(GeneratorsError): ...

class ComputationFailed(BasePolynomialError):
    func: Incomplete
    nargs: Incomplete
    exc: Incomplete
    def __init__(self, func, nargs, exc) -> None: ...
    def __str__(self) -> str: ...

class UnivariatePolynomialError(PolynomialError): ...
class MultivariatePolynomialError(PolynomialError): ...

class PolificationFailed(PolynomialError):
    orig: Incomplete
    expr: Incomplete
    origs: Incomplete
    exprs: Incomplete
    opt: Incomplete
    seq: Incomplete
    def __init__(self, opt, origs, exprs, seq: bool = False) -> None: ...
    def __str__(self) -> str: ...

class OptionError(BasePolynomialError): ...
class FlagError(OptionError): ...
