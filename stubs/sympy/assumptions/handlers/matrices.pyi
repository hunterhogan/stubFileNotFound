from ..predicates.matrices import ComplexElementsPredicate as ComplexElementsPredicate, DiagonalPredicate as DiagonalPredicate, FullRankPredicate as FullRankPredicate, IntegerElementsPredicate as IntegerElementsPredicate, InvertiblePredicate as InvertiblePredicate, LowerTriangularPredicate as LowerTriangularPredicate, OrthogonalPredicate as OrthogonalPredicate, PositiveDefinitePredicate as PositiveDefinitePredicate, RealElementsPredicate as RealElementsPredicate, SquarePredicate as SquarePredicate, SymmetricPredicate as SymmetricPredicate, UnitaryPredicate as UnitaryPredicate, UpperTriangularPredicate as UpperTriangularPredicate
from sympy.assumptions import Q as Q, ask as ask
from sympy.matrices.expressions import BlockDiagMatrix as BlockDiagMatrix, BlockMatrix as BlockMatrix, Determinant as Determinant, DiagMatrix as DiagMatrix, DiagonalMatrix as DiagonalMatrix, HadamardProduct as HadamardProduct, Identity as Identity, Inverse as Inverse, MatAdd as MatAdd, MatMul as MatMul, MatPow as MatPow, MatrixExpr as MatrixExpr, MatrixSlice as MatrixSlice, MatrixSymbol as MatrixSymbol, OneMatrix as OneMatrix, Trace as Trace, Transpose as Transpose, ZeroMatrix as ZeroMatrix

def _Factorization(predicate, expr, assumptions): ...
def _(expr, assumptions): ...
def _is_empty_or_1x1(expr): ...
def BM_elements(predicate, expr, assumptions):
    """ Block Matrix elements. """
def MS_elements(predicate, expr, assumptions):
    """ Matrix Slice elements. """
def MatMul_elements(matrix_predicate, scalar_predicate, expr, assumptions): ...
