from _typeshed import Incomplete

class interval:
    """ Represents an interval containing floating points as start and
    end of the interval
    The is_valid variable tracks whether the interval obtained as the
    result of the function is in the domain and is continuous.
    - True: Represents the interval result of a function is continuous and
            in the domain of the function.
    - False: The interval argument of the function was not in the domain of
             the function, hence the is_valid of the result interval is False
    - None: The function was not continuous over the interval or
            the function's argument interval is partly in the domain of the
            function

    A comparison between an interval and a real number, or a
    comparison between two intervals may return ``intervalMembership``
    of two 3-valued logic values.
    """
    is_valid: Incomplete
    start: Incomplete
    end: Incomplete
    def __init__(self, *args, is_valid: bool = True, **kwargs) -> None: ...
    @property
    def mid(self): ...
    @property
    def width(self): ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def __lt__(self, other): ...
    def __gt__(self, other): ...
    def __eq__(self, other): ...
    def __ne__(self, other): ...
    def __le__(self, other): ...
    def __ge__(self, other): ...
    def __add__(self, other): ...
    __radd__ = __add__
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __neg__(self): ...
    def __mul__(self, other): ...
    __rmul__ = __mul__
    def __contains__(self, other) -> bool: ...
    def __rtruediv__(self, other): ...
    def __truediv__(self, other): ...
    def __pow__(self, other): ...
    def __rpow__(self, other): ...
    def __hash__(self): ...

def _pow_float(inter, power):
    """Evaluates an interval raised to a floating point."""
def _pow_int(inter, power):
    """Evaluates an interval raised to an integer power"""
