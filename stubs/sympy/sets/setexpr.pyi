from .sets import set_add as set_add, set_div as set_div, set_function as set_function, set_mul as set_mul, set_pow as set_pow, set_sub as set_sub
from _typeshed import Incomplete
from sympy.core import Expr as Expr
from sympy.core.decorators import _sympifyit as _sympifyit, call_highest_priority as call_highest_priority

class SetExpr(Expr):
    """An expression that can take on values of a set.

    Examples
    ========

    >>> from sympy import Interval, FiniteSet
    >>> from sympy.sets.setexpr import SetExpr

    >>> a = SetExpr(Interval(0, 5))
    >>> b = SetExpr(FiniteSet(1, 10))
    >>> (a + b).set
    Union(Interval(1, 6), Interval(10, 15))
    >>> (2*a + b).set
    Interval(1, 20)
    """
    _op_priority: float
    def __new__(cls, setarg): ...
    set: Incomplete
    def _latex(self, printer): ...
    def __add__(self, other): ...
    def __radd__(self, other): ...
    def __mul__(self, other): ...
    def __rmul__(self, other): ...
    def __sub__(self, other): ...
    def __rsub__(self, other): ...
    def __pow__(self, other): ...
    def __rpow__(self, other): ...
    def __truediv__(self, other): ...
    def __rtruediv__(self, other): ...
    def _eval_func(self, func): ...

def _setexpr_apply_operation(op, x, y): ...
