from .ndim_array import NDimArray as NDimArray
from sympy.core.expr import Expr as Expr
from sympy.core.function import Derivative as Derivative
from sympy.matrices.expressions.matexpr import MatrixExpr as MatrixExpr, _matrix_derivative as _matrix_derivative
from sympy.matrices.matrixbase import MatrixBase as MatrixBase

class ArrayDerivative(Derivative):
    is_scalar: bool
    def __new__(cls, expr, *variables, **kwargs): ...
    def _get_shape(self): ...
    @property
    def shape(self): ...
    @classmethod
    def _get_zero_with_shape_like(cls, expr): ...
    @staticmethod
    def _call_derive_scalar_by_matrix(expr: Expr, v: MatrixBase) -> Expr: ...
    @staticmethod
    def _call_derive_scalar_by_matexpr(expr: Expr, v: MatrixExpr) -> Expr: ...
    @staticmethod
    def _call_derive_scalar_by_array(expr: Expr, v: NDimArray) -> Expr: ...
    @staticmethod
    def _call_derive_matrix_by_scalar(expr: MatrixBase, v: Expr) -> Expr: ...
    @staticmethod
    def _call_derive_matexpr_by_scalar(expr: MatrixExpr, v: Expr) -> Expr: ...
    @staticmethod
    def _call_derive_array_by_scalar(expr: NDimArray, v: Expr) -> Expr: ...
    @staticmethod
    def _call_derive_default(expr: Expr, v: Expr) -> Expr | None: ...
    @classmethod
    def _dispatch_eval_derivative_n_times(cls, expr, v, count): ...
