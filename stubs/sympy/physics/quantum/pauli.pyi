from sympy.physics.quantum import Bra, Ket, Operator

__all__ = ['SigmaX', 'SigmaY', 'SigmaZ', 'SigmaMinus', 'SigmaPlus', 'SigmaZKet', 'SigmaZBra', 'qsimplify_pauli']

class SigmaOpBase(Operator):
    """Pauli sigma operator, base class"""
    @property
    def name(self): ...
    @property
    def use_name(self): ...
    @classmethod
    def default_args(self): ...
    def __new__(cls, *args, **hints): ...
    def _eval_commutator_BosonOp(self, other, **hints): ...

class SigmaX(SigmaOpBase):
    """Pauli sigma x operator

    Parameters
    ==========

    name : str
        An optional string that labels the operator. Pauli operators with
        different names commute.

    Examples
    ========

    >>> from sympy.physics.quantum import represent
    >>> from sympy.physics.quantum.pauli import SigmaX
    >>> sx = SigmaX()
    >>> sx
    SigmaX()
    >>> represent(sx)
    Matrix([
    [0, 1],
    [1, 0]])
    """
    def __new__(cls, *args, **hints): ...
    def _eval_commutator_SigmaY(self, other, **hints): ...
    def _eval_commutator_SigmaZ(self, other, **hints): ...
    def _eval_commutator_BosonOp(self, other, **hints): ...
    def _eval_anticommutator_SigmaY(self, other, **hints): ...
    def _eval_anticommutator_SigmaZ(self, other, **hints): ...
    def _eval_adjoint(self): ...
    def _print_contents_latex(self, printer, *args): ...
    def _print_contents(self, printer, *args): ...
    def _eval_power(self, e): ...
    def _represent_default_basis(self, **options): ...

class SigmaY(SigmaOpBase):
    """Pauli sigma y operator

    Parameters
    ==========

    name : str
        An optional string that labels the operator. Pauli operators with
        different names commute.

    Examples
    ========

    >>> from sympy.physics.quantum import represent
    >>> from sympy.physics.quantum.pauli import SigmaY
    >>> sy = SigmaY()
    >>> sy
    SigmaY()
    >>> represent(sy)
    Matrix([
    [0, -I],
    [I,  0]])
    """
    def __new__(cls, *args, **hints): ...
    def _eval_commutator_SigmaZ(self, other, **hints): ...
    def _eval_commutator_SigmaX(self, other, **hints): ...
    def _eval_anticommutator_SigmaX(self, other, **hints): ...
    def _eval_anticommutator_SigmaZ(self, other, **hints): ...
    def _eval_adjoint(self): ...
    def _print_contents_latex(self, printer, *args): ...
    def _print_contents(self, printer, *args): ...
    def _eval_power(self, e): ...
    def _represent_default_basis(self, **options): ...

class SigmaZ(SigmaOpBase):
    """Pauli sigma z operator

    Parameters
    ==========

    name : str
        An optional string that labels the operator. Pauli operators with
        different names commute.

    Examples
    ========

    >>> from sympy.physics.quantum import represent
    >>> from sympy.physics.quantum.pauli import SigmaZ
    >>> sz = SigmaZ()
    >>> sz ** 3
    SigmaZ()
    >>> represent(sz)
    Matrix([
    [1,  0],
    [0, -1]])
    """
    def __new__(cls, *args, **hints): ...
    def _eval_commutator_SigmaX(self, other, **hints): ...
    def _eval_commutator_SigmaY(self, other, **hints): ...
    def _eval_anticommutator_SigmaX(self, other, **hints): ...
    def _eval_anticommutator_SigmaY(self, other, **hints): ...
    def _eval_adjoint(self): ...
    def _print_contents_latex(self, printer, *args): ...
    def _print_contents(self, printer, *args): ...
    def _eval_power(self, e): ...
    def _represent_default_basis(self, **options): ...

class SigmaMinus(SigmaOpBase):
    """Pauli sigma minus operator

    Parameters
    ==========

    name : str
        An optional string that labels the operator. Pauli operators with
        different names commute.

    Examples
    ========

    >>> from sympy.physics.quantum import represent, Dagger
    >>> from sympy.physics.quantum.pauli import SigmaMinus
    >>> sm = SigmaMinus()
    >>> sm
    SigmaMinus()
    >>> Dagger(sm)
    SigmaPlus()
    >>> represent(sm)
    Matrix([
    [0, 0],
    [1, 0]])
    """
    def __new__(cls, *args, **hints): ...
    def _eval_commutator_SigmaX(self, other, **hints): ...
    def _eval_commutator_SigmaY(self, other, **hints): ...
    def _eval_commutator_SigmaZ(self, other, **hints): ...
    def _eval_commutator_SigmaMinus(self, other, **hints): ...
    def _eval_anticommutator_SigmaZ(self, other, **hints): ...
    def _eval_anticommutator_SigmaX(self, other, **hints): ...
    def _eval_anticommutator_SigmaY(self, other, **hints): ...
    def _eval_anticommutator_SigmaPlus(self, other, **hints): ...
    def _eval_adjoint(self): ...
    def _eval_power(self, e): ...
    def _print_contents_latex(self, printer, *args): ...
    def _print_contents(self, printer, *args): ...
    def _represent_default_basis(self, **options): ...

class SigmaPlus(SigmaOpBase):
    """Pauli sigma plus operator

    Parameters
    ==========

    name : str
        An optional string that labels the operator. Pauli operators with
        different names commute.

    Examples
    ========

    >>> from sympy.physics.quantum import represent, Dagger
    >>> from sympy.physics.quantum.pauli import SigmaPlus
    >>> sp = SigmaPlus()
    >>> sp
    SigmaPlus()
    >>> Dagger(sp)
    SigmaMinus()
    >>> represent(sp)
    Matrix([
    [0, 1],
    [0, 0]])
    """
    def __new__(cls, *args, **hints): ...
    def _eval_commutator_SigmaX(self, other, **hints): ...
    def _eval_commutator_SigmaY(self, other, **hints): ...
    def _eval_commutator_SigmaZ(self, other, **hints): ...
    def _eval_commutator_SigmaMinus(self, other, **hints): ...
    def _eval_anticommutator_SigmaZ(self, other, **hints): ...
    def _eval_anticommutator_SigmaX(self, other, **hints): ...
    def _eval_anticommutator_SigmaY(self, other, **hints): ...
    def _eval_anticommutator_SigmaMinus(self, other, **hints): ...
    def _eval_adjoint(self): ...
    def _eval_mul(self, other): ...
    def _eval_power(self, e): ...
    def _print_contents_latex(self, printer, *args): ...
    def _print_contents(self, printer, *args): ...
    def _represent_default_basis(self, **options): ...

class SigmaZKet(Ket):
    """Ket for a two-level system quantum system.

    Parameters
    ==========

    n : Number
        The state number (0 or 1).

    """
    def __new__(cls, n): ...
    @property
    def n(self): ...
    @classmethod
    def dual_class(self): ...
    @classmethod
    def _eval_hilbert_space(cls, label): ...
    def _eval_innerproduct_SigmaZBra(self, bra, **hints): ...
    def _apply_from_right_to_SigmaZ(self, op, **options): ...
    def _apply_from_right_to_SigmaX(self, op, **options): ...
    def _apply_from_right_to_SigmaY(self, op, **options): ...
    def _apply_from_right_to_SigmaMinus(self, op, **options): ...
    def _apply_from_right_to_SigmaPlus(self, op, **options): ...
    def _represent_default_basis(self, **options): ...

class SigmaZBra(Bra):
    """Bra for a two-level quantum system.

    Parameters
    ==========

    n : Number
        The state number (0 or 1).

    """
    def __new__(cls, n): ...
    @property
    def n(self): ...
    @classmethod
    def dual_class(self): ...

def qsimplify_pauli(e):
    """
    Simplify an expression that includes products of pauli operators.

    Parameters
    ==========

    e : expression
        An expression that contains products of Pauli operators that is
        to be simplified.

    Examples
    ========

    >>> from sympy.physics.quantum.pauli import SigmaX, SigmaY
    >>> from sympy.physics.quantum.pauli import qsimplify_pauli
    >>> sx, sy = SigmaX(), SigmaY()
    >>> sx * sy
    SigmaX()*SigmaY()
    >>> qsimplify_pauli(sx * sy)
    I*SigmaZ()
    """
