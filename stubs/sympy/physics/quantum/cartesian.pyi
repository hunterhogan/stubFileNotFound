from _typeshed import Incomplete
from sympy.physics.quantum.operator import HermitianOperator
from sympy.physics.quantum.state import Bra, Ket, State

__all__ = ['XOp', 'YOp', 'ZOp', 'PxOp', 'X', 'Y', 'Z', 'Px', 'XKet', 'XBra', 'PxKet', 'PxBra', 'PositionState3D', 'PositionKet3D', 'PositionBra3D']

class XOp(HermitianOperator):
    """1D cartesian position operator."""
    @classmethod
    def default_args(self): ...
    @classmethod
    def _eval_hilbert_space(self, args): ...
    def _eval_commutator_PxOp(self, other): ...
    def _apply_operator_XKet(self, ket, **options): ...
    def _apply_operator_PositionKet3D(self, ket, **options): ...
    def _represent_PxKet(self, basis, *, index: int = 1, **options): ...

class YOp(HermitianOperator):
    """ Y cartesian coordinate operator (for 2D or 3D systems) """
    @classmethod
    def default_args(self): ...
    @classmethod
    def _eval_hilbert_space(self, args): ...
    def _apply_operator_PositionKet3D(self, ket, **options): ...

class ZOp(HermitianOperator):
    """ Z cartesian coordinate operator (for 3D systems) """
    @classmethod
    def default_args(self): ...
    @classmethod
    def _eval_hilbert_space(self, args): ...
    def _apply_operator_PositionKet3D(self, ket, **options): ...

class PxOp(HermitianOperator):
    """1D cartesian momentum operator."""
    @classmethod
    def default_args(self): ...
    @classmethod
    def _eval_hilbert_space(self, args): ...
    def _apply_operator_PxKet(self, ket, **options): ...
    def _represent_XKet(self, basis, *, index: int = 1, **options): ...

X: Incomplete
Y: Incomplete
Z: Incomplete
Px: Incomplete

class XKet(Ket):
    """1D cartesian position eigenket."""
    @classmethod
    def _operators_to_state(self, op, **options): ...
    def _state_to_operators(self, op_class, **options): ...
    @classmethod
    def default_args(self): ...
    @classmethod
    def dual_class(self): ...
    @property
    def position(self):
        """The position of the state."""
    def _enumerate_state(self, num_states, **options): ...
    def _eval_innerproduct_XBra(self, bra, **hints): ...
    def _eval_innerproduct_PxBra(self, bra, **hints): ...

class XBra(Bra):
    """1D cartesian position eigenbra."""
    @classmethod
    def default_args(self): ...
    @classmethod
    def dual_class(self): ...
    @property
    def position(self):
        """The position of the state."""

class PositionState3D(State):
    """ Base class for 3D cartesian position eigenstates """
    @classmethod
    def _operators_to_state(self, op, **options): ...
    def _state_to_operators(self, op_class, **options): ...
    @classmethod
    def default_args(self): ...
    @property
    def position_x(self):
        """ The x coordinate of the state """
    @property
    def position_y(self):
        """ The y coordinate of the state """
    @property
    def position_z(self):
        """ The z coordinate of the state """

class PositionKet3D(Ket, PositionState3D):
    """ 3D cartesian position eigenket """
    def _eval_innerproduct_PositionBra3D(self, bra, **options): ...
    @classmethod
    def dual_class(self): ...

class PositionBra3D(Bra, PositionState3D):
    """ 3D cartesian position eigenbra """
    @classmethod
    def dual_class(self): ...

class PxKet(Ket):
    """1D cartesian momentum eigenket."""
    @classmethod
    def _operators_to_state(self, op, **options): ...
    def _state_to_operators(self, op_class, **options): ...
    @classmethod
    def default_args(self): ...
    @classmethod
    def dual_class(self): ...
    @property
    def momentum(self):
        """The momentum of the state."""
    def _enumerate_state(self, *args, **options): ...
    def _eval_innerproduct_XBra(self, bra, **hints): ...
    def _eval_innerproduct_PxBra(self, bra, **hints): ...

class PxBra(Bra):
    """1D cartesian momentum eigenbra."""
    @classmethod
    def default_args(self): ...
    @classmethod
    def dual_class(self): ...
    @property
    def momentum(self):
        """The momentum of the state."""
