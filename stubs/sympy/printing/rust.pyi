from _typeshed import Incomplete
from sympy.codegen.ast import bool_ as bool_, float32 as float32, float64 as float64, int32 as int32, integer as integer, real as real
from sympy.core import Float as Float, Lambda as Lambda, Rational as Rational, S as S
from sympy.core.expr import Expr as Expr
from sympy.core.numbers import equal_valued as equal_valued
from sympy.functions.elementary.integers import ceiling as ceiling, floor as floor
from sympy.printing.codeprinter import CodePrinter as CodePrinter
from sympy.printing.precedence import PRECEDENCE as PRECEDENCE
from typing import Any

class float_floor(floor):
    """
    Same as `sympy.floor`, but mimics the Rust behavior of returning a float rather than an integer
    """
    def _eval_is_integer(self): ...

class float_ceiling(ceiling):
    """
    Same as `sympy.ceiling`, but mimics the Rust behavior of returning a float rather than an integer
    """
    def _eval_is_integer(self): ...

function_overrides: Incomplete
known_functions: Incomplete
reserved_words: Incomplete

class TypeCast(Expr):
    """
    The type casting operator of the Rust language.
    """
    explicit: Incomplete
    _assumptions: Incomplete
    def __init__(self, expr, type_) -> None: ...
    @property
    def expr(self): ...
    @property
    def type_(self): ...
    def sort_key(self, order=None): ...

class RustCodePrinter(CodePrinter):
    """A printer to convert SymPy expressions to strings of Rust code"""
    printmethod: str
    language: str
    type_aliases: Incomplete
    type_mappings: Incomplete
    _default_settings: dict[str, Any]
    known_functions: Incomplete
    _dereference: Incomplete
    reserved_words: Incomplete
    function_overrides: Incomplete
    def __init__(self, settings={}) -> None: ...
    def _rate_index_position(self, p): ...
    def _get_statement(self, codestring): ...
    def _get_comment(self, text): ...
    def _declare_number_const(self, name, value): ...
    def _format_code(self, lines): ...
    def _traverse_matrix_indices(self, mat): ...
    def _get_loop_opening_ending(self, indices): ...
    def _print_caller_var(self, expr): ...
    def _print_Function(self, expr):
        """
        basic function for printing `Function`

        Function Style :

        1. args[0].func(args[1:]), method with arguments
        2. args[0].func(), method without arguments
        3. args[1].func(), method without arguments (e.g. (e, x) => x.exp())
        4. func(args), function with arguments
        """
    def _print_Mul(self, expr): ...
    def _print_Add(self, expr, order=None): ...
    def _print_Pow(self, expr): ...
    def _print_TypeCast(self, expr): ...
    def _print_Float(self, expr, _type: bool = False): ...
    def _print_Integer(self, expr, _type: bool = False): ...
    def _print_Rational(self, expr): ...
    def _print_Relational(self, expr): ...
    def _print_Indexed(self, expr): ...
    def _print_Idx(self, expr): ...
    def _print_Dummy(self, expr): ...
    def _print_Exp1(self, expr, _type: bool = False): ...
    def _print_Pi(self, expr, _type: bool = False): ...
    def _print_Infinity(self, expr, _type: bool = False): ...
    def _print_NegativeInfinity(self, expr, _type: bool = False): ...
    def _print_BooleanTrue(self, expr, _type: bool = False): ...
    def _print_BooleanFalse(self, expr, _type: bool = False): ...
    def _print_bool(self, expr, _type: bool = False): ...
    def _print_NaN(self, expr, _type: bool = False): ...
    def _print_Piecewise(self, expr): ...
    def _print_ITE(self, expr): ...
    def _print_MatrixBase(self, A): ...
    def _print_SparseRepMatrix(self, mat): ...
    def _print_MatrixElement(self, expr): ...
    def _print_Symbol(self, expr): ...
    def _print_Assignment(self, expr): ...
    def _print_sign(self, expr): ...
    def _cast_to_float(self, expr): ...
    def _can_print(self, name):
        """ Check if function ``name`` is either a known function or has its own
            printing method. Used to check if rewriting is possible."""
    def _collect_functions(self, expr): ...
    def _rewrite_known_functions(self, expr): ...
    def indent_code(self, code):
        """Accepts a string of code or a list of code lines"""
