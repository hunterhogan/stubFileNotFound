from .numpy import NumPyPrinter as NumPyPrinter
from .pycode import MpmathPrinter as MpmathPrinter, PythonCodePrinter as PythonCodePrinter
from _typeshed import Incomplete

__all__ = ['PythonCodePrinter', 'MpmathPrinter', 'NumPyPrinter', 'LambdaPrinter', 'NumPyPrinter', 'IntervalPrinter', 'lambdarepr']

class LambdaPrinter(PythonCodePrinter):
    """
    This printer converts expressions into strings that can be used by
    lambdify.
    """
    printmethod: str
    def _print_And(self, expr): ...
    def _print_Or(self, expr): ...
    def _print_Not(self, expr): ...
    def _print_BooleanTrue(self, expr): ...
    def _print_BooleanFalse(self, expr): ...
    def _print_ITE(self, expr): ...
    def _print_NumberSymbol(self, expr): ...
    def _print_Pow(self, expr, **kwargs): ...

class NumExprPrinter(LambdaPrinter):
    printmethod: str
    _numexpr_functions: Incomplete
    module: str
    def _print_ImaginaryUnit(self, expr): ...
    def _print_seq(self, seq, delimiter: str = ', '): ...
    def _print_Function(self, e): ...
    def _print_Piecewise(self, expr):
        """Piecewise function printer"""
    def _print_ITE(self, expr): ...
    def blacklisted(self, expr) -> None: ...
    _print_SparseRepMatrix = blacklisted
    _print_MutableSparseMatrix = blacklisted
    _print_ImmutableSparseMatrix = blacklisted
    _print_Matrix = blacklisted
    _print_DenseMatrix = blacklisted
    _print_MutableDenseMatrix = blacklisted
    _print_ImmutableMatrix = blacklisted
    _print_ImmutableDenseMatrix = blacklisted
    _print_list = blacklisted
    _print_tuple = blacklisted
    _print_Tuple = blacklisted
    _print_dict = blacklisted
    _print_Dict = blacklisted
    def _print_NumExprEvaluate(self, expr): ...
    def doprint(self, expr): ...
    def _print_Return(self, expr): ...
    def _print_Assignment(self, expr): ...
    def _print_CodeBlock(self, expr): ...

class IntervalPrinter(MpmathPrinter, LambdaPrinter):
    """Use ``lambda`` printer but print numbers as ``mpi`` intervals. """
    def _print_Integer(self, expr): ...
    def _print_Rational(self, expr): ...
    def _print_Half(self, expr): ...
    def _print_Pow(self, expr): ...

def lambdarepr(expr, **settings):
    """
    Returns a string usable for lambdifying.
    """
