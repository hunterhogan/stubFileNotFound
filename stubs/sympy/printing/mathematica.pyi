from _typeshed import Incomplete
from sympy.core import Basic as Basic, Expr as Expr, Float as Float
from sympy.core.sorting import default_sort_key as default_sort_key
from sympy.printing.codeprinter import CodePrinter as CodePrinter
from sympy.printing.precedence import precedence as precedence
from typing import Any

known_functions: Incomplete

class MCodePrinter(CodePrinter):
    """A printer to convert Python expressions to
    strings of the Wolfram's Mathematica code
    """
    printmethod: str
    language: str
    _default_settings: dict[str, Any]
    _number_symbols: set[tuple[Expr, Float]]
    _not_supported: set[Basic]
    known_functions: Incomplete
    def __init__(self, settings={}) -> None:
        """Register function mappings supplied by user"""
    def _format_code(self, lines): ...
    def _print_Pow(self, expr): ...
    def _print_Mul(self, expr): ...
    def _print_Relational(self, expr): ...
    def _print_Zero(self, expr): ...
    def _print_One(self, expr): ...
    def _print_NegativeOne(self, expr): ...
    def _print_Half(self, expr): ...
    def _print_ImaginaryUnit(self, expr): ...
    def _print_Infinity(self, expr): ...
    def _print_NegativeInfinity(self, expr): ...
    def _print_ComplexInfinity(self, expr): ...
    def _print_NaN(self, expr): ...
    def _print_Exp1(self, expr): ...
    def _print_Pi(self, expr): ...
    def _print_GoldenRatio(self, expr): ...
    def _print_TribonacciConstant(self, expr): ...
    def _print_EulerGamma(self, expr): ...
    def _print_Catalan(self, expr): ...
    def _print_list(self, expr): ...
    _print_tuple = _print_list
    _print_Tuple = _print_list
    def _print_ImmutableDenseMatrix(self, expr): ...
    def _print_ImmutableSparseMatrix(self, expr): ...
    def _print_ImmutableDenseNDimArray(self, expr): ...
    def _print_ImmutableSparseNDimArray(self, expr): ...
    def _print_Function(self, expr): ...
    _print_MinMaxBase = _print_Function
    def _print_LambertW(self, expr): ...
    def _print_atan2(self, expr): ...
    def _print_Integral(self, expr): ...
    def _print_Sum(self, expr): ...
    def _print_Derivative(self, expr): ...
    def _get_comment(self, text): ...

def mathematica_code(expr, **settings):
    """Converts an expr to a string of the Wolfram Mathematica code

    Examples
    ========

    >>> from sympy import mathematica_code as mcode, symbols, sin
    >>> x = symbols('x')
    >>> mcode(sin(x).series(x).removeO())
    '(1/120)*x^5 - 1/6*x^3 + x'
    """
