from _typeshed import Incomplete
from sympy import Integer as Integer, S as S
from sympy.codegen.cfunctions import Sqrt as Sqrt
from sympy.core.mul import Mul as Mul
from sympy.external import import_module as import_module
from sympy.matrices.expressions import MatrixExpr as MatrixExpr
from sympy.printing.precedence import PRECEDENCE as PRECEDENCE
from sympy.printing.pycode import AbstractPythonCodePrinter as AbstractPythonCodePrinter, ArrayPrinter as ArrayPrinter

torch: Incomplete

class TorchPrinter(ArrayPrinter, AbstractPythonCodePrinter):
    printmethod: str
    mapping: Incomplete
    _default_settings: Incomplete
    requires_grad: Incomplete
    dtype: Incomplete
    torch_version: Incomplete
    def __init__(self, settings=None) -> None: ...
    def _print_Function(self, expr): ...
    _print_Expr = _print_Function
    _print_Application = _print_Function
    _print_MatrixExpr = _print_Function
    _print_Relational = _print_Function
    _print_Not = _print_Function
    _print_And = _print_Function
    _print_Or = _print_Function
    _print_HadamardProduct = _print_Function
    _print_Trace = _print_Function
    _print_Determinant = _print_Function
    def _print_Inverse(self, expr): ...
    def _print_Transpose(self, expr): ...
    def _print_PermuteDims(self, expr): ...
    def _print_Derivative(self, expr): ...
    def _print_Piecewise(self, expr): ...
    def _print_Pow(self, expr): ...
    def _print_MatMul(self, expr): ...
    def _print_MatPow(self, expr): ...
    def _print_MatrixBase(self, expr): ...
    def _print_isnan(self, expr): ...
    def _print_isinf(self, expr): ...
    def _print_Identity(self, expr): ...
    def _print_ZeroMatrix(self, expr): ...
    def _print_OneMatrix(self, expr): ...
    def _print_conjugate(self, expr): ...
    def _print_ImaginaryUnit(self, expr): ...
    def _print_Heaviside(self, expr): ...
    def _print_gamma(self, expr): ...
    def _print_polygamma(self, expr): ...
    _module: str
    _einsum: str
    _add: str
    _transpose: str
    _ones: str
    _zeros: str

def torch_code(expr, requires_grad: bool = False, dtype: str = 'torch.float64', **settings): ...
