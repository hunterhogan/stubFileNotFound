from _typeshed import Incomplete
from sympy.core import Add as Add, Expr as Expr, Float as Float, Mod as Mod, Mul as Mul, Number as Number, S as S, Symbol as Symbol
from sympy.core.alphabets import greeks as greeks
from sympy.core.containers import Tuple as Tuple
from sympy.core.function import AppliedUndef as AppliedUndef, Derivative as Derivative, Function as Function
from sympy.core.operations import AssocOp as AssocOp
from sympy.core.power import Pow as Pow
from sympy.core.sorting import default_sort_key as default_sort_key
from sympy.core.sympify import SympifyError as SympifyError
from sympy.logic.boolalg import BooleanFalse as BooleanFalse, BooleanTrue as BooleanTrue, true as true
from sympy.printing.conventions import requires_partial as requires_partial, split_super_sub as split_super_sub
from sympy.printing.precedence import PRECEDENCE as PRECEDENCE, precedence as precedence, precedence_traditional as precedence_traditional
from sympy.printing.printer import Printer as Printer, print_function as print_function
from sympy.tensor.array import NDimArray as NDimArray
from sympy.utilities.iterables import has_variety as has_variety, sift as sift
from sympy.vector.basisdependent import BasisDependent as BasisDependent
from typing import Any, Callable

accepted_latex_functions: Incomplete
tex_greek_dictionary: Incomplete
other_symbols: Incomplete
modifier_dict: dict[str, Callable[[str], str]]
greek_letters_set: Incomplete
_between_two_numbers_p: Incomplete

def latex_escape(s: str) -> str:
    """
    Escape a string such that latex interprets it as plaintext.

    We cannot use verbatim easily with mathjax, so escaping is easier.
    Rules from https://tex.stackexchange.com/a/34586/41112.
    """

class LatexPrinter(Printer):
    printmethod: str
    _default_settings: dict[str, Any]
    _delim_dict: Incomplete
    def __init__(self, settings=None) -> None: ...
    def _add_parens(self, s) -> str: ...
    def _add_parens_lspace(self, s) -> str: ...
    def parenthesize(self, item, level, is_neg: bool = False, strict: bool = False) -> str: ...
    def parenthesize_super(self, s):
        """
        Protect superscripts in s

        If the parenthesize_super option is set, protect with parentheses, else
        wrap in braces.
        """
    def doprint(self, expr) -> str: ...
    def _needs_brackets(self, expr) -> bool:
        """
        Returns True if the expression needs to be wrapped in brackets when
        printed, False otherwise. For example: a + b => True; a => False;
        10 => False; -10 => True.
        """
    def _needs_function_brackets(self, expr) -> bool:
        """
        Returns True if the expression needs to be wrapped in brackets when
        passed as an argument to a function, False otherwise. This is a more
        liberal version of _needs_brackets, in that many expressions which need
        to be wrapped in brackets when added/subtracted/raised to a power do
        not need them when passed to a function. Such an example is a*b.
        """
    def _needs_mul_brackets(self, expr, first: bool = False, last: bool = False) -> bool:
        """
        Returns True if the expression needs to be wrapped in brackets when
        printed as part of a Mul, False otherwise. This is True for Add,
        but also for some container objects that would not need brackets
        when appearing last in a Mul, e.g. an Integral. ``last=True``
        specifies that this expr is the last to appear in a Mul.
        ``first=True`` specifies that this expr is the first to appear in
        a Mul.
        """
    def _needs_add_brackets(self, expr) -> bool:
        """
        Returns True if the expression needs to be wrapped in brackets when
        printed as part of an Add, False otherwise.  This is False for most
        things.
        """
    def _mul_is_clean(self, expr) -> bool: ...
    def _pow_is_clean(self, expr) -> bool: ...
    def _do_exponent(self, expr: str, exp): ...
    def _print_Basic(self, expr): ...
    def _print_bool(self, e: bool | BooleanTrue | BooleanFalse): ...
    _print_BooleanTrue = _print_bool
    _print_BooleanFalse = _print_bool
    def _print_NoneType(self, e): ...
    def _print_Add(self, expr, order=None): ...
    def _print_Cycle(self, expr): ...
    def _print_Permutation(self, expr): ...
    def _print_AppliedPermutation(self, expr): ...
    def _print_Float(self, expr): ...
    def _print_Cross(self, expr): ...
    def _print_Curl(self, expr): ...
    def _print_Divergence(self, expr): ...
    def _print_Dot(self, expr): ...
    def _print_Gradient(self, expr): ...
    def _print_Laplacian(self, expr): ...
    def _print_Mul(self, expr: Expr): ...
    def _print_AlgebraicNumber(self, expr): ...
    def _print_PrimeIdeal(self, expr): ...
    def _print_Pow(self, expr: Pow): ...
    def _helper_print_standard_power(self, expr, template: str) -> str: ...
    def _print_UnevaluatedExpr(self, expr): ...
    def _print_Sum(self, expr): ...
    def _print_Product(self, expr): ...
    def _print_BasisDependent(self, expr: BasisDependent): ...
    def _print_Indexed(self, expr): ...
    def _print_IndexedBase(self, expr): ...
    def _print_Idx(self, expr): ...
    def _print_Derivative(self, expr): ...
    def _print_Subs(self, subs): ...
    def _print_Integral(self, expr): ...
    def _print_Limit(self, expr): ...
    def _hprint_Function(self, func: str) -> str:
        """
        Logic to decide how to render a function to latex
          - if it is a recognized latex name, use the appropriate latex command
          - if it is a single letter, excluding sub- and superscripts, just use that letter
          - if it is a longer name, then put \\operatorname{} around it and be
            mindful of undercores in the name
        """
    def _print_Function(self, expr: Function, exp=None) -> str:
        """
        Render functions to LaTeX, handling functions that LaTeX knows about
        e.g., sin, cos, ... by using the proper LaTeX command (\\sin, \\cos, ...).
        For single-letter function names, render them as regular LaTeX math
        symbols. For multi-letter function names that LaTeX does not know
        about, (e.g., Li, sech) use \\operatorname{} so that the function name
        is rendered in Roman font and LaTeX handles spacing properly.

        expr is the expression involving the function
        exp is an exponent
        """
    def _print_UndefinedFunction(self, expr): ...
    def _print_ElementwiseApplyFunction(self, expr): ...
    @property
    def _special_function_classes(self): ...
    def _print_FunctionClass(self, expr): ...
    def _print_Lambda(self, expr): ...
    def _print_IdentityFunction(self, expr): ...
    def _hprint_variadic_function(self, expr, exp=None) -> str: ...
    _print_Min = _hprint_variadic_function
    _print_Max = _hprint_variadic_function
    def _print_floor(self, expr, exp=None): ...
    def _print_ceiling(self, expr, exp=None): ...
    def _print_log(self, expr, exp=None): ...
    def _print_Abs(self, expr, exp=None): ...
    def _print_re(self, expr, exp=None): ...
    def _print_im(self, expr, exp=None): ...
    def _print_Not(self, e): ...
    def _print_LogOp(self, args, char): ...
    def _print_And(self, e): ...
    def _print_Or(self, e): ...
    def _print_Xor(self, e): ...
    def _print_Implies(self, e, altchar=None): ...
    def _print_Equivalent(self, e, altchar=None): ...
    def _print_conjugate(self, expr, exp=None): ...
    def _print_polar_lift(self, expr, exp=None): ...
    def _print_ExpBase(self, expr, exp=None): ...
    def _print_Exp1(self, expr, exp=None): ...
    def _print_elliptic_k(self, expr, exp=None): ...
    def _print_elliptic_f(self, expr, exp=None): ...
    def _print_elliptic_e(self, expr, exp=None): ...
    def _print_elliptic_pi(self, expr, exp=None): ...
    def _print_beta(self, expr, exp=None): ...
    def _print_betainc(self, expr, exp=None, operator: str = 'B'): ...
    def _print_betainc_regularized(self, expr, exp=None): ...
    def _print_uppergamma(self, expr, exp=None): ...
    def _print_lowergamma(self, expr, exp=None): ...
    def _hprint_one_arg_func(self, expr, exp=None) -> str: ...
    _print_gamma = _hprint_one_arg_func
    def _print_Chi(self, expr, exp=None): ...
    def _print_expint(self, expr, exp=None): ...
    def _print_fresnels(self, expr, exp=None): ...
    def _print_fresnelc(self, expr, exp=None): ...
    def _print_subfactorial(self, expr, exp=None): ...
    def _print_factorial(self, expr, exp=None): ...
    def _print_factorial2(self, expr, exp=None): ...
    def _print_binomial(self, expr, exp=None): ...
    def _print_RisingFactorial(self, expr, exp=None): ...
    def _print_FallingFactorial(self, expr, exp=None): ...
    def _hprint_BesselBase(self, expr, exp, sym: str) -> str: ...
    def _hprint_vec(self, vec) -> str: ...
    def _print_besselj(self, expr, exp=None): ...
    def _print_besseli(self, expr, exp=None): ...
    def _print_besselk(self, expr, exp=None): ...
    def _print_bessely(self, expr, exp=None): ...
    def _print_yn(self, expr, exp=None): ...
    def _print_jn(self, expr, exp=None): ...
    def _print_hankel1(self, expr, exp=None): ...
    def _print_hankel2(self, expr, exp=None): ...
    def _print_hn1(self, expr, exp=None): ...
    def _print_hn2(self, expr, exp=None): ...
    def _hprint_airy(self, expr, exp=None, notation: str = '') -> str: ...
    def _hprint_airy_prime(self, expr, exp=None, notation: str = '') -> str: ...
    def _print_airyai(self, expr, exp=None): ...
    def _print_airybi(self, expr, exp=None): ...
    def _print_airyaiprime(self, expr, exp=None): ...
    def _print_airybiprime(self, expr, exp=None): ...
    def _print_hyper(self, expr, exp=None): ...
    def _print_meijerg(self, expr, exp=None): ...
    def _print_dirichlet_eta(self, expr, exp=None): ...
    def _print_zeta(self, expr, exp=None): ...
    def _print_stieltjes(self, expr, exp=None): ...
    def _print_lerchphi(self, expr, exp=None): ...
    def _print_polylog(self, expr, exp=None): ...
    def _print_jacobi(self, expr, exp=None): ...
    def _print_gegenbauer(self, expr, exp=None): ...
    def _print_chebyshevt(self, expr, exp=None): ...
    def _print_chebyshevu(self, expr, exp=None): ...
    def _print_legendre(self, expr, exp=None): ...
    def _print_assoc_legendre(self, expr, exp=None): ...
    def _print_hermite(self, expr, exp=None): ...
    def _print_laguerre(self, expr, exp=None): ...
    def _print_assoc_laguerre(self, expr, exp=None): ...
    def _print_Ynm(self, expr, exp=None): ...
    def _print_Znm(self, expr, exp=None): ...
    def __print_mathieu_functions(self, character, args, prime: bool = False, exp=None): ...
    def _print_mathieuc(self, expr, exp=None): ...
    def _print_mathieus(self, expr, exp=None): ...
    def _print_mathieucprime(self, expr, exp=None): ...
    def _print_mathieusprime(self, expr, exp=None): ...
    def _print_Rational(self, expr): ...
    def _print_Order(self, expr): ...
    def _print_Symbol(self, expr: Symbol, style: str = 'plain'): ...
    _print_RandomSymbol = _print_Symbol
    def _split_super_sub(self, name: str) -> tuple[str, list[str], list[str]]: ...
    def _deal_with_super_sub(self, string: str, style: str = 'plain') -> str: ...
    def _print_Relational(self, expr): ...
    def _print_Piecewise(self, expr): ...
    def _print_matrix_contents(self, expr): ...
    def _print_MatrixBase(self, expr): ...
    def _print_MatrixElement(self, expr): ...
    def _print_MatrixSlice(self, expr): ...
    def _print_BlockMatrix(self, expr): ...
    def _print_Transpose(self, expr): ...
    def _print_Trace(self, expr): ...
    def _print_Adjoint(self, expr): ...
    def _print_MatMul(self, expr): ...
    def _print_DotProduct(self, expr): ...
    def _print_Determinant(self, expr): ...
    def _print_Mod(self, expr, exp=None): ...
    def _print_HadamardProduct(self, expr): ...
    def _print_HadamardPower(self, expr): ...
    def _print_KroneckerProduct(self, expr): ...
    def _print_MatPow(self, expr): ...
    def _print_MatrixSymbol(self, expr): ...
    def _print_ZeroMatrix(self, Z): ...
    def _print_OneMatrix(self, O): ...
    def _print_Identity(self, I): ...
    def _print_PermutationMatrix(self, P): ...
    def _print_NDimArray(self, expr: NDimArray): ...
    def _printer_tensor_indices(self, name, indices, index_map: dict): ...
    def _print_Tensor(self, expr): ...
    def _print_TensorElement(self, expr): ...
    def _print_TensMul(self, expr): ...
    def _print_TensAdd(self, expr): ...
    def _print_TensorIndex(self, expr): ...
    def _print_PartialDerivative(self, expr): ...
    def _print_ArraySymbol(self, expr): ...
    def _print_ArrayElement(self, expr): ...
    def _print_UniversalSet(self, expr): ...
    def _print_frac(self, expr, exp=None): ...
    def _print_tuple(self, expr): ...
    def _print_TensorProduct(self, expr): ...
    def _print_WedgeProduct(self, expr): ...
    def _print_Tuple(self, expr): ...
    def _print_list(self, expr): ...
    def _print_dict(self, d): ...
    def _print_Dict(self, expr): ...
    def _print_DiracDelta(self, expr, exp=None): ...
    def _print_SingularityFunction(self, expr, exp=None): ...
    def _print_Heaviside(self, expr, exp=None): ...
    def _print_KroneckerDelta(self, expr, exp=None): ...
    def _print_LeviCivita(self, expr, exp=None): ...
    def _print_RandomDomain(self, d): ...
    def _print_FiniteSet(self, s): ...
    def _print_set(self, s): ...
    _print_frozenset = _print_set
    def _print_Range(self, s): ...
    def __print_number_polynomial(self, expr, letter, exp=None): ...
    def _print_bernoulli(self, expr, exp=None): ...
    def _print_genocchi(self, expr, exp=None): ...
    def _print_bell(self, expr, exp=None): ...
    def _print_fibonacci(self, expr, exp=None): ...
    def _print_lucas(self, expr, exp=None): ...
    def _print_tribonacci(self, expr, exp=None): ...
    def _print_mobius(self, expr, exp=None): ...
    def _print_SeqFormula(self, s): ...
    _print_SeqPer = _print_SeqFormula
    _print_SeqAdd = _print_SeqFormula
    _print_SeqMul = _print_SeqFormula
    def _print_Interval(self, i): ...
    def _print_AccumulationBounds(self, i): ...
    def _print_Union(self, u): ...
    def _print_Complement(self, u): ...
    def _print_Intersection(self, u): ...
    def _print_SymmetricDifference(self, u): ...
    def _print_ProductSet(self, p): ...
    def _print_EmptySet(self, e): ...
    def _print_Naturals(self, n): ...
    def _print_Naturals0(self, n): ...
    def _print_Integers(self, i): ...
    def _print_Rationals(self, i): ...
    def _print_Reals(self, i): ...
    def _print_Complexes(self, i): ...
    def _print_ImageSet(self, s): ...
    def _print_ConditionSet(self, s): ...
    def _print_PowerSet(self, expr): ...
    def _print_ComplexRegion(self, s): ...
    def _print_Contains(self, e): ...
    def _print_FourierSeries(self, s): ...
    def _print_FormalPowerSeries(self, s): ...
    def _print_FiniteField(self, expr): ...
    def _print_IntegerRing(self, expr): ...
    def _print_RationalField(self, expr): ...
    def _print_RealField(self, expr): ...
    def _print_ComplexField(self, expr): ...
    def _print_PolynomialRing(self, expr): ...
    def _print_FractionField(self, expr): ...
    def _print_PolynomialRingBase(self, expr): ...
    def _print_Poly(self, poly): ...
    def _print_ComplexRootOf(self, root): ...
    def _print_RootSum(self, expr): ...
    def _print_OrdinalOmega(self, expr): ...
    def _print_OmegaPower(self, expr): ...
    def _print_Ordinal(self, expr): ...
    def _print_PolyElement(self, poly): ...
    def _print_FracElement(self, frac): ...
    def _print_euler(self, expr, exp=None): ...
    def _print_catalan(self, expr, exp=None): ...
    def _print_UnifiedTransform(self, expr, s, inverse: bool = False): ...
    def _print_MellinTransform(self, expr): ...
    def _print_InverseMellinTransform(self, expr): ...
    def _print_LaplaceTransform(self, expr): ...
    def _print_InverseLaplaceTransform(self, expr): ...
    def _print_FourierTransform(self, expr): ...
    def _print_InverseFourierTransform(self, expr): ...
    def _print_SineTransform(self, expr): ...
    def _print_InverseSineTransform(self, expr): ...
    def _print_CosineTransform(self, expr): ...
    def _print_InverseCosineTransform(self, expr): ...
    def _print_DMP(self, p): ...
    def _print_DMF(self, p): ...
    def _print_Object(self, object): ...
    def _print_LambertW(self, expr, exp=None): ...
    def _print_Expectation(self, expr): ...
    def _print_Variance(self, expr): ...
    def _print_Covariance(self, expr): ...
    def _print_Probability(self, expr): ...
    def _print_Morphism(self, morphism): ...
    def _print_TransferFunction(self, expr): ...
    def _print_Series(self, expr): ...
    def _print_MIMOSeries(self, expr): ...
    def _print_Parallel(self, expr): ...
    def _print_MIMOParallel(self, expr): ...
    def _print_Feedback(self, expr): ...
    def _print_MIMOFeedback(self, expr): ...
    def _print_TransferFunctionMatrix(self, expr): ...
    def _print_DFT(self, expr): ...
    _print_IDFT = _print_DFT
    def _print_NamedMorphism(self, morphism): ...
    def _print_IdentityMorphism(self, morphism): ...
    def _print_CompositeMorphism(self, morphism): ...
    def _print_Category(self, morphism): ...
    def _print_Diagram(self, diagram): ...
    def _print_DiagramGrid(self, grid): ...
    def _print_FreeModule(self, M): ...
    def _print_FreeModuleElement(self, m): ...
    def _print_SubModule(self, m): ...
    def _print_SubQuotientModule(self, m): ...
    def _print_ModuleImplementedIdeal(self, m): ...
    def _print_Quaternion(self, expr): ...
    def _print_QuotientRing(self, R): ...
    def _print_QuotientRingElement(self, x): ...
    def _print_QuotientModuleElement(self, m): ...
    def _print_QuotientModule(self, M): ...
    def _print_MatrixHomomorphism(self, h): ...
    def _print_Manifold(self, manifold): ...
    def _print_Patch(self, patch): ...
    def _print_CoordSystem(self, coordsys): ...
    def _print_CovarDerivativeOp(self, cvd): ...
    def _print_BaseScalarField(self, field): ...
    def _print_BaseVectorField(self, field): ...
    def _print_Differential(self, diff): ...
    def _print_Tr(self, p): ...
    def _print_totient(self, expr, exp=None): ...
    def _print_reduced_totient(self, expr, exp=None): ...
    def _print_divisor_sigma(self, expr, exp=None): ...
    def _print_udivisor_sigma(self, expr, exp=None): ...
    def _print_primenu(self, expr, exp=None): ...
    def _print_primeomega(self, expr, exp=None): ...
    def _print_Str(self, s): ...
    def _print_float(self, expr): ...
    def _print_int(self, expr): ...
    def _print_mpz(self, expr): ...
    def _print_mpq(self, expr): ...
    def _print_fmpz(self, expr): ...
    def _print_fmpq(self, expr): ...
    def _print_Predicate(self, expr): ...
    def _print_AppliedPredicate(self, expr): ...
    def emptyPrinter(self, expr): ...

def translate(s: str) -> str:
    '''
    Check for a modifier ending the string.  If present, convert the
    modifier to latex and translate the rest recursively.

    Given a description of a Greek letter or other special character,
    return the appropriate latex.

    Let everything else pass as given.

    >>> from sympy.printing.latex import translate
    >>> translate(\'alphahatdotprime\')
    "{\\\\dot{\\\\hat{\\\\alpha}}}\'"
    '''
def latex(expr, **settings):
    '''Convert the given expression to LaTeX string representation.

    Parameters
    ==========
    full_prec: boolean, optional
        If set to True, a floating point number is printed with full precision.
    fold_frac_powers : boolean, optional
        Emit ``^{p/q}`` instead of ``^{\\frac{p}{q}}`` for fractional powers.
    fold_func_brackets : boolean, optional
        Fold function brackets where applicable.
    fold_short_frac : boolean, optional
        Emit ``p / q`` instead of ``\\frac{p}{q}`` when the denominator is
        simple enough (at most two terms and no powers). The default value is
        ``True`` for inline mode, ``False`` otherwise.
    inv_trig_style : string, optional
        How inverse trig functions should be displayed. Can be one of
        ``\'abbreviated\'``, ``\'full\'``, or ``\'power\'``. Defaults to
        ``\'abbreviated\'``.
    itex : boolean, optional
        Specifies if itex-specific syntax is used, including emitting
        ``$$...$$``.
    ln_notation : boolean, optional
        If set to ``True``, ``\\ln`` is used instead of default ``\\log``.
    long_frac_ratio : float or None, optional
        The allowed ratio of the width of the numerator to the width of the
        denominator before the printer breaks off long fractions. If ``None``
        (the default value), long fractions are not broken up.
    mat_delim : string, optional
        The delimiter to wrap around matrices. Can be one of ``\'[\'``, ``\'(\'``,
        or the empty string ``\'\'``. Defaults to ``\'[\'``.
    mat_str : string, optional
        Which matrix environment string to emit. ``\'smallmatrix\'``,
        ``\'matrix\'``, ``\'array\'``, etc. Defaults to ``\'smallmatrix\'`` for
        inline mode, ``\'matrix\'`` for matrices of no more than 10 columns, and
        ``\'array\'`` otherwise.
    mode: string, optional
        Specifies how the generated code will be delimited. ``mode`` can be one
        of ``\'plain\'``, ``\'inline\'``, ``\'equation\'`` or ``\'equation*\'``.  If
        ``mode`` is set to ``\'plain\'``, then the resulting code will not be
        delimited at all (this is the default). If ``mode`` is set to
        ``\'inline\'`` then inline LaTeX ``$...$`` will be used. If ``mode`` is
        set to ``\'equation\'`` or ``\'equation*\'``, the resulting code will be
        enclosed in the ``equation`` or ``equation*`` environment (remember to
        import ``amsmath`` for ``equation*``), unless the ``itex`` option is
        set. In the latter case, the ``$$...$$`` syntax is used.
    mul_symbol : string or None, optional
        The symbol to use for multiplication. Can be one of ``None``,
        ``\'ldot\'``, ``\'dot\'``, or ``\'times\'``.
    order: string, optional
        Any of the supported monomial orderings (currently ``\'lex\'``,
        ``\'grlex\'``, or ``\'grevlex\'``), ``\'old\'``, and ``\'none\'``. This
        parameter does nothing for `~.Mul` objects. Setting order to ``\'old\'``
        uses the compatibility ordering for ``~.Add`` defined in Printer. For
        very large expressions, set the ``order`` keyword to ``\'none\'`` if
        speed is a concern.
    symbol_names : dictionary of strings mapped to symbols, optional
        Dictionary of symbols and the custom strings they should be emitted as.
    root_notation : boolean, optional
        If set to ``False``, exponents of the form 1/n are printed in fractonal
        form. Default is ``True``, to print exponent in root form.
    mat_symbol_style : string, optional
        Can be either ``\'plain\'`` (default) or ``\'bold\'``. If set to
        ``\'bold\'``, a `~.MatrixSymbol` A will be printed as ``\\mathbf{A}``,
        otherwise as ``A``.
    imaginary_unit : string, optional
        String to use for the imaginary unit. Defined options are ``\'i\'``
        (default) and ``\'j\'``. Adding ``r`` or ``t`` in front gives ``\\mathrm``
        or ``\\text``, so ``\'ri\'`` leads to ``\\mathrm{i}`` which gives
        `\\mathrm{i}`.
    gothic_re_im : boolean, optional
        If set to ``True``, `\\Re` and `\\Im` is used for ``re`` and ``im``, respectively.
        The default is ``False`` leading to `\\operatorname{re}` and `\\operatorname{im}`.
    decimal_separator : string, optional
        Specifies what separator to use to separate the whole and fractional parts of a
        floating point number as in `2.5` for the default, ``period`` or `2{,}5`
        when ``comma`` is specified. Lists, sets, and tuple are printed with semicolon
        separating the elements when ``comma`` is chosen. For example, [1; 2; 3] when
        ``comma`` is chosen and [1,2,3] for when ``period`` is chosen.
    parenthesize_super : boolean, optional
        If set to ``False``, superscripted expressions will not be parenthesized when
        powered. Default is ``True``, which parenthesizes the expression when powered.
    min: Integer or None, optional
        Sets the lower bound for the exponent to print floating point numbers in
        fixed-point format.
    max: Integer or None, optional
        Sets the upper bound for the exponent to print floating point numbers in
        fixed-point format.
    diff_operator: string, optional
        String to use for differential operator. Default is ``\'d\'``, to print in italic
        form. ``\'rd\'``, ``\'td\'`` are shortcuts for ``\\mathrm{d}`` and ``\\text{d}``.
    adjoint_style: string, optional
        String to use for the adjoint symbol. Defined options are ``\'dagger\'``
        (default),``\'star\'``, and ``\'hermitian\'``.

    Notes
    =====

    Not using a print statement for printing, results in double backslashes for
    latex commands since that\'s the way Python escapes backslashes in strings.

    >>> from sympy import latex, Rational
    >>> from sympy.abc import tau
    >>> latex((2*tau)**Rational(7,2))
    \'8 \\\\sqrt{2} \\\\tau^{\\\\frac{7}{2}}\'
    >>> print(latex((2*tau)**Rational(7,2)))
    8 \\sqrt{2} \\tau^{\\frac{7}{2}}

    Examples
    ========

    >>> from sympy import latex, pi, sin, asin, Integral, Matrix, Rational, log
    >>> from sympy.abc import x, y, mu, r, tau

    Basic usage:

    >>> print(latex((2*tau)**Rational(7,2)))
    8 \\sqrt{2} \\tau^{\\frac{7}{2}}

    ``mode`` and ``itex`` options:

    >>> print(latex((2*mu)**Rational(7,2), mode=\'plain\'))
    8 \\sqrt{2} \\mu^{\\frac{7}{2}}
    >>> print(latex((2*tau)**Rational(7,2), mode=\'inline\'))
    $8 \\sqrt{2} \\tau^{7 / 2}$
    >>> print(latex((2*mu)**Rational(7,2), mode=\'equation*\'))
    \\begin{equation*}8 \\sqrt{2} \\mu^{\\frac{7}{2}}\\end{equation*}
    >>> print(latex((2*mu)**Rational(7,2), mode=\'equation\'))
    \\begin{equation}8 \\sqrt{2} \\mu^{\\frac{7}{2}}\\end{equation}
    >>> print(latex((2*mu)**Rational(7,2), mode=\'equation\', itex=True))
    $$8 \\sqrt{2} \\mu^{\\frac{7}{2}}$$
    >>> print(latex((2*mu)**Rational(7,2), mode=\'plain\'))
    8 \\sqrt{2} \\mu^{\\frac{7}{2}}
    >>> print(latex((2*tau)**Rational(7,2), mode=\'inline\'))
    $8 \\sqrt{2} \\tau^{7 / 2}$
    >>> print(latex((2*mu)**Rational(7,2), mode=\'equation*\'))
    \\begin{equation*}8 \\sqrt{2} \\mu^{\\frac{7}{2}}\\end{equation*}
    >>> print(latex((2*mu)**Rational(7,2), mode=\'equation\'))
    \\begin{equation}8 \\sqrt{2} \\mu^{\\frac{7}{2}}\\end{equation}
    >>> print(latex((2*mu)**Rational(7,2), mode=\'equation\', itex=True))
    $$8 \\sqrt{2} \\mu^{\\frac{7}{2}}$$

    Fraction options:

    >>> print(latex((2*tau)**Rational(7,2), fold_frac_powers=True))
    8 \\sqrt{2} \\tau^{7/2}
    >>> print(latex((2*tau)**sin(Rational(7,2))))
    \\left(2 \\tau\\right)^{\\sin{\\left(\\frac{7}{2} \\right)}}
    >>> print(latex((2*tau)**sin(Rational(7,2)), fold_func_brackets=True))
    \\left(2 \\tau\\right)^{\\sin {\\frac{7}{2}}}
    >>> print(latex(3*x**2/y))
    \\frac{3 x^{2}}{y}
    >>> print(latex(3*x**2/y, fold_short_frac=True))
    3 x^{2} / y
    >>> print(latex(Integral(r, r)/2/pi, long_frac_ratio=2))
    \\frac{\\int r\\, dr}{2 \\pi}
    >>> print(latex(Integral(r, r)/2/pi, long_frac_ratio=0))
    \\frac{1}{2 \\pi} \\int r\\, dr

    Multiplication options:

    >>> print(latex((2*tau)**sin(Rational(7,2)), mul_symbol="times"))
    \\left(2 \\times \\tau\\right)^{\\sin{\\left(\\frac{7}{2} \\right)}}

    Trig options:

    >>> print(latex(asin(Rational(7,2))))
    \\operatorname{asin}{\\left(\\frac{7}{2} \\right)}
    >>> print(latex(asin(Rational(7,2)), inv_trig_style="full"))
    \\arcsin{\\left(\\frac{7}{2} \\right)}
    >>> print(latex(asin(Rational(7,2)), inv_trig_style="power"))
    \\sin^{-1}{\\left(\\frac{7}{2} \\right)}

    Matrix options:

    >>> print(latex(Matrix(2, 1, [x, y])))
    \\left[\\begin{matrix}x\\\\y\\end{matrix}\\right]
    >>> print(latex(Matrix(2, 1, [x, y]), mat_str = "array"))
    \\left[\\begin{array}{c}x\\\\y\\end{array}\\right]
    >>> print(latex(Matrix(2, 1, [x, y]), mat_delim="("))
    \\left(\\begin{matrix}x\\\\y\\end{matrix}\\right)

    Custom printing of symbols:

    >>> print(latex(x**2, symbol_names={x: \'x_i\'}))
    x_i^{2}

    Logarithms:

    >>> print(latex(log(10)))
    \\log{\\left(10 \\right)}
    >>> print(latex(log(10), ln_notation=True))
    \\ln{\\left(10 \\right)}

    ``latex()`` also supports the builtin container types :class:`list`,
    :class:`tuple`, and :class:`dict`:

    >>> print(latex([2/x, y], mode=\'inline\'))
    $\\left[ 2 / x, \\  y\\right]$

    Unsupported types are rendered as monospaced plaintext:

    >>> print(latex(int))
    \\mathtt{\\text{<class \'int\'>}}
    >>> print(latex("plain % text"))
    \\mathtt{\\text{plain \\% text}}

    See :ref:`printer_method_example` for an example of how to override
    this behavior for your own types by implementing ``_latex``.

    .. versionchanged:: 1.7.0
        Unsupported types no longer have their ``str`` representation treated as valid latex.

    '''
def print_latex(expr, **settings) -> None:
    """Prints LaTeX representation of the given expression. Takes the same
    settings as ``latex()``."""
def multiline_latex(lhs, rhs, terms_per_line: int = 1, environment: str = 'align*', use_dots: bool = False, **settings):
    '''
    This function generates a LaTeX equation with a multiline right-hand side
    in an ``align*``, ``eqnarray`` or ``IEEEeqnarray`` environment.

    Parameters
    ==========

    lhs : Expr
        Left-hand side of equation

    rhs : Expr
        Right-hand side of equation

    terms_per_line : integer, optional
        Number of terms per line to print. Default is 1.

    environment : "string", optional
        Which LaTeX wnvironment to use for the output. Options are "align*"
        (default), "eqnarray", and "IEEEeqnarray".

    use_dots : boolean, optional
        If ``True``, ``\\\\dots`` is added to the end of each line. Default is ``False``.

    Examples
    ========

    >>> from sympy import multiline_latex, symbols, sin, cos, exp, log, I
    >>> x, y, alpha = symbols(\'x y alpha\')
    >>> expr = sin(alpha*y) + exp(I*alpha) - cos(log(y))
    >>> print(multiline_latex(x, expr))
    \\begin{align*}
    x = & e^{i \\alpha} \\\\\n    & + \\sin{\\left(\\alpha y \\right)} \\\\\n    & - \\cos{\\left(\\log{\\left(y \\right)} \\right)}
    \\end{align*}

    Using at most two terms per line:
    >>> print(multiline_latex(x, expr, 2))
    \\begin{align*}
    x = & e^{i \\alpha} + \\sin{\\left(\\alpha y \\right)} \\\\\n    & - \\cos{\\left(\\log{\\left(y \\right)} \\right)}
    \\end{align*}

    Using ``eqnarray`` and dots:
    >>> print(multiline_latex(x, expr, terms_per_line=2, environment="eqnarray", use_dots=True))
    \\begin{eqnarray}
    x & = & e^{i \\alpha} + \\sin{\\left(\\alpha y \\right)} \\dots\\nonumber\\\\\n    & & - \\cos{\\left(\\log{\\left(y \\right)} \\right)}
    \\end{eqnarray}

    Using ``IEEEeqnarray``:
    >>> print(multiline_latex(x, expr, environment="IEEEeqnarray"))
    \\begin{IEEEeqnarray}{rCl}
    x & = & e^{i \\alpha} \\nonumber\\\\\n    & & + \\sin{\\left(\\alpha y \\right)} \\nonumber\\\\\n    & & - \\cos{\\left(\\log{\\left(y \\right)} \\right)}
    \\end{IEEEeqnarray}

    Notes
    =====

    All optional parameters from ``latex`` can also be used.

    '''
