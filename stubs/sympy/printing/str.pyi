from .precedence import PRECEDENCE as PRECEDENCE, precedence as precedence
from .printer import Printer as Printer, print_function as print_function
from sympy.core import Basic as Basic, Mul as Mul, Number as Number, Pow as Pow, Rational as Rational, S as S
from sympy.core.mul import _keep_coeff as _keep_coeff
from sympy.core.numbers import Integer as Integer
from sympy.core.relational import Relational as Relational
from sympy.core.sorting import default_sort_key as default_sort_key
from sympy.utilities.iterables import sift as sift
from typing import Any

class StrPrinter(Printer):
    printmethod: str
    _default_settings: dict[str, Any]
    _relationals: dict[str, str]
    def parenthesize(self, item, level, strict: bool = False): ...
    def stringify(self, args, sep, level: int = 0): ...
    def emptyPrinter(self, expr): ...
    def _print_Add(self, expr, order=None): ...
    def _print_BooleanTrue(self, expr): ...
    def _print_BooleanFalse(self, expr): ...
    def _print_Not(self, expr): ...
    def _print_And(self, expr): ...
    def _print_Or(self, expr): ...
    def _print_Xor(self, expr): ...
    def _print_AppliedPredicate(self, expr): ...
    def _print_Basic(self, expr): ...
    def _print_BlockMatrix(self, B): ...
    def _print_Catalan(self, expr): ...
    def _print_ComplexInfinity(self, expr): ...
    def _print_ConditionSet(self, s): ...
    def _print_Derivative(self, expr): ...
    def _print_dict(self, d): ...
    def _print_Dict(self, expr): ...
    def _print_RandomDomain(self, d): ...
    def _print_Dummy(self, expr): ...
    def _print_EulerGamma(self, expr): ...
    def _print_Exp1(self, expr): ...
    def _print_ExprCondPair(self, expr): ...
    def _print_Function(self, expr): ...
    def _print_GoldenRatio(self, expr): ...
    def _print_Heaviside(self, expr): ...
    def _print_TribonacciConstant(self, expr): ...
    def _print_ImaginaryUnit(self, expr): ...
    def _print_Infinity(self, expr): ...
    def _print_Integral(self, expr): ...
    def _print_Interval(self, i): ...
    def _print_AccumulationBounds(self, i): ...
    def _print_Inverse(self, I): ...
    def _print_Lambda(self, obj): ...
    def _print_LatticeOp(self, expr): ...
    def _print_Limit(self, expr): ...
    def _print_list(self, expr): ...
    def _print_List(self, expr): ...
    def _print_MatrixBase(self, expr): ...
    def _print_MatrixElement(self, expr): ...
    def _print_MatrixSlice(self, expr): ...
    def _print_DeferredVector(self, expr): ...
    def _print_Mul(self, expr): ...
    def _print_MatMul(self, expr): ...
    def _print_ElementwiseApplyFunction(self, expr): ...
    def _print_NaN(self, expr): ...
    def _print_NegativeInfinity(self, expr): ...
    def _print_Order(self, expr): ...
    def _print_Ordinal(self, expr): ...
    def _print_Cycle(self, expr): ...
    def _print_Permutation(self, expr): ...
    def _print_Subs(self, obj): ...
    def _print_TensorIndex(self, expr): ...
    def _print_TensorHead(self, expr): ...
    def _print_Tensor(self, expr): ...
    def _print_TensMul(self, expr): ...
    def _print_TensAdd(self, expr): ...
    def _print_ArraySymbol(self, expr): ...
    def _print_ArrayElement(self, expr): ...
    def _print_PermutationGroup(self, expr): ...
    def _print_Pi(self, expr): ...
    def _print_PolyRing(self, ring): ...
    def _print_FracField(self, field): ...
    def _print_FreeGroupElement(self, elm): ...
    def _print_GaussianElement(self, poly): ...
    def _print_PolyElement(self, poly): ...
    def _print_FracElement(self, frac): ...
    def _print_Poly(self, expr): ...
    def _print_UniversalSet(self, p): ...
    def _print_AlgebraicNumber(self, expr): ...
    def _print_Pow(self, expr, rational: bool = False):
        """Printing helper function for ``Pow``

        Parameters
        ==========

        rational : bool, optional
            If ``True``, it will not attempt printing ``sqrt(x)`` or
            ``x**S.Half`` as ``sqrt``, and will use ``x**(1/2)``
            instead.

            See examples for additional details

        Examples
        ========

        >>> from sympy import sqrt, StrPrinter
        >>> from sympy.abc import x

        How ``rational`` keyword works with ``sqrt``:

        >>> printer = StrPrinter()
        >>> printer._print_Pow(sqrt(x), rational=True)
        'x**(1/2)'
        >>> printer._print_Pow(sqrt(x), rational=False)
        'sqrt(x)'
        >>> printer._print_Pow(1/sqrt(x), rational=True)
        'x**(-1/2)'
        >>> printer._print_Pow(1/sqrt(x), rational=False)
        '1/sqrt(x)'

        Notes
        =====

        ``sqrt(x)`` is canonicalized as ``Pow(x, S.Half)`` in SymPy,
        so there is no need of defining a separate printer for ``sqrt``.
        Instead, it should be handled here as well.
        """
    def _print_UnevaluatedExpr(self, expr): ...
    def _print_MatPow(self, expr): ...
    def _print_Integer(self, expr): ...
    def _print_Integers(self, expr): ...
    def _print_Naturals(self, expr): ...
    def _print_Naturals0(self, expr): ...
    def _print_Rationals(self, expr): ...
    def _print_Reals(self, expr): ...
    def _print_Complexes(self, expr): ...
    def _print_EmptySet(self, expr): ...
    def _print_EmptySequence(self, expr): ...
    def _print_int(self, expr): ...
    def _print_mpz(self, expr): ...
    def _print_Rational(self, expr): ...
    def _print_PythonRational(self, expr): ...
    def _print_Fraction(self, expr): ...
    def _print_mpq(self, expr): ...
    def _print_Float(self, expr): ...
    def _print_Relational(self, expr): ...
    def _print_ComplexRootOf(self, expr): ...
    def _print_RootSum(self, expr): ...
    def _print_GroebnerBasis(self, basis): ...
    def _print_set(self, s): ...
    def _print_FiniteSet(self, s): ...
    def _print_Partition(self, s): ...
    def _print_frozenset(self, s): ...
    def _print_Sum(self, expr): ...
    def _print_Symbol(self, expr): ...
    _print_MatrixSymbol = _print_Symbol
    _print_RandomSymbol = _print_Symbol
    def _print_Identity(self, expr): ...
    def _print_ZeroMatrix(self, expr): ...
    def _print_OneMatrix(self, expr): ...
    def _print_Predicate(self, expr): ...
    def _print_str(self, expr): ...
    def _print_tuple(self, expr): ...
    def _print_Tuple(self, expr): ...
    def _print_Transpose(self, T): ...
    def _print_Uniform(self, expr): ...
    def _print_Quantity(self, expr): ...
    def _print_Quaternion(self, expr): ...
    def _print_Dimension(self, expr): ...
    def _print_Wild(self, expr): ...
    def _print_WildFunction(self, expr): ...
    def _print_WildDot(self, expr): ...
    def _print_WildPlus(self, expr): ...
    def _print_WildStar(self, expr): ...
    def _print_Zero(self, expr): ...
    def _print_DMP(self, p): ...
    def _print_DMF(self, expr): ...
    def _print_Object(self, obj): ...
    def _print_IdentityMorphism(self, morphism): ...
    def _print_NamedMorphism(self, morphism): ...
    def _print_Category(self, category): ...
    def _print_Manifold(self, manifold): ...
    def _print_Patch(self, patch): ...
    def _print_CoordSystem(self, coords): ...
    def _print_BaseScalarField(self, field): ...
    def _print_BaseVectorField(self, field): ...
    def _print_Differential(self, diff): ...
    def _print_Tr(self, expr): ...
    def _print_Str(self, s): ...
    def _print_AppliedBinaryRelation(self, expr): ...

def sstr(expr, **settings):
    """Returns the expression as a string.

    For large expressions where speed is a concern, use the setting
    order='none'. If abbrev=True setting is used then units are printed in
    abbreviated form.

    Examples
    ========

    >>> from sympy import symbols, Eq, sstr
    >>> a, b = symbols('a b')
    >>> sstr(Eq(a + b, 0))
    'Eq(a + b, 0)'
    """

class StrReprPrinter(StrPrinter):
    """(internal) -- see sstrrepr"""
    def _print_str(self, s): ...
    def _print_Str(self, s): ...

def sstrrepr(expr, **settings):
    """return expr in mixed str/repr form

       i.e. strings are returned in repr form with quotes, and everything else
       is returned in str form.

       This function could be useful for hooking into sys.displayhook
    """
