from _typeshed import Incomplete
from sympy.core.mul import Mul as Mul
from sympy.core.singleton import S as S
from sympy.core.sorting import default_sort_key as default_sort_key
from sympy.core.sympify import sympify as sympify
from sympy.printing.conventions import requires_partial as requires_partial, split_super_sub as split_super_sub
from sympy.printing.precedence import PRECEDENCE as PRECEDENCE, PRECEDENCE_TRADITIONAL as PRECEDENCE_TRADITIONAL, precedence_traditional as precedence_traditional
from sympy.printing.pretty.pretty_symbology import greek_unicode as greek_unicode
from sympy.printing.printer import Printer as Printer, print_function as print_function
from typing import Any

class MathMLPrinterBase(Printer):
    """Contains common code required for MathMLContentPrinter and
    MathMLPresentationPrinter.
    """
    _default_settings: dict[str, Any]
    dom: Incomplete
    def __init__(self, settings: Incomplete | None = None) -> None: ...
    def doprint(self, expr):
        """
        Prints the expression as MathML.
        """

class MathMLContentPrinter(MathMLPrinterBase):
    """Prints an expression to the Content MathML markup language.

    References: https://www.w3.org/TR/MathML2/chapter4.html
    """
    printmethod: str
    def mathml_tag(self, e):
        """Returns the MathML tag for an expression."""
    def _print_Mul(self, expr): ...
    def _print_Add(self, expr, order: Incomplete | None = None): ...
    def _print_Piecewise(self, expr): ...
    def _print_MatrixBase(self, m): ...
    def _print_Rational(self, e): ...
    def _print_Limit(self, e): ...
    def _print_ImaginaryUnit(self, e): ...
    def _print_EulerGamma(self, e): ...
    def _print_GoldenRatio(self, e):
        """We use unicode #x3c6 for Greek letter phi as defined here
        https://www.w3.org/2003/entities/2007doc/isogrk1.html"""
    def _print_Exp1(self, e): ...
    def _print_Pi(self, e): ...
    def _print_Infinity(self, e): ...
    def _print_NaN(self, e): ...
    def _print_EmptySet(self, e): ...
    def _print_BooleanTrue(self, e): ...
    def _print_BooleanFalse(self, e): ...
    def _print_NegativeInfinity(self, e): ...
    def _print_Integral(self, e): ...
    def _print_Sum(self, e): ...
    def _print_Symbol(self, sym): ...
    _print_MatrixSymbol = _print_Symbol
    _print_RandomSymbol = _print_Symbol
    def _print_Pow(self, e): ...
    def _print_Number(self, e): ...
    def _print_Float(self, e): ...
    def _print_Derivative(self, e): ...
    def _print_Function(self, e): ...
    def _print_Basic(self, e): ...
    def _print_AssocOp(self, e): ...
    def _print_Relational(self, e): ...
    def _print_list(self, seq):
        """MathML reference for the <list> element:
        https://www.w3.org/TR/MathML2/chapter4.html#contm.list"""
    def _print_int(self, p): ...
    _print_Implies = _print_AssocOp
    _print_Not = _print_AssocOp
    _print_Xor = _print_AssocOp
    def _print_FiniteSet(self, e): ...
    def _print_Complement(self, e): ...
    def _print_ProductSet(self, e): ...
    def _print_Lambda(self, e): ...

class MathMLPresentationPrinter(MathMLPrinterBase):
    """Prints an expression to the Presentation MathML markup language.

    References: https://www.w3.org/TR/MathML2/chapter3.html
    """
    printmethod: str
    def mathml_tag(self, e):
        """Returns the MathML tag for an expression."""
    def parenthesize(self, item, level, strict: bool = False): ...
    def _print_Mul(self, expr): ...
    def _print_Add(self, expr, order: Incomplete | None = None): ...
    def _print_MatrixBase(self, m): ...
    def _get_printed_Rational(self, e, folded: Incomplete | None = None): ...
    def _print_Rational(self, e): ...
    def _print_Limit(self, e): ...
    def _print_ImaginaryUnit(self, e): ...
    def _print_GoldenRatio(self, e): ...
    def _print_Exp1(self, e): ...
    def _print_Pi(self, e): ...
    def _print_Infinity(self, e): ...
    def _print_NegativeInfinity(self, e): ...
    def _print_HBar(self, e): ...
    def _print_EulerGamma(self, e): ...
    def _print_TribonacciConstant(self, e): ...
    def _print_Dagger(self, e): ...
    def _print_Contains(self, e): ...
    def _print_HilbertSpace(self, e): ...
    def _print_ComplexSpace(self, e): ...
    def _print_FockSpace(self, e): ...
    def _print_Integral(self, expr): ...
    def _print_Sum(self, e): ...
    def _print_Symbol(self, sym, style: str = 'plain'): ...
    def _print_MatrixSymbol(self, sym): ...
    _print_RandomSymbol = _print_Symbol
    def _print_conjugate(self, expr): ...
    def _print_operator_after(self, op, expr): ...
    def _print_factorial(self, expr): ...
    def _print_factorial2(self, expr): ...
    def _print_binomial(self, expr): ...
    def _print_Pow(self, e): ...
    def _print_Number(self, e): ...
    def _print_AccumulationBounds(self, i): ...
    def _print_Derivative(self, e): ...
    def _print_Function(self, e): ...
    def _print_Float(self, expr): ...
    def _print_polylog(self, expr): ...
    def _print_Basic(self, e): ...
    def _print_Tuple(self, e): ...
    def _print_Interval(self, i): ...
    def _print_Abs(self, expr, exp: Incomplete | None = None): ...
    _print_Determinant = _print_Abs
    def _print_re_im(self, c, expr): ...
    def _print_re(self, expr, exp: Incomplete | None = None): ...
    def _print_im(self, expr, exp: Incomplete | None = None): ...
    def _print_AssocOp(self, e): ...
    def _print_SetOp(self, expr, symbol, prec): ...
    def _print_Union(self, expr): ...
    def _print_Intersection(self, expr): ...
    def _print_Complement(self, expr): ...
    def _print_SymmetricDifference(self, expr): ...
    def _print_ProductSet(self, expr): ...
    def _print_FiniteSet(self, s): ...
    def _print_set(self, s): ...
    _print_frozenset = _print_set
    def _print_LogOp(self, args, symbol): ...
    def _print_BasisDependent(self, expr): ...
    def _print_And(self, expr): ...
    def _print_Or(self, expr): ...
    def _print_Xor(self, expr): ...
    def _print_Implies(self, expr): ...
    def _print_Equivalent(self, expr): ...
    def _print_Not(self, e): ...
    def _print_bool(self, e): ...
    _print_BooleanTrue = _print_bool
    _print_BooleanFalse = _print_bool
    def _print_NoneType(self, e): ...
    def _print_Range(self, s): ...
    def _hprint_variadic_function(self, expr): ...
    _print_Min = _hprint_variadic_function
    _print_Max = _hprint_variadic_function
    def _print_exp(self, expr): ...
    def _print_Relational(self, e): ...
    def _print_int(self, p): ...
    def _print_BaseScalar(self, e): ...
    def _print_BaseVector(self, e): ...
    def _print_VectorZero(self, e): ...
    def _print_Cross(self, expr): ...
    def _print_Curl(self, expr): ...
    def _print_Divergence(self, expr): ...
    def _print_Dot(self, expr): ...
    def _print_Gradient(self, expr): ...
    def _print_Laplacian(self, expr): ...
    def _print_Integers(self, e): ...
    def _print_Complexes(self, e): ...
    def _print_Reals(self, e): ...
    def _print_Naturals(self, e): ...
    def _print_Naturals0(self, e): ...
    def _print_SingularityFunction(self, expr): ...
    def _print_NaN(self, e): ...
    def _print_number_function(self, e, name): ...
    def _print_bernoulli(self, e): ...
    _print_bell = _print_bernoulli
    def _print_catalan(self, e): ...
    def _print_euler(self, e): ...
    def _print_fibonacci(self, e): ...
    def _print_lucas(self, e): ...
    def _print_stieltjes(self, e): ...
    def _print_tribonacci(self, e): ...
    def _print_ComplexInfinity(self, e): ...
    def _print_EmptySet(self, e): ...
    def _print_UniversalSet(self, e): ...
    def _print_Adjoint(self, expr): ...
    def _print_Transpose(self, expr): ...
    def _print_Inverse(self, expr): ...
    def _print_MatMul(self, expr): ...
    def _print_MatPow(self, expr): ...
    def _print_HadamardProduct(self, expr): ...
    def _print_ZeroMatrix(self, Z): ...
    def _print_OneMatrix(self, Z): ...
    def _print_Identity(self, I): ...
    def _print_floor(self, e): ...
    def _print_ceiling(self, e): ...
    def _print_Lambda(self, e): ...
    def _print_tuple(self, e): ...
    def _print_IndexedBase(self, e): ...
    def _print_Indexed(self, e): ...
    def _print_MatrixElement(self, e): ...
    def _print_elliptic_f(self, e): ...
    def _print_elliptic_e(self, e): ...
    def _print_elliptic_pi(self, e): ...
    def _print_Ei(self, e): ...
    def _print_expint(self, e): ...
    def _print_jacobi(self, e): ...
    def _print_gegenbauer(self, e): ...
    def _print_chebyshevt(self, e): ...
    def _print_chebyshevu(self, e): ...
    def _print_legendre(self, e): ...
    def _print_assoc_legendre(self, e): ...
    def _print_laguerre(self, e): ...
    def _print_assoc_laguerre(self, e): ...
    def _print_hermite(self, e): ...

def mathml(expr, printer: str = 'content', **settings):
    """Returns the MathML representation of expr. If printer is presentation
    then prints Presentation MathML else prints content MathML.
    """
def print_mathml(expr, printer: str = 'content', **settings) -> None:
    """
    Prints a pretty representation of the MathML code for expr. If printer is
    presentation then prints Presentation MathML else prints content MathML.

    Examples
    ========

    >>> ##
    >>> from sympy import print_mathml
    >>> from sympy.abc import x
    >>> print_mathml(x+1) #doctest: +NORMALIZE_WHITESPACE
    <apply>
        <plus/>
        <ci>x</ci>
        <cn>1</cn>
    </apply>
    >>> print_mathml(x+1, printer='presentation')
    <mrow>
        <mi>x</mi>
        <mo>+</mo>
        <mn>1</mn>
    </mrow>

    """
MathMLPrinter = MathMLContentPrinter
