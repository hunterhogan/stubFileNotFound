from .printer import Printer as Printer, print_function as print_function
from _typeshed import Incomplete
from typing import Any

class ReprPrinter(Printer):
    printmethod: str
    _default_settings: dict[str, Any]
    def reprify(self, args, sep):
        """
        Prints each item in `args` and joins them with `sep`.
        """
    def emptyPrinter(self, expr):
        """
        The fallback printer.
        """
    def _print_Add(self, expr, order: Incomplete | None = None): ...
    def _print_Cycle(self, expr): ...
    def _print_Permutation(self, expr): ...
    def _print_Function(self, expr): ...
    def _print_Heaviside(self, expr): ...
    def _print_FunctionClass(self, expr): ...
    def _print_Half(self, expr): ...
    def _print_RationalConstant(self, expr): ...
    def _print_AtomicExpr(self, expr): ...
    def _print_NumberSymbol(self, expr): ...
    def _print_Integer(self, expr): ...
    def _print_Complexes(self, expr): ...
    def _print_Integers(self, expr): ...
    def _print_Naturals(self, expr): ...
    def _print_Naturals0(self, expr): ...
    def _print_Rationals(self, expr): ...
    def _print_Reals(self, expr): ...
    def _print_EmptySet(self, expr): ...
    def _print_UniversalSet(self, expr): ...
    def _print_EmptySequence(self, expr): ...
    def _print_list(self, expr): ...
    def _print_dict(self, expr): ...
    def _print_set(self, expr): ...
    def _print_MatrixBase(self, expr): ...
    def _print_BooleanTrue(self, expr): ...
    def _print_BooleanFalse(self, expr): ...
    def _print_NaN(self, expr): ...
    def _print_Mul(self, expr, order: Incomplete | None = None): ...
    def _print_Rational(self, expr): ...
    def _print_PythonRational(self, expr): ...
    def _print_Fraction(self, expr): ...
    def _print_Float(self, expr): ...
    def _print_Sum2(self, expr): ...
    def _print_Str(self, s): ...
    def _print_Symbol(self, expr): ...
    def _print_CoordinateSymbol(self, expr): ...
    def _print_Predicate(self, expr): ...
    def _print_AppliedPredicate(self, expr): ...
    def _print_str(self, expr): ...
    def _print_tuple(self, expr): ...
    def _print_WildFunction(self, expr): ...
    def _print_AlgebraicNumber(self, expr): ...
    def _print_PolyRing(self, ring): ...
    def _print_FracField(self, field): ...
    def _print_PolyElement(self, poly): ...
    def _print_FracElement(self, frac): ...
    def _print_FractionField(self, domain): ...
    def _print_PolynomialRingBase(self, ring): ...
    def _print_DMP(self, p): ...
    def _print_MonogenicFiniteExtension(self, ext): ...
    def _print_ExtensionElement(self, f): ...

def srepr(expr, **settings):
    """return expr in repr form"""
