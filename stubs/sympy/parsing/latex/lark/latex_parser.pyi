from _typeshed import Incomplete
from sympy.external import import_module as import_module
from sympy.parsing.latex.lark.transformer import TransformToSymPyExpr as TransformToSymPyExpr

_lark: Incomplete

class LarkLaTeXParser:
    """Class for converting input `\\mathrm{\\LaTeX}` strings into SymPy Expressions.
    It holds all the necessary internal data for doing so, and exposes hooks for
    customizing its behavior.

    Parameters
    ==========

    print_debug_output : bool, optional

        If set to ``True``, prints debug output to the logger. Defaults to ``False``.

    transform : bool, optional

        If set to ``True``, the class runs the Transformer class on the parse tree
        generated by running ``Lark.parse`` on the input string. Defaults to ``True``.

        Setting it to ``False`` can help with debugging the `\\mathrm{\\LaTeX}` grammar.

    grammar_file : str, optional

        The path to the grammar file that the parser should use. If set to ``None``,
        it uses the default grammar, which is in ``grammar/latex.lark``, relative to
        the ``sympy/parsing/latex/lark/`` directory.

    transformer : str, optional

        The name of the Transformer class to use. If set to ``None``, it uses the
        default transformer class, which is :py:func:`TransformToSymPyExpr`.

    """
    parser: Incomplete
    print_debug_output: Incomplete
    transform_expr: Incomplete
    transformer: Incomplete
    def __init__(self, print_debug_output: bool = False, transform: bool = True, grammar_file: Incomplete | None = None, transformer: Incomplete | None = None) -> None: ...
    def doparse(self, s: str): ...

_lark_latex_parser: Incomplete

def parse_latex_lark(s: str):
    """
    Experimental LaTeX parser using Lark.

    This function is still under development and its API may change with the
    next releases of SymPy.
    """
def _pretty_print_lark_trees(tree, indent: int = 0, show_expr: bool = True): ...
