import abc
from _typeshed import Incomplete
from abc import abstractmethod
from cffconvert.behavior_shared.abstract_author_shared import AbstractAuthorShared as AbstractAuthorShared

class ZenodoCreatorShared(AbstractAuthorShared, metaclass=abc.ABCMeta):
    _behaviors: Incomplete
    def __init__(self, author) -> None: ...
    def _from_affiliation(self): ...
    def _from_affiliation_and_orcid(self): ...
    def _from_alias(self): ...
    def _from_alias_and_affiliation(self): ...
    def _from_alias_and_affiliation_and_orcid(self): ...
    def _from_alias_and_orcid(self): ...
    def _from_given(self): ...
    def _from_given_and_affiliation(self): ...
    def _from_given_and_affiliation_and_orcid(self): ...
    def _from_given_and_last(self): ...
    def _from_given_and_last_and_affiliation(self): ...
    def _from_given_and_last_and_affiliation_and_orcid(self): ...
    def _from_given_and_last_and_orcid(self): ...
    def _from_given_and_orcid(self): ...
    def _from_last(self): ...
    def _from_last_and_affiliation(self): ...
    def _from_last_and_affiliation_and_orcid(self): ...
    def _from_last_and_orcid(self): ...
    def _from_name(self): ...
    def _from_name_and_affiliation(self): ...
    def _from_name_and_affiliation_and_orcid(self): ...
    def _from_name_and_orcid(self): ...
    def _from_orcid(self): ...
    def _get_id_from_orcid_url(self): ...
    @abstractmethod
    def as_dict(self): ...
