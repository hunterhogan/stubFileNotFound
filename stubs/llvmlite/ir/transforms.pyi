from _typeshed import Incomplete
from llvmlite.ir import CallInstr as CallInstr

class Visitor:
    _module: Incomplete
    def visit(self, module) -> None: ...
    _function: Incomplete
    def visit_Function(self, func) -> None: ...
    _basic_block: Incomplete
    def visit_BasicBlock(self, bb) -> None: ...
    def visit_Instruction(self, instr) -> None: ...
    @property
    def module(self): ...
    @property
    def function(self): ...
    @property
    def basic_block(self): ...

class CallVisitor(Visitor):
    def visit_Instruction(self, instr) -> None: ...
    def visit_Call(self, instr) -> None: ...

class ReplaceCalls(CallVisitor):
    orig: Incomplete
    repl: Incomplete
    calls: Incomplete
    def __init__(self, orig, repl) -> None: ...
    def visit_Call(self, instr) -> None: ...

def replace_all_calls(mod, orig, repl):
    """Replace all calls to `orig` to `repl` in module `mod`.
    Returns the references to the returned calls
    """
