from _typeshed import Incomplete
from numba.core import types as types, utils as utils
from numba.core.errors import NumbaAssertionError as NumbaAssertionError, NumbaIndexError as NumbaIndexError, NumbaKeyError as NumbaKeyError, NumbaNotImplementedError as NumbaNotImplementedError, NumbaTypeError as NumbaTypeError, NumbaValueError as NumbaValueError, RequireLiteralValue as RequireLiteralValue, TypingError as TypingError
from numba.core.typing.templates import AbstractTemplate as AbstractTemplate, AttributeTemplate as AttributeTemplate, bound_function as bound_function, infer as infer, infer_getattr as infer_getattr, infer_global as infer_global, signature as signature
from typing import NamedTuple

numpy_version: Incomplete

class Indexing(NamedTuple):
    index: Incomplete
    result: Incomplete
    advanced: Incomplete

def get_array_index_type(ary, idx):
    """
    Returns None or a tuple-3 for the types of the input array, index, and
    resulting type of ``array[index]``.

    Note: This is shared logic for ndarray getitem and setitem.
    """

class GetItemBuffer(AbstractTemplate):
    def generic(self, args, kws): ...

class SetItemBuffer(AbstractTemplate):
    def generic(self, args, kws): ...

def normalize_shape(shape): ...

class ArrayAttribute(AttributeTemplate):
    key = types.Array
    def resolve_dtype(self, ary): ...
    def resolve_nbytes(self, ary): ...
    def resolve_itemsize(self, ary): ...
    def resolve_shape(self, ary): ...
    def resolve_strides(self, ary): ...
    def resolve_ndim(self, ary): ...
    def resolve_size(self, ary): ...
    def resolve_flat(self, ary): ...
    def resolve_ctypes(self, ary): ...
    def resolve_flags(self, ary): ...
    def resolve_T(self, ary): ...
    def resolve_real(self, ary): ...
    def resolve_imag(self, ary): ...
    def _resolve_real_imag(self, ary, attr): ...
    def resolve_transpose(self, ary, args, kws): ...
    def resolve_copy(self, ary, args, kws): ...
    def resolve_item(self, ary, args, kws): ...
    def resolve_itemset(self, ary, args, kws): ...
    def resolve_nonzero(self, ary, args, kws): ...
    def resolve_reshape(self, ary, args, kws): ...
    def resolve_sort(self, ary, args, kws): ...
    def resolve_argsort(self, ary, args, kws): ...
    def resolve_view(self, ary, args, kws): ...
    def resolve_astype(self, ary, args, kws): ...
    def resolve_ravel(self, ary, args, kws): ...
    def resolve_flatten(self, ary, args, kws): ...
    def generic_resolve(self, ary, attr): ...

class DTypeAttr(AttributeTemplate):
    key = types.DType
    def resolve_type(self, ary): ...
    def resolve_kind(self, ary): ...

class StaticGetItemArray(AbstractTemplate):
    key: str
    def generic(self, args, kws): ...

class RecordAttribute(AttributeTemplate):
    key = types.Record
    def generic_resolve(self, record, attr): ...

class StaticGetItemRecord(AbstractTemplate):
    key: str
    def generic(self, args, kws): ...

class StaticGetItemLiteralRecord(AbstractTemplate):
    def generic(self, args, kws): ...

class StaticSetItemRecord(AbstractTemplate):
    key: str
    def generic(self, args, kws): ...

class StaticSetItemLiteralRecord(AbstractTemplate):
    def generic(self, args, kws): ...

class ArrayCTypesAttribute(AttributeTemplate):
    key = types.ArrayCTypes
    def resolve_data(self, ctinfo): ...

class ArrayFlagsAttribute(AttributeTemplate):
    key = types.ArrayFlags
    def resolve_contiguous(self, ctflags): ...
    def resolve_c_contiguous(self, ctflags): ...
    def resolve_f_contiguous(self, ctflags): ...

class NestedArrayAttribute(ArrayAttribute):
    key = types.NestedArray

def _expand_integer(ty):
    """
    If *ty* is an integer, expand it to a machine int (like Numpy).
    """
def generic_homog(self, args, kws): ...
def generic_expand(self, args, kws): ...
def sum_expand(self, args, kws):
    """
    sum can be called with or without an axis parameter, and with or without
    a dtype parameter
    """
def generic_expand_cumulative(self, args, kws): ...
def generic_hetero_real(self, args, kws): ...
def generic_hetero_always_real(self, args, kws): ...
def generic_index(self, args, kws): ...
def install_array_method(name, generic, prefer_literal: bool = True): ...

class CmpOpEqArray(AbstractTemplate):
    def generic(self, args, kws): ...
