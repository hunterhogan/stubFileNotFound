from .templates import AbstractTemplate as AbstractTemplate, AttributeTemplate as AttributeTemplate, CallableTemplate as CallableTemplate, ConcreteTemplate as ConcreteTemplate, Registry as Registry, bound_function as bound_function, make_callable_template as make_callable_template, signature as signature
from _typeshed import Incomplete
from numba.core import types as types

registry: Incomplete
infer: Incomplete
infer_global: Incomplete
infer_getattr: Incomplete

class ListBuiltin(AbstractTemplate):
    def generic(self, args, kws): ...

class ListAttribute(AttributeTemplate):
    key = types.List
    def resolve_append(self, list, args, kws): ...
    def resolve_clear(self, list, args, kws): ...
    def resolve_extend(self, list, args, kws): ...
    def resolve_insert(self, list, args, kws): ...
    def resolve_pop(self, list, args, kws): ...

class AddList(AbstractTemplate):
    def generic(self, args, kws): ...

class InplaceAddList(AbstractTemplate):
    def generic(self, args, kws): ...

class MulList(AbstractTemplate):
    def generic(self, args, kws): ...

class InplaceMulList(MulList): ...

class ListCompare(AbstractTemplate):
    def generic(self, args, kws): ...

class ListEq(ListCompare): ...
