from _typeshed import Incomplete
from numba.core.typeconv import Conversion as Conversion
from numba.core.types.abstract import Literal as Literal
from numba.core.types.new_scalars.scalars import Boolean as Boolean, BooleanLiteral as BooleanLiteral, Complex as Complex, Float as Float, Integer as Integer, IntegerLiteral as IntegerLiteral, parse_integer_signed as parse_integer_signed

class PythonInteger(Integer):
    bitwidth: Incomplete
    signed: Incomplete
    def __init__(self, name, bitwidth: Incomplete | None = None, signed: Incomplete | None = None) -> None: ...
    def cast_python_value(self, value): ...
    def __lt__(self, other): ...
    @property
    def maxval(self):
        """
        The maximum value representable by this type.
        """
    @property
    def minval(self):
        """
        The minimal value representable by this type.
        """

class PythonIntegerLiteral(IntegerLiteral, PythonInteger):
    def __init__(self, value) -> None: ...
    def can_convert_to(self, typingctx, other): ...

class PythonBoolean(Boolean):
    def cast_python_value(self, value): ...

class PythonBooleanLiteral(BooleanLiteral, PythonBoolean):
    def __init__(self, value) -> None: ...
    def can_convert_to(self, typingctx, other): ...

class PythonFloat(Float):
    bitwidth: Incomplete
    def __init__(self, *args, **kws) -> None: ...
    def cast_python_value(self, value): ...
    def __lt__(self, other): ...

class PythonComplex(Complex):
    underlying_float: Incomplete
    bitwidth: Incomplete
    def __init__(self, name, underlying_float, **kwargs) -> None: ...
    def cast_python_value(self, value): ...
    def __lt__(self, other): ...
