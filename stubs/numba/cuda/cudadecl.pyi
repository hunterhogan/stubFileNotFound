from _typeshed import Incomplete
from numba import cuda as cuda
from numba.core.typing.npydecl import bit_twiddling_functions as bit_twiddling_functions, comparison_functions as comparison_functions, math_operations as math_operations, parse_dtype as parse_dtype, parse_shape as parse_shape, register_number_classes as register_number_classes, register_numpy_ufunc as register_numpy_ufunc, trigonometric_functions as trigonometric_functions
from numba.core.typing.templates import AbstractTemplate as AbstractTemplate, AttributeTemplate as AttributeTemplate, CallableTemplate as CallableTemplate, ConcreteTemplate as ConcreteTemplate, Registry as Registry, signature as signature
from numba.cuda.types import dim3 as dim3

registry: Incomplete
register: Incomplete
register_attr: Incomplete
register_global: Incomplete

class Cuda_array_decl(CallableTemplate):
    def generic(self): ...

class Cuda_shared_array(Cuda_array_decl):
    key: Incomplete

class Cuda_local_array(Cuda_array_decl):
    key: Incomplete

class Cuda_const_array_like(CallableTemplate):
    key: Incomplete
    def generic(self): ...

class Cuda_threadfence_device(ConcreteTemplate):
    key = cuda.threadfence
    cases: Incomplete

class Cuda_threadfence_block(ConcreteTemplate):
    key = cuda.threadfence_block
    cases: Incomplete

class Cuda_threadfence_system(ConcreteTemplate):
    key = cuda.threadfence_system
    cases: Incomplete

class Cuda_syncwarp(ConcreteTemplate):
    key = cuda.syncwarp
    cases: Incomplete

class Cuda_shfl_sync_intrinsic(ConcreteTemplate):
    key = cuda.shfl_sync_intrinsic
    cases: Incomplete

class Cuda_vote_sync_intrinsic(ConcreteTemplate):
    key = cuda.vote_sync_intrinsic
    cases: Incomplete

class Cuda_match_any_sync(ConcreteTemplate):
    key = cuda.match_any_sync
    cases: Incomplete

class Cuda_match_all_sync(ConcreteTemplate):
    key = cuda.match_all_sync
    cases: Incomplete

class Cuda_activemask(ConcreteTemplate):
    key = cuda.activemask
    cases: Incomplete

class Cuda_lanemask_lt(ConcreteTemplate):
    key = cuda.lanemask_lt
    cases: Incomplete

class Cuda_popc(ConcreteTemplate):
    """
    Supported types from `llvm.popc`
    [here](http://docs.nvidia.com/cuda/nvvm-ir-spec/index.html#bit-manipulations-intrinics)
    """
    key = cuda.popc
    cases: Incomplete

class Cuda_fma(ConcreteTemplate):
    """
    Supported types from `llvm.fma`
    [here](https://docs.nvidia.com/cuda/nvvm-ir-spec/index.html#standard-c-library-intrinics)
    """
    key = cuda.fma
    cases: Incomplete

class Cuda_hfma(ConcreteTemplate):
    key = cuda.fp16.hfma
    cases: Incomplete

class Cuda_cbrt(ConcreteTemplate):
    key = cuda.cbrt
    cases: Incomplete

class Cuda_brev(ConcreteTemplate):
    key = cuda.brev
    cases: Incomplete

class Cuda_clz(ConcreteTemplate):
    """
    Supported types from `llvm.ctlz`
    [here](http://docs.nvidia.com/cuda/nvvm-ir-spec/index.html#bit-manipulations-intrinics)
    """
    key = cuda.clz
    cases: Incomplete

class Cuda_ffs(ConcreteTemplate):
    """
    Supported types from `llvm.cttz`
    [here](http://docs.nvidia.com/cuda/nvvm-ir-spec/index.html#bit-manipulations-intrinics)
    """
    key = cuda.ffs
    cases: Incomplete

class Cuda_selp(AbstractTemplate):
    key = cuda.selp
    def generic(self, args, kws): ...

def _genfp16_unary(l_key): ...
def _genfp16_unary_operator(l_key): ...
def _genfp16_binary(l_key): ...

class Float(AbstractTemplate):
    def generic(self, args, kws): ...

def _genfp16_binary_comparison(l_key): ...
def _fp16_binary_operator(l_key, retty): ...
def _genfp16_comparison_operator(op): ...
def _genfp16_binary_operator(op): ...

Cuda_hadd: Incomplete
Cuda_add: Incomplete
Cuda_iadd: Incomplete
Cuda_hsub: Incomplete
Cuda_sub: Incomplete
Cuda_isub: Incomplete
Cuda_hmul: Incomplete
Cuda_mul: Incomplete
Cuda_imul: Incomplete
Cuda_hmax: Incomplete
Cuda_hmin: Incomplete
Cuda_hneg: Incomplete
Cuda_neg: Incomplete
Cuda_habs: Incomplete
Cuda_abs: Incomplete
Cuda_heq: Incomplete
Cuda_hne: Incomplete
Cuda_hge: Incomplete
Cuda_hgt: Incomplete
Cuda_hle: Incomplete
Cuda_hlt: Incomplete

def _resolve_wrapped_unary(fname): ...
def _resolve_wrapped_binary(fname): ...

hsin_device: Incomplete
hcos_device: Incomplete
hlog_device: Incomplete
hlog10_device: Incomplete
hlog2_device: Incomplete
hexp_device: Incomplete
hexp10_device: Incomplete
hexp2_device: Incomplete
hsqrt_device: Incomplete
hrsqrt_device: Incomplete
hfloor_device: Incomplete
hceil_device: Incomplete
hrcp_device: Incomplete
hrint_device: Incomplete
htrunc_device: Incomplete
hdiv_device: Incomplete

def _gen(l_key, supported_types): ...

all_numba_types: Incomplete
integer_numba_types: Incomplete
unsigned_int_numba_types: Incomplete
Cuda_atomic_add: Incomplete
Cuda_atomic_sub: Incomplete
Cuda_atomic_max: Incomplete
Cuda_atomic_min: Incomplete
Cuda_atomic_nanmax: Incomplete
Cuda_atomic_nanmin: Incomplete
Cuda_atomic_and: Incomplete
Cuda_atomic_or: Incomplete
Cuda_atomic_xor: Incomplete
Cuda_atomic_inc: Incomplete
Cuda_atomic_dec: Incomplete
Cuda_atomic_exch: Incomplete

class Cuda_atomic_compare_and_swap(AbstractTemplate):
    key = cuda.atomic.compare_and_swap
    def generic(self, args, kws): ...

class Cuda_atomic_cas(AbstractTemplate):
    key = cuda.atomic.cas
    def generic(self, args, kws): ...

class Cuda_nanosleep(ConcreteTemplate):
    key = cuda.nanosleep
    cases: Incomplete

class Dim3_attrs(AttributeTemplate):
    key = dim3
    def resolve_x(self, mod): ...
    def resolve_y(self, mod): ...
    def resolve_z(self, mod): ...

class CudaSharedModuleTemplate(AttributeTemplate):
    key: Incomplete
    def resolve_array(self, mod): ...

class CudaConstModuleTemplate(AttributeTemplate):
    key: Incomplete
    def resolve_array_like(self, mod): ...

class CudaLocalModuleTemplate(AttributeTemplate):
    key: Incomplete
    def resolve_array(self, mod): ...

class CudaAtomicTemplate(AttributeTemplate):
    key: Incomplete
    def resolve_add(self, mod): ...
    def resolve_sub(self, mod): ...
    def resolve_and_(self, mod): ...
    def resolve_or_(self, mod): ...
    def resolve_xor(self, mod): ...
    def resolve_inc(self, mod): ...
    def resolve_dec(self, mod): ...
    def resolve_exch(self, mod): ...
    def resolve_max(self, mod): ...
    def resolve_min(self, mod): ...
    def resolve_nanmin(self, mod): ...
    def resolve_nanmax(self, mod): ...
    def resolve_compare_and_swap(self, mod): ...
    def resolve_cas(self, mod): ...

class CudaFp16Template(AttributeTemplate):
    key: Incomplete
    def resolve_hadd(self, mod): ...
    def resolve_hsub(self, mod): ...
    def resolve_hmul(self, mod): ...
    def resolve_hdiv(self, mod): ...
    def resolve_hneg(self, mod): ...
    def resolve_habs(self, mod): ...
    def resolve_hfma(self, mod): ...
    def resolve_hsin(self, mod): ...
    def resolve_hcos(self, mod): ...
    def resolve_hlog(self, mod): ...
    def resolve_hlog10(self, mod): ...
    def resolve_hlog2(self, mod): ...
    def resolve_hexp(self, mod): ...
    def resolve_hexp10(self, mod): ...
    def resolve_hexp2(self, mod): ...
    def resolve_hfloor(self, mod): ...
    def resolve_hceil(self, mod): ...
    def resolve_hsqrt(self, mod): ...
    def resolve_hrsqrt(self, mod): ...
    def resolve_hrcp(self, mod): ...
    def resolve_hrint(self, mod): ...
    def resolve_htrunc(self, mod): ...
    def resolve_heq(self, mod): ...
    def resolve_hne(self, mod): ...
    def resolve_hge(self, mod): ...
    def resolve_hgt(self, mod): ...
    def resolve_hle(self, mod): ...
    def resolve_hlt(self, mod): ...
    def resolve_hmax(self, mod): ...
    def resolve_hmin(self, mod): ...

class CudaModuleTemplate(AttributeTemplate):
    key: Incomplete
    def resolve_cg(self, mod): ...
    def resolve_threadIdx(self, mod): ...
    def resolve_blockIdx(self, mod): ...
    def resolve_blockDim(self, mod): ...
    def resolve_gridDim(self, mod): ...
    def resolve_laneid(self, mod): ...
    def resolve_shared(self, mod): ...
    def resolve_popc(self, mod): ...
    def resolve_brev(self, mod): ...
    def resolve_clz(self, mod): ...
    def resolve_ffs(self, mod): ...
    def resolve_fma(self, mod): ...
    def resolve_cbrt(self, mod): ...
    def resolve_threadfence(self, mod): ...
    def resolve_threadfence_block(self, mod): ...
    def resolve_threadfence_system(self, mod): ...
    def resolve_syncwarp(self, mod): ...
    def resolve_shfl_sync_intrinsic(self, mod): ...
    def resolve_vote_sync_intrinsic(self, mod): ...
    def resolve_match_any_sync(self, mod): ...
    def resolve_match_all_sync(self, mod): ...
    def resolve_activemask(self, mod): ...
    def resolve_lanemask_lt(self, mod): ...
    def resolve_selp(self, mod): ...
    def resolve_nanosleep(self, mod): ...
    def resolve_atomic(self, mod): ...
    def resolve_fp16(self, mod): ...
    def resolve_const(self, mod): ...
    def resolve_local(self, mod): ...
