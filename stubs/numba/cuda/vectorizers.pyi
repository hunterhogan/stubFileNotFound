from _typeshed import Incomplete
from numba import cuda as cuda
from numba.cuda import deviceufunc as deviceufunc
from numba.cuda.deviceufunc import GUFuncCallSteps as GUFuncCallSteps, GeneralizedUFunc as GeneralizedUFunc, UFuncMechanism as UFuncMechanism

class CUDAUFuncDispatcher:
    """
    Invoke the CUDA ufunc specialization for the given inputs.
    """
    functions: Incomplete
    __name__: Incomplete
    def __init__(self, types_to_retty_kernels, pyfunc) -> None: ...
    def __call__(self, *args, **kws):
        """
        *args: numpy arrays or DeviceArrayBase (created by cuda.to_device).
               Cannot mix the two types in one call.

        **kws:
            stream -- cuda stream; when defined, asynchronous mode is used.
            out    -- output array. Can be a numpy array or DeviceArrayBase
                      depending on the input arguments.  Type must match
                      the input arguments.
        """
    def reduce(self, arg, stream: int = 0): ...
    def __reduce(self, mem, gpu_mems, stream): ...

class _CUDAGUFuncCallSteps(GUFuncCallSteps):
    __slots__: Incomplete
    _stream: Incomplete
    def __init__(self, nin, nout, args, kwargs) -> None: ...
    def is_device_array(self, obj): ...
    def as_device_array(self, obj): ...
    def to_device(self, hostary): ...
    def to_host(self, devary, hostary): ...
    def allocate_device_array(self, shape, dtype): ...
    def launch_kernel(self, kernel, nelem, args) -> None: ...

class CUDAGeneralizedUFunc(GeneralizedUFunc):
    __name__: Incomplete
    def __init__(self, kernelmap, engine, pyfunc) -> None: ...
    @property
    def _call_steps(self): ...
    def _broadcast_scalar_input(self, ary, shape): ...
    def _broadcast_add_axis(self, ary, newshape): ...

class CUDAUFuncMechanism(UFuncMechanism):
    """
    Provide CUDA specialization
    """
    DEFAULT_STREAM: int
    def launch(self, func, count, stream, args) -> None: ...
    def is_device_array(self, obj): ...
    def as_device_array(self, obj): ...
    def to_device(self, hostary, stream): ...
    def to_host(self, devary, stream): ...
    def allocate_device_array(self, shape, dtype, stream): ...
    def broadcast_device(self, ary, shape): ...

vectorizer_stager_source: str

class CUDAVectorize(deviceufunc.DeviceVectorize):
    def _compile_core(self, sig): ...
    def _get_globals(self, corefn): ...
    def _compile_kernel(self, fnobj, sig): ...
    def build_ufunc(self): ...
    @property
    def _kernel_template(self): ...

_gufunc_stager_source: str

class CUDAGUFuncVectorize(deviceufunc.DeviceGUFuncVectorize):
    def build_ufunc(self): ...
    def _compile_kernel(self, fnobj, sig): ...
    @property
    def _kernel_template(self): ...
    def _get_globals(self, sig): ...
