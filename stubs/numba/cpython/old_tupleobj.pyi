from numba.core import cgutils as cgutils, types as types, typing as typing
from numba.core.extending import intrinsic as intrinsic, overload as overload, overload_method as overload_method
from numba.core.imputils import RefType as RefType, impl_ret_borrowed as impl_ret_borrowed, impl_ret_untracked as impl_ret_untracked, iternext_impl as iternext_impl, lower_builtin as lower_builtin, lower_cast as lower_cast, lower_constant as lower_constant, lower_getattr_generic as lower_getattr_generic

def namedtuple_constructor(context, builder, sig, args): ...
def tuple_add(context, builder, sig, args): ...
def tuple_cmp_ordered(context, builder, op, sig, args): ...
def tuple_eq(context, builder, sig, args): ...
def tuple_ne(context, builder, sig, args): ...
def tuple_lt(context, builder, sig, args): ...
def tuple_le(context, builder, sig, args): ...
def tuple_gt(context, builder, sig, args): ...
def tuple_ge(context, builder, sig, args): ...
def namedtuple_getattr(context, builder, typ, value, attr):
    """
    Fetch a namedtuple's field.
    """
def getiter_unituple(context, builder, sig, args): ...
def iternext_unituple(context, builder, sig, args, result) -> None: ...
def getitem_literal_idx(tup, idx):
    """
    Overloads BaseTuple getitem to cover cases where constant
    inference and RewriteConstGetitems cannot replace it
    with a static_getitem.
    """
def getitem_typed(context, builder, sig, args): ...
def getitem_unituple(context, builder, sig, args): ...
def static_getitem_tuple(context, builder, sig, args): ...
def tuple_to_tuple(context, builder, fromty, toty, val): ...
def tuple_index(tup, value): ...
def in_seq_empty_tuple(x, y): ...
