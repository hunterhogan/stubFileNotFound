from _typeshed import Incomplete
from numba.core import cgutils as cgutils, config as config, types as types
from numba.core.extending import intrinsic as intrinsic, lower_cast as lower_cast, overload as overload, overload_method as overload_method, register_jitable as register_jitable

s1_dtype: Incomplete
bytes_type: Incomplete
u1_dtype: Incomplete
unicode_byte_width: Incomplete
unicode_uint: Incomplete
unicode_kind: Incomplete

def make_deref_codegen(bitsize): ...
def deref_uint8(typingctx, data, offset): ...
def deref_uint16(typingctx, data, offset): ...
def deref_uint32(typingctx, data, offset): ...
def charseq_get_code(a, i):
    """Access i-th item of CharSeq object via code value
    """
def charseq_get_value(a, i):
    """Access i-th item of CharSeq object via code value.

    null code is interpreted as IndexError
    """
def unicode_charseq_get_code(a, i):
    """Access i-th item of UnicodeCharSeq object via code value
    """
def unicode_get_code(a, i):
    """Access i-th item of UnicodeType object.
    """
def bytes_get_code(a, i):
    """Access i-th item of Bytes object.
        """
def _get_code_impl(a): ...
def _same_kind(a, b): ...
def _is_bytes(a): ...
def is_default(x, default): ...
def unicode_charseq_get_value(a, i):
    """Access i-th item of UnicodeCharSeq object via unicode value

    null code is interpreted as IndexError
    """
def bytes_to_charseq(context, builder, fromty, toty, val): ...
def _make_constant_bytes(context, builder, nbytes): ...
def charseq_to_bytes(context, builder, fromty, toty, val): ...
def unicode_to_bytes_cast(context, builder, fromty, toty, val): ...
def _unicode_to_bytes(typingctx, s): ...
def unicode_to_unicode_charseq(context, builder, fromty, toty, val): ...
def charseq_getitem(s, i): ...
def charseq_len(s): ...
def charseq_concat(a, b): ...
def charseq_repeat(a, b): ...
def charseq_not(a): ...
def charseq_eq(a, b): ...
def charseq_ne(a, b): ...
def charseq_lt(a, b): ...
def charseq_gt(a, b): ...
def charseq_le(a, b): ...
def charseq_ge(a, b): ...
def charseq_contains(a, b): ...
def charseq_isascii(s): ...
def charseq_get_kind(s): ...
def unicode_to_bytes_mth(s):
    """Convert unicode_type object to Bytes object.

    Note: The usage of _to_bytes method can be eliminated once all
    Python bytes operations are implemented for numba Bytes objects.

    """
def charseq_to_str_mth(s):
    """Convert bytes array item or bytes instance to UTF-8 str.

    Note: The usage of _to_str method can be eliminated once all
    Python bytes operations are implemented for numba Bytes objects.
    """
def charseq_str(s): ...
def charseq_bytes(s): ...
def unicode_charseq_hash(s): ...
def charseq_hash(s): ...
def unicode_charseq_isupper(s): ...
def charseq_isupper(s): ...
def unicode_charseq_upper(s): ...
def charseq_upper(s): ...
def unicode_charseq_find(a, b): ...
def unicode_charseq_rfind(a, b): ...
def unicode_charseq_startswith(a, b): ...
def unicode_charseq_endswith(a, b): ...
def _map_bytes(seq): ...
def unicode_charseq_split(a, sep: Incomplete | None = None, maxsplit: int = -1): ...
def unicode_charseq_ljust(a, width, fillchar: str = ' '): ...
def unicode_charseq_rjust(a, width, fillchar: str = ' '): ...
def unicode_charseq_center(a, width, fillchar: str = ' '): ...
def unicode_charseq_zfill(a, width): ...
def unicode_charseq_lstrip(a, chars: Incomplete | None = None): ...
def unicode_charseq_rstrip(a, chars: Incomplete | None = None): ...
def unicode_charseq_strip(a, chars: Incomplete | None = None): ...
def unicode_charseq_join(a, parts): ...
