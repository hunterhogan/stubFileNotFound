from _typeshed import Incomplete
from numba.core import types as types
from numba.core.extending import overload as overload
from numba.core.imputils import impl_ret_untracked as impl_ret_untracked
from numba.core.typing import signature as signature
from numba.cpython import mathimpl as mathimpl

def is_nan(builder, z): ...
def is_inf(builder, z): ...
def is_finite(builder, z): ...
def isnan_float_impl(context, builder, sig, args): ...
def isinf_float_impl(context, builder, sig, args): ...
def isfinite_float_impl(context, builder, sig, args): ...
def impl_cmath_rect(r, phi): ...
def intrinsic_complex_unary(inner_func): ...

NAN: Incomplete
INF: Incomplete

def exp_impl(x, y, x_is_finite, y_is_finite):
    """cmath.exp(x + y j)"""
def log_impl(x, y, x_is_finite, y_is_finite):
    """cmath.log(x + y j)"""
def log_base_impl(context, builder, sig, args):
    """cmath.log(z, base)"""
def impl_cmath_log10(z): ...
def phase_impl(x):
    """cmath.phase(x + y j)"""
def polar_impl(x): ...
def sqrt_impl(context, builder, sig, args): ...
def cos_impl(context, builder, sig, args): ...
def impl_cmath_cosh(z): ...
def sin_impl(context, builder, sig, args): ...
def impl_cmath_sinh(z): ...
def tan_impl(context, builder, sig, args): ...
def impl_cmath_tanh(z): ...
def acos_impl(context, builder, sig, args): ...
def impl_cmath_acosh(z): ...
def asinh_impl(context, builder, sig, args): ...
def asin_impl(context, builder, sig, args): ...
def atan_impl(context, builder, sig, args): ...
def atanh_impl(context, builder, sig, args): ...
