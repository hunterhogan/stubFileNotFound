from collections.abc import Sequence as Sequence
from moisesdb.defaults import default_data_path as default_data_path, default_sample_rate as default_sample_rate
from moisesdb.track import MoisesDBTrack as MoisesDBTrack
from moisesdb.utils import get_fs as get_fs
from os import PathLike
from typing import Any

class MoisesDB:
    data_path: str | PathLike[Any]
    sample_rate: int
    quiet: bool
    providers_list: list[str]
    providers_tracks: dict[str, list[str]]
    tracks: dict[str, list[MoisesDBTrack]]
    flatten_map: list[MoisesDBTrack]
    def __init__(self, data_path: str | PathLike[Any] = ..., sample_rate: int = ..., quiet: bool = False) -> None: ...
    def get_providers(self, data_path: str | PathLike[Any]) -> list[str]: ...
    def get_providers_tracks(self, provider: str) -> list[str]: ...
    def get_tracks_list(self, providers_list: list[str]) -> dict[str, list[str]]: ...
    def build_tracks(self, providers_tracks: dict[str, list[str]]) -> dict[str, list[MoisesDBTrack]]: ...
    def build_flatten_map(self, tracks: dict[str, list[MoisesDBTrack]]) -> list[MoisesDBTrack]: ...
    def __len__(self) -> int: ...
    def __getitem__(self, idx: int) -> MoisesDBTrack: ...
