"""
This type stub file was generated by pyright.
"""

__all__ = ['decorator', 'wraps', 'unwrap', 'ContextDecorator', 'contextmanager']
def decorator(deco): # -> Callable[..., Any]:
    """
    Transforms a flat wrapper into decorator::

        @decorator
        def func(call, methods, content_type=DEFAULT):  # These are decorator params
            # Access call arg by name
            if call.request.method not in methods:
                # ...
            # Decorated functions and all the arguments are accesible as:
            print(call._func, call_args, call._kwargs)
            # Finally make a call:
            return call()
    """
    ...

def make_decorator(deco, dargs=..., dkwargs=...): # -> Callable[..., Any]:
    ...

class Call:
    """
    A call object to pass as first argument to decorator.

    Call object is just a proxy for decorated function
    with call arguments saved in its attributes.
    """
    def __init__(self, func, args, kwargs) -> None:
        ...
    
    def __call__(self, *a, **kw):
        ...
    
    def __getattr__(self, name): # -> Any | defaultdict[Any, Any] | dict[Any, Any] | list[Any] | Generator[tuple[Any, Any], None, None]:
        ...
    
    def __str__(self) -> str:
        ...
    
    def __repr__(self): # -> str:
        ...
    


def has_single_arg(func): # -> bool:
    ...

def has_1pos_and_kwonly(func): # -> bool:
    ...

def get_argnames(func): # -> Any:
    ...

def arggetter(func, _cache=...): # -> Callable[..., Any | defaultdict[Any, Any] | dict[Any, Any] | list[Any] | Generator[tuple[Any, Any], None, None]]:
    ...

def update_wrapper(wrapper, wrapped, assigned=..., updated=...):
    ...

def wraps(wrapped, assigned=..., updated=...): # -> partial[Any]:
    ...

