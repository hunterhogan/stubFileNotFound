"""
This type stub file was generated by pyright.
"""

from .decorators import decorator

__all__ = ['tap', 'log_calls', 'print_calls', 'log_enters', 'print_enters', 'log_exits', 'print_exits', 'log_errors', 'print_errors', 'log_durations', 'print_durations', 'log_iter_durations', 'print_iter_durations']
REPR_LEN = ...
def tap(x, label=...):
    """Prints x and then returns it."""
    ...

@decorator
def log_calls(call, print_func, errors=..., stack=..., repr_len=...):
    """Logs or prints all function calls,
       including arguments, results and raised exceptions."""
    ...

def print_calls(errors=..., stack=..., repr_len=...):
    ...

@decorator
def log_enters(call, print_func, repr_len=...):
    """Logs each entrance to a function."""
    ...

def print_enters(repr_len=...):
    """Prints on each entrance to a function."""
    ...

@decorator
def log_exits(call, print_func, errors=..., stack=..., repr_len=...):
    """Logs exits from a function."""
    ...

def print_exits(errors=..., stack=..., repr_len=...):
    """Prints on exits from a function."""
    ...

class LabeledContextDecorator:
    """
    A context manager which also works as decorator, passing call signature as its label.
    """
    def __init__(self, print_func, label=..., repr_len=...) -> None:
        ...
    
    def __call__(self, label=..., **kwargs): # -> Callable[..., Any] | Self:
        ...
    
    def decorator(self, func): # -> Callable[..., Any]:
        ...
    


class log_errors(LabeledContextDecorator):
    """Logs or prints all errors within a function or block."""
    def __init__(self, print_func, label=..., stack=..., repr_len=...) -> None:
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, exc_type, exc_value, tb): # -> None:
        ...
    


print_errors = ...
def format_time(sec):
    ...

time_formatters = ...
class log_durations(LabeledContextDecorator):
    """Times each function call or block execution."""
    def __init__(self, print_func, label=..., unit=..., threshold=..., repr_len=...) -> None:
        ...
    
    def __enter__(self): # -> Self:
        ...
    
    def __exit__(self, *exc): # -> None:
        ...
    


print_durations = ...
def log_iter_durations(seq, print_func, label=..., unit=...): # -> Generator[Any, Any, None]:
    """Times processing of each item in seq."""
    ...

def print_iter_durations(seq, label=..., unit=...): # -> Generator[Any, Any, None]:
    """Times processing of each item in seq."""
    ...

def signature_repr(call, repr_len=...): # -> str:
    ...

def smart_repr(value, max_len=...): # -> str:
    ...

