from .. import _api as _api, cbook as cbook, font_manager as font_manager
from _typeshed import Incomplete
from matplotlib.backend_bases import FigureCanvasBase as FigureCanvasBase, FigureManagerBase as FigureManagerBase, GraphicsContextBase as GraphicsContextBase, RendererBase as RendererBase, _Backend as _Backend
from matplotlib.font_manager import ttfFontProperty as ttfFontProperty
from matplotlib.path import Path as Path
from matplotlib.transforms import Affine2D as Affine2D

def _set_rgba(ctx, color, alpha, forced_alpha) -> None: ...
def _append_path(ctx, path, transform, clip: Incomplete | None = None) -> None: ...
def _cairo_font_args_from_font_prop(prop):
    """
    Convert a `.FontProperties` or a `.FontEntry` to arguments that can be
    passed to `.Context.select_font_face`.
    """

class RendererCairo(RendererBase):
    dpi: Incomplete
    gc: Incomplete
    width: Incomplete
    height: Incomplete
    text_ctx: Incomplete
    def __init__(self, dpi) -> None: ...
    def set_context(self, ctx) -> None: ...
    @staticmethod
    def _fill_and_stroke(ctx, fill_c, alpha, alpha_overrides) -> None: ...
    def draw_path(self, gc, path, transform, rgbFace: Incomplete | None = None) -> None: ...
    def draw_markers(self, gc, marker_path, marker_trans, path, transform, rgbFace: Incomplete | None = None) -> None: ...
    def draw_image(self, gc, x, y, im) -> None: ...
    def draw_text(self, gc, x, y, s, prop, angle, ismath: bool = False, mtext: Incomplete | None = None) -> None: ...
    def _draw_mathtext(self, gc, x, y, s, prop, angle) -> None: ...
    def get_canvas_width_height(self): ...
    def get_text_width_height_descent(self, s, prop, ismath): ...
    def new_gc(self): ...
    def points_to_pixels(self, points): ...

class GraphicsContextCairo(GraphicsContextBase):
    _joind: Incomplete
    _capd: Incomplete
    renderer: Incomplete
    def __init__(self, renderer) -> None: ...
    def restore(self) -> None: ...
    def set_alpha(self, alpha) -> None: ...
    def set_antialiased(self, b) -> None: ...
    def get_antialiased(self): ...
    _capstyle: Incomplete
    def set_capstyle(self, cs) -> None: ...
    def set_clip_rectangle(self, rectangle) -> None: ...
    def set_clip_path(self, path) -> None: ...
    _dashes: Incomplete
    def set_dashes(self, offset, dashes) -> None: ...
    def set_foreground(self, fg, isRGBA: Incomplete | None = None) -> None: ...
    def get_rgb(self): ...
    _joinstyle: Incomplete
    def set_joinstyle(self, js) -> None: ...
    _linewidth: Incomplete
    def set_linewidth(self, w) -> None: ...

class _CairoRegion:
    _slices: Incomplete
    _data: Incomplete
    def __init__(self, slices, data) -> None: ...

class FigureCanvasCairo(FigureCanvasBase):
    _cached_renderer: Incomplete
    @property
    def _renderer(self): ...
    def get_renderer(self): ...
    def copy_from_bbox(self, bbox): ...
    def restore_region(self, region) -> None: ...
    def print_png(self, fobj) -> None: ...
    def print_rgba(self, fobj) -> None: ...
    print_raw = print_rgba
    def _get_printed_image_surface(self): ...
    def _save(self, fmt, fobj, *, orientation: str = 'portrait') -> None: ...
    print_pdf: Incomplete
    print_ps: Incomplete
    print_svg: Incomplete
    print_svgz: Incomplete

class _BackendCairo(_Backend):
    backend_version: Incomplete
    FigureCanvas = FigureCanvasCairo
    FigureManager = FigureManagerBase
