from .qt_compat import QT_API as QT_API, QtCore as QtCore, QtGui as QtGui, QtWidgets as QtWidgets, __version__ as __version__, _isdeleted as _isdeleted, _to_int as _to_int
from _typeshed import Incomplete
from matplotlib import _api as _api, backend_tools as backend_tools, cbook as cbook
from matplotlib.backend_bases import CloseEvent as CloseEvent, FigureCanvasBase as FigureCanvasBase, FigureManagerBase as FigureManagerBase, KeyEvent as KeyEvent, LocationEvent as LocationEvent, MouseButton as MouseButton, MouseEvent as MouseEvent, NavigationToolbar2 as NavigationToolbar2, ResizeEvent as ResizeEvent, TimerBase as TimerBase, ToolContainerBase as ToolContainerBase, _Backend as _Backend, _allow_interrupt as _allow_interrupt, cursors as cursors

SPECIAL_KEYS: Incomplete
_MODIFIER_KEYS: Incomplete
cursord: Incomplete

def _create_qApp(): ...
def _allow_interrupt_qt(qapp_or_eventloop):
    """A context manager that allows terminating a plot by sending a SIGINT."""

class TimerQT(TimerBase):
    """Subclass of `.TimerBase` using QTimer events."""
    _timer: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def __del__(self) -> None: ...
    def _timer_set_single_shot(self) -> None: ...
    def _timer_set_interval(self) -> None: ...
    def _timer_start(self) -> None: ...
    def _timer_stop(self) -> None: ...

class FigureCanvasQT(FigureCanvasBase, QtWidgets.QWidget):
    required_interactive_framework: str
    _timer_cls = TimerQT
    manager_class: Incomplete
    buttond: Incomplete
    _draw_pending: bool
    _is_drawing: bool
    _draw_rect_callback: Incomplete
    _in_resize_event: bool
    def __init__(self, figure: Incomplete | None = None) -> None: ...
    def _update_pixel_ratio(self) -> None: ...
    def _update_screen(self, screen) -> None: ...
    def showEvent(self, event) -> None: ...
    def set_cursor(self, cursor) -> None: ...
    def mouseEventCoords(self, pos: Incomplete | None = None):
        """
        Calculate mouse coordinates in physical pixels.

        Qt uses logical pixels, but the figure is scaled to physical
        pixels for rendering.  Transform to physical pixels so that
        all of the down-stream transforms work as expected.

        Also, the origin is different and needs to be corrected.
        """
    def enterEvent(self, event) -> None: ...
    def leaveEvent(self, event) -> None: ...
    def mousePressEvent(self, event) -> None: ...
    def mouseDoubleClickEvent(self, event) -> None: ...
    def mouseMoveEvent(self, event) -> None: ...
    def mouseReleaseEvent(self, event) -> None: ...
    def wheelEvent(self, event) -> None: ...
    def keyPressEvent(self, event) -> None: ...
    def keyReleaseEvent(self, event) -> None: ...
    def resizeEvent(self, event) -> None: ...
    def sizeHint(self): ...
    def minimumSizeHint(self): ...
    @staticmethod
    def _mpl_buttons(buttons): ...
    @staticmethod
    def _mpl_modifiers(modifiers: Incomplete | None = None, *, exclude: Incomplete | None = None): ...
    def _get_key(self, event): ...
    def flush_events(self) -> None: ...
    _event_loop: Incomplete
    def start_event_loop(self, timeout: int = 0) -> None: ...
    def stop_event_loop(self, event: Incomplete | None = None) -> None: ...
    def draw(self) -> None:
        """Render the figure, and queue a request for a Qt draw."""
    def draw_idle(self) -> None:
        """Queue redraw of the Agg buffer and request Qt paintEvent."""
    def blit(self, bbox: Incomplete | None = None) -> None: ...
    def _draw_idle(self) -> None: ...
    def drawRectangle(self, rect) -> None: ...

class MainWindow(QtWidgets.QMainWindow):
    closing: Incomplete
    def closeEvent(self, event) -> None: ...

class FigureManagerQT(FigureManagerBase):
    """
    Attributes
    ----------
    canvas : `FigureCanvas`
        The FigureCanvas instance
    num : int or str
        The Figure number
    toolbar : qt.QToolBar
        The qt.QToolBar
    window : qt.QMainWindow
        The qt.QMainWindow
    """
    window: Incomplete
    def __init__(self, canvas, num) -> None: ...
    def full_screen_toggle(self) -> None: ...
    def _widgetclosed(self) -> None: ...
    def resize(self, width, height) -> None: ...
    @classmethod
    def start_main_loop(cls) -> None: ...
    def show(self) -> None: ...
    def destroy(self, *args) -> None: ...
    def get_window_title(self): ...
    def set_window_title(self, title) -> None: ...

class NavigationToolbar2QT(NavigationToolbar2, QtWidgets.QToolBar):
    toolitems: Incomplete
    coordinates: Incomplete
    _actions: Incomplete
    _subplot_dialog: Incomplete
    locLabel: Incomplete
    def __init__(self, canvas, parent: Incomplete | None = None, coordinates: bool = True) -> None:
        """coordinates: should we show the coordinates on the right?"""
    def _icon(self, name):
        '''
        Construct a `.QIcon` from an image file *name*, including the extension
        and relative to Matplotlib\'s "images" data directory.
        '''
    def edit_parameters(self) -> None: ...
    def _update_buttons_checked(self) -> None: ...
    def pan(self, *args) -> None: ...
    def zoom(self, *args) -> None: ...
    def set_message(self, s) -> None: ...
    def draw_rubberband(self, event, x0, y0, x1, y1) -> None: ...
    def remove_rubberband(self) -> None: ...
    def configure_subplots(self): ...
    def save_figure(self, *args): ...
    def set_history_buttons(self) -> None: ...

class SubplotToolQt(QtWidgets.QDialog):
    _spinboxes: Incomplete
    _figure: Incomplete
    _defaults: Incomplete
    _export_values_dialog: Incomplete
    def __init__(self, targetfig, parent) -> None: ...
    def update_from_current_subplotpars(self) -> None: ...
    def _export_values(self) -> None: ...
    def _on_value_changed(self) -> None: ...
    def _tight_layout(self) -> None: ...
    def _reset(self) -> None: ...

class ToolbarQt(ToolContainerBase, QtWidgets.QToolBar):
    _message_action: Incomplete
    _toolitems: Incomplete
    _groups: Incomplete
    def __init__(self, toolmanager, parent: Incomplete | None = None) -> None: ...
    def add_toolitem(self, name, group, position, image_file, description, toggle) -> None: ...
    def _add_to_group(self, group, name, button, position) -> None: ...
    def toggle_toolitem(self, name, toggled) -> None: ...
    def remove_toolitem(self, name) -> None: ...
    def set_message(self, s) -> None: ...

class ConfigureSubplotsQt(backend_tools.ConfigureSubplotsBase):
    _subplot_dialog: Incomplete
    def __init__(self, *args, **kwargs) -> None: ...
    def trigger(self, *args) -> None: ...

class SaveFigureQt(backend_tools.SaveFigureBase):
    def trigger(self, *args) -> None: ...

class RubberbandQt(backend_tools.RubberbandBase):
    def draw_rubberband(self, x0, y0, x1, y1) -> None: ...
    def remove_rubberband(self) -> None: ...

class HelpQt(backend_tools.ToolHelpBase):
    def trigger(self, *args) -> None: ...

class ToolCopyToClipboardQT(backend_tools.ToolCopyToClipboardBase):
    def trigger(self, *args, **kwargs) -> None: ...

class _BackendQT(_Backend):
    backend_version = __version__
    FigureCanvas = FigureCanvasQT
    FigureManager = FigureManagerQT
    mainloop: Incomplete
