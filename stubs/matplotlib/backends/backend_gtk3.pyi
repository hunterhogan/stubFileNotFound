from . import _backend_gtk as _backend_gtk
from ._backend_gtk import _BackendGTK as _BackendGTK, _FigureCanvasGTK as _FigureCanvasGTK, _FigureManagerGTK as _FigureManagerGTK, _NavigationToolbar2GTK as _NavigationToolbar2GTK
from _typeshed import Incomplete
from gi.repository import Gtk
from matplotlib import _api as _api, backend_tools as backend_tools, cbook as cbook
from matplotlib.backend_bases import CloseEvent as CloseEvent, KeyEvent as KeyEvent, LocationEvent as LocationEvent, MouseButton as MouseButton, MouseEvent as MouseEvent, ResizeEvent as ResizeEvent, ToolContainerBase as ToolContainerBase

_log: Incomplete

def _mpl_to_gtk_cursor(mpl_cursor): ...

class FigureCanvasGTK3(_FigureCanvasGTK, Gtk.DrawingArea):
    required_interactive_framework: str
    manager_class: Incomplete
    event_mask: Incomplete
    _idle_draw_id: int
    _rubberband_rect: Incomplete
    def __init__(self, figure: Incomplete | None = None) -> None: ...
    def destroy(self) -> None: ...
    def set_cursor(self, cursor) -> None: ...
    def _mpl_coords(self, event: Incomplete | None = None):
        """
        Convert the position of a GTK event, or of the current cursor position
        if *event* is None, to Matplotlib coordinates.

        GTK use logical pixels, but the figure is scaled to physical pixels for
        rendering.  Transform to physical pixels so that all of the down-stream
        transforms work as expected.

        Also, the origin is different and needs to be corrected.
        """
    def scroll_event(self, widget, event): ...
    def button_press_event(self, widget, event): ...
    def button_release_event(self, widget, event): ...
    def key_press_event(self, widget, event): ...
    def key_release_event(self, widget, event): ...
    def motion_notify_event(self, widget, event): ...
    def enter_notify_event(self, widget, event) -> None: ...
    def leave_notify_event(self, widget, event) -> None: ...
    def size_allocate(self, widget, allocation) -> None: ...
    @staticmethod
    def _mpl_buttons(event_state): ...
    @staticmethod
    def _mpl_modifiers(event_state, *, exclude: Incomplete | None = None): ...
    def _get_key(self, event): ...
    def _update_device_pixel_ratio(self, *args, **kwargs) -> None: ...
    def configure_event(self, widget, event): ...
    def _draw_rubberband(self, rect) -> None: ...
    def _post_draw(self, widget, ctx) -> None: ...
    def on_draw_event(self, widget, ctx) -> None: ...
    def draw(self) -> None: ...
    def draw_idle(self): ...
    def flush_events(self) -> None: ...

class NavigationToolbar2GTK3(_NavigationToolbar2GTK, Gtk.Toolbar):
    _gtk_ids: Incomplete
    message: Incomplete
    def __init__(self, canvas) -> None: ...
    def save_figure(self, *args): ...

class ToolbarGTK3(ToolContainerBase, Gtk.Box):
    _icon_extension: str
    _message: Incomplete
    _groups: Incomplete
    _toolitems: Incomplete
    def __init__(self, toolmanager) -> None: ...
    def add_toolitem(self, name, group, position, image_file, description, toggle) -> None: ...
    def _add_button(self, button, group, position) -> None: ...
    def _call_tool(self, btn, name) -> None: ...
    def toggle_toolitem(self, name, toggled) -> None: ...
    def remove_toolitem(self, name) -> None: ...
    def _add_separator(self) -> None: ...
    def set_message(self, s) -> None: ...

class SaveFigureGTK3(backend_tools.SaveFigureBase):
    def trigger(self, *args, **kwargs) -> None: ...

class HelpGTK3(backend_tools.ToolHelpBase):
    def _normalize_shortcut(self, key):
        """
        Convert Matplotlib key presses to GTK+ accelerator identifiers.

        Related to `FigureCanvasGTK3._get_key`.
        """
    def _is_valid_shortcut(self, key):
        """
        Check for a valid shortcut to be displayed.

        - GTK will never send 'cmd+' (see `FigureCanvasGTK3._get_key`).
        - The shortcut window only shows keyboard shortcuts, not mouse buttons.
        """
    def _show_shortcuts_window(self): ...
    def _show_shortcuts_dialog(self) -> None: ...
    def trigger(self, *args) -> None: ...

class ToolCopyToClipboardGTK3(backend_tools.ToolCopyToClipboardBase):
    def trigger(self, *args, **kwargs) -> None: ...
Toolbar = ToolbarGTK3

class FigureManagerGTK3(_FigureManagerGTK):
    _toolbar2_class = NavigationToolbar2GTK3
    _toolmanager_toolbar_class = ToolbarGTK3

class _BackendGTK3(_BackendGTK):
    FigureCanvas = FigureCanvasGTK3
    FigureManager = FigureManagerGTK3
