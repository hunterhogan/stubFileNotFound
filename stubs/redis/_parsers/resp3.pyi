from ..exceptions import ConnectionError as ConnectionError, InvalidResponse as InvalidResponse, ResponseError as ResponseError
from ..typing import EncodableT as EncodableT
from .base import AsyncPushNotificationsParser as AsyncPushNotificationsParser, PushNotificationsParser as PushNotificationsParser, _AsyncRESPBase as _AsyncRESPBase, _RESPBase as _RESPBase
from .socket import SERVER_CLOSED_CONNECTION_ERROR as SERVER_CLOSED_CONNECTION_ERROR
from _typeshed import Incomplete

class _RESP3Parser(_RESPBase, PushNotificationsParser):
    """RESP3 protocol implementation"""
    pubsub_push_handler_func: Incomplete
    invalidation_push_handler_func: Incomplete
    def __init__(self, socket_read_size) -> None: ...
    def handle_pubsub_push_response(self, response): ...
    def read_response(self, disable_decoding: bool = False, push_request: bool = False): ...
    def _read_response(self, disable_decoding: bool = False, push_request: bool = False): ...

class _AsyncRESP3Parser(_AsyncRESPBase, AsyncPushNotificationsParser):
    pubsub_push_handler_func: Incomplete
    invalidation_push_handler_func: Incomplete
    def __init__(self, socket_read_size) -> None: ...
    async def handle_pubsub_push_response(self, response): ...
    _pos: int
    async def read_response(self, disable_decoding: bool = False, push_request: bool = False): ...
    async def _read_response(self, disable_decoding: bool = False, push_request: bool = False) -> EncodableT | ResponseError | None: ...
