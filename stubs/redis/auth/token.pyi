from _typeshed import Incomplete
from abc import ABC, abstractmethod
from redis.auth.err import InvalidTokenSchemaErr as InvalidTokenSchemaErr
from typing import Any
import abc

class TokenInterface(ABC, metaclass=abc.ABCMeta):
    @abstractmethod
    def is_expired(self) -> bool: ...
    @abstractmethod
    def ttl(self) -> float: ...
    @abstractmethod
    def try_get(self, key: str) -> str: ...
    @abstractmethod
    def get_value(self) -> str: ...
    @abstractmethod
    def get_expires_at_ms(self) -> float: ...
    @abstractmethod
    def get_received_at_ms(self) -> float: ...

class TokenResponse:
    _token: Incomplete
    def __init__(self, token: TokenInterface) -> None: ...
    def get_token(self) -> TokenInterface: ...
    def get_ttl_ms(self) -> float: ...

class SimpleToken(TokenInterface):
    value: Incomplete
    expires_at: Incomplete
    received_at: Incomplete
    claims: Incomplete
    def __init__(self, value: str, expires_at_ms: float, received_at_ms: float, claims: dict[Any, Any]) -> None: ...
    def ttl(self) -> float: ...
    def is_expired(self) -> bool: ...
    def try_get(self, key: str) -> str: ...
    def get_value(self) -> str: ...
    def get_expires_at_ms(self) -> float: ...
    def get_received_at_ms(self) -> float: ...

class JWToken(TokenInterface):
    REQUIRED_FIELDS: Incomplete
    _value: Incomplete
    _decoded: Incomplete
    def __init__(self, token: str) -> None: ...
    def is_expired(self) -> bool: ...
    def ttl(self) -> float: ...
    def try_get(self, key: str) -> str: ...
    def get_value(self) -> str: ...
    def get_expires_at_ms(self) -> float: ...
    def get_received_at_ms(self) -> float: ...
    def _validate_token(self) -> None: ...
