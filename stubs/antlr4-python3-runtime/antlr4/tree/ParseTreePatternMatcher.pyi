from _typeshed import Incomplete

from antlr4.error.Errors import (
    ParseCancellationException as ParseCancellationException,
    RecognitionException as RecognitionException,
)
from antlr4.Lexer import Lexer as Lexer
from antlr4.tree.Chunk import TagChunk as TagChunk, TextChunk as TextChunk
from antlr4.tree.Tree import ParseTree as ParseTree, RuleNode as RuleNode, TerminalNode as TerminalNode

Parser: Incomplete
ParseTreePattern: Incomplete

class CannotInvokeStartRule(Exception):
    def __init__(self, e: Exception) -> None: ...

class StartRuleDoesNotConsumeFullPattern(Exception): ...

class ParseTreePatternMatcher:
    lexer: Incomplete
    parser: Incomplete
    start: str
    stop: str
    escape: str
    def __init__(self, lexer: Lexer, parser: Parser) -> None: ...
    def setDelimiters(self, start: str, stop: str, escapeLeft: str): ...
    def matchesRuleIndex(self, tree: ParseTree, pattern: str, patternRuleIndex: int): ...
    def matchesPattern(self, tree: ParseTree, pattern: ParseTreePattern): ...
    def matchRuleIndex(self, tree: ParseTree, pattern: str, patternRuleIndex: int): ...
    def matchPattern(self, tree: ParseTree, pattern: ParseTreePattern): ...
    def compileTreePattern(self, pattern: str, patternRuleIndex: int): ...
    def matchImpl(self, tree: ParseTree, patternTree: ParseTree, labels: dict[str, list[ParseTree]]): ...
    def map(self, labels, label, tree) -> None: ...
    def getRuleTagToken(self, tree: ParseTree): ...
    def tokenize(self, pattern: str): ...
    def split(self, pattern: str): ...
