from _typeshed import Incomplete
from numba import types
from numba.core.datamodel import models
from pandas.core.indexes.base import Index as Index

def set_numba_data(index: Index): ...

class IndexType(types.Type):
    """
    The type class for Index objects.
    """
    pyclass: Incomplete
    dtype: Incomplete
    layout: Incomplete
    def __init__(self, dtype, layout, pyclass: any) -> None: ...
    @property
    def key(self): ...
    @property
    def as_array(self): ...
    def copy(self, dtype: Incomplete | None = None, ndim: int = 1, layout: Incomplete | None = None): ...

class SeriesType(types.Type):
    """
    The type class for Series objects.
    """
    dtype: Incomplete
    index: Incomplete
    values: Incomplete
    namety: Incomplete
    def __init__(self, dtype, index, namety) -> None: ...
    @property
    def key(self): ...
    @property
    def as_array(self): ...
    def copy(self, dtype: Incomplete | None = None, ndim: int = 1, layout: str = 'C'): ...

def typeof_index(val, c):
    """
    This will assume that only strings are in object dtype
    index.
    (you should check this before this gets lowered down to numba)
    """
def typeof_series(val, c): ...
def type_series_constructor(context): ...
def type_index_constructor(context): ...

class IndexModel(models.StructModel):
    def __init__(self, dmm, fe_type) -> None: ...

class SeriesModel(models.StructModel):
    def __init__(self, dmm, fe_type) -> None: ...

def pdseries_constructor(context, builder, sig, args): ...
def pdseries_constructor_with_name(context, builder, sig, args): ...
def index_constructor_2arg(context, builder, sig, args): ...
def index_constructor_2arg_parent(context, builder, sig, args): ...
def index_constructor_1arg(context, builder, sig, args): ...
def maybe_cast_str(x) -> None: ...
def maybe_cast_str_impl(x):
    """Converts numba UnicodeCharSeq (numpy string scalar) -> unicode type (string).
    Is a no-op for other types."""
def unbox_index(typ, obj, c):
    """
    Convert a Index object to a native structure.

    Note: Object dtype is not allowed here
    """
def unbox_series(typ, obj, c):
    """
    Convert a Series object to a native structure.
    """
def box_index(typ, val, c):
    """
    Convert a native index structure to a Index object.

    If our native index is of a numpy string dtype, we'll cast it to
    object.
    """
def box_series(typ, val, c):
    """
    Convert a native series structure to a Series object.
    """
def generate_series_reduction(ser_reduction, ser_method): ...
def generate_series_binop(binop): ...

series_reductions: Incomplete
series_binops: Incomplete

def index_get_loc(index, item): ...
def series_indexing(series, item): ...
def index_indexing(index, idx): ...

class IlocType(types.Type):
    obj_type: Incomplete
    def __init__(self, obj_type) -> None: ...
    @property
    def key(self): ...

def typeof_iloc(val, c): ...
def type_iloc_constructor(context): ...
def iloc_constructor(context, builder, sig, args): ...

class ILocModel(models.StructModel):
    def __init__(self, dmm, fe_type) -> None: ...

def series_iloc(series): ...
def iloc_getitem(iloc_indexer, i): ...
