import _abc
import numba.core.datamodel.old_models
import numba.core.types.abstract
import pandas._libs.lib as lib
from pandas.core.indexes.base import Index as Index
from pandas.core.indexing import _iLocIndexer as _iLocIndexer
from pandas.core.internals.managers import SingleBlockManager as SingleBlockManager
from pandas.core.series import Series as Series
from typing import ClassVar

def set_numba_data(*args, **kwds): ...

class IndexType(numba.core.types.abstract.Type):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc._abc_data] = ...
    _is_internal: ClassVar[bool] = ...
    def __init__(self, dtype, layout, pyclass: any) -> None: ...
    def copy(self, dtype, ndim: int = ..., layout): ...
    @property
    def key(self): ...
    @property
    def as_array(self): ...

class SeriesType(numba.core.types.abstract.Type):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc._abc_data] = ...
    _is_internal: ClassVar[bool] = ...
    def __init__(self, dtype, index, namety) -> None: ...
    def copy(self, dtype, ndim: int = ..., layout: str = ...): ...
    @property
    def key(self): ...
    @property
    def as_array(self): ...
def typeof_index(val, c):
    """
    This will assume that only strings are in object dtype
    index.
    (you should check this before this gets lowered down to numba)
    """
def typeof_series(val, c): ...
def type_series_constructor(context): ...
def type_index_constructor(context): ...

class IndexModel(numba.core.datamodel.old_models.StructModel):
    def __init__(self, dmm, fe_type) -> None: ...

class SeriesModel(numba.core.datamodel.old_models.StructModel):
    def __init__(self, dmm, fe_type) -> None: ...
def pdseries_constructor(context, builder, sig, args): ...
def pdseries_constructor_with_name(context, builder, sig, args): ...
def index_constructor_2arg(context, builder, sig, args): ...
def index_constructor_2arg_parent(context, builder, sig, args): ...
def index_constructor_1arg(context, builder, sig, args): ...
def maybe_cast_str(x): ...
def maybe_cast_str_impl(x):
    """Converts numba UnicodeCharSeq (numpy string scalar) -> unicode type (string).
    Is a no-op for other types."""
def unbox_index(typ, obj, c):
    """
    Convert a Index object to a native structure.

    Note: Object dtype is not allowed here
    """
def unbox_series(typ, obj, c):
    """
    Convert a Series object to a native structure.
    """
def box_index(typ, val, c):
    """
    Convert a native index structure to a Index object.

    If our native index is of a numpy string dtype, we'll cast it to
    object.
    """
def box_series(typ, val, c):
    """
    Convert a native series structure to a Series object.
    """
def generate_series_reduction(ser_reduction, ser_method): ...
def generate_series_binop(binop): ...

series_reductions: list
reduction: str
series_binops: list
def index_get_loc(index, item): ...
def series_indexing(series, item): ...
def index_indexing(index, idx): ...

class IlocType(numba.core.types.abstract.Type):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc._abc_data] = ...
    _is_internal: ClassVar[bool] = ...
    def __init__(self, obj_type) -> None: ...
    @property
    def key(self): ...
def typeof_iloc(val, c): ...
def type_iloc_constructor(context): ...
def iloc_constructor(context, builder, sig, args): ...

class ILocModel(numba.core.datamodel.old_models.StructModel):
    def __init__(self, dmm, fe_type) -> None: ...
def series_iloc(series): ...
def iloc_getitem(iloc_indexer, i): ...
