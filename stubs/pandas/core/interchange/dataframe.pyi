import _abc
import pandas.core.interchange.dataframe_protocol
from pandas.core.interchange.column import PandasColumn as PandasColumn
from pandas.core.interchange.dataframe_protocol import DataFrameXchg as DataFrameXchg
from pandas.core.interchange.utils import maybe_rechunk as maybe_rechunk
from typing import ClassVar

TYPE_CHECKING: bool

class PandasDataFrameXchg(pandas.core.interchange.dataframe_protocol.DataFrame):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc._abc_data] = ...
    def __init__(self, df: DataFrame, allow_copy: bool = ...) -> None:
        """
        Constructor - an instance of this (private) class is returned from
        `pd.DataFrame.__dataframe__`.
        """
    def __dataframe__(self, nan_as_null: bool = ..., allow_copy: bool = ...) -> PandasDataFrameXchg: ...
    def num_columns(self) -> int: ...
    def num_rows(self) -> int: ...
    def num_chunks(self) -> int: ...
    def column_names(self) -> Index: ...
    def get_column(self, i: int) -> PandasColumn: ...
    def get_column_by_name(self, name: str) -> PandasColumn: ...
    def get_columns(self) -> list[PandasColumn]: ...
    def select_columns(self, indices: Sequence[int]) -> PandasDataFrameXchg: ...
    def select_columns_by_name(self, names: list[str]) -> PandasDataFrameXchg: ...
    def get_chunks(self, n_chunks: int | None) -> Iterable[PandasDataFrameXchg]:
        """
        Return an iterator yielding the chunks.
        """
    @property
    def metadata(self): ...
