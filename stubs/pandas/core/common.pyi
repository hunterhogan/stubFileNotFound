from collections.abc import (
    Collection,
    Iterable,
)

from pandas._typing import T
from typing import Any

def flatten(line: Any) -> None: ...
def consensus_name_attr(objs: Any): ...
def is_bool_indexer(key: Any) -> bool: ...
def cast_scalar_indexer(val: Any): ...
def not_none(*args): ...
def any_none(*args): ...
def all_none(*args): ...
def any_not_none(*args): ...
def all_not_none(*args): ...
def count_not_none(*args): ...
def asarray_tuplesafe(values: Any, dtype: Any=None): ...
def index_labels_to_array(labels: Any, dtype: Any=None): ...
def maybe_make_list(obj: Any): ...
def maybe_iterable_to_list(obj: Iterable[T] | T) -> Collection[T] | T: ...
def is_null_slice(obj: Any): ...
def is_true_slices(line: Any): ...
def is_full_slice(obj: Any, line: Any): ...
def get_callable_name(obj: Any): ...
def apply_if_callable(maybe_callable: Any, obj: Any, **kwargs): ...
def standardize_mapping(into: Any): ...
def random_state(state: Any=None): ...
def pipe(obj: Any, func: Any, *args, **kwargs): ...
def get_rename_function(mapper: Any): ...
