from typing import Any, TypeVar

import numpy as np
from pandas.core.indexes.api import Index
from typing_extensions import TypeAlias

from pandas._libs.indexing import _NDFrameIndexerBase
from pandas._typing import (
    MaskType,
    Scalar,
    ScalarT,
)

_IndexSliceTuple: TypeAlias = tuple[
    Index[Any] | MaskType | Scalar | list[ScalarT] | slice | tuple[Scalar, ...], ...
]

_IndexSliceUnion: TypeAlias = slice | _IndexSliceTuple[Any]

_IndexSliceUnionT = TypeVar("_IndexSliceUnionT", bound=_IndexSliceUnion)

class _IndexSlice:
    def __getitem__(self, arg: _IndexSliceUnionT) -> _IndexSliceUnionT: ...

IndexSlice: _IndexSlice

class IndexingMixin:
    @property
    def iloc(self) -> _iLocIndexer: ...
    @property
    def loc(self) -> _LocIndexer: ...
    @property
    def at(self) -> _AtIndexer: ...
    @property
    def iat(self) -> _iAtIndexer: ...

class _NDFrameIndexer(_NDFrameIndexerBase):
    axis = ...
    def __call__(self, axis: Any=...) -> Any: ...
    def __getitem__(self, key: Any) -> Any: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...

class _LocationIndexer(_NDFrameIndexer):
    def __getitem__(self, key: Any) -> Any: ...

class _LocIndexer(_LocationIndexer): ...
class _iLocIndexer(_LocationIndexer): ...

class _ScalarAccessIndexer(_NDFrameIndexerBase):
    def __getitem__(self, key: Any) -> Any: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...

class _AtIndexer(_ScalarAccessIndexer): ...
class _iAtIndexer(_ScalarAccessIndexer): ...

def convert_to_index_sliceable(obj: Any, key: Any) -> Any: ...
def check_bool_indexer(index: Index[Any], key: Any) -> np.ndarray[Any, Any]: ...
def convert_missing_indexer(indexer: Any) -> Any: ...
def convert_from_missing_indexer_tuple(indexer: Any, axes: Any) -> Any: ...
def maybe_convert_ix(*args: Any) -> Any: ...
def is_nested_tuple(tup: Any, labels: Any) -> bool: ...
def is_label_like(key: Any) -> bool: ...
def need_slice(obj: Any) -> bool: ...
