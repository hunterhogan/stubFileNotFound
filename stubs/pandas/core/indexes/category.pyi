from collections.abc import (
    Hashable,
    Iterable,
)
from typing import Literal

import numpy as np
from pandas.core import accessor
from pandas.core.indexes.base import Index
from pandas.core.indexes.extension import ExtensionIndex
from typing_extensions import Self

from pandas._typing import (
    S1,
    DtypeArg,
)

class CategoricalIndex(ExtensionIndex[S1], accessor.PandasDelegate):
    codes: np.ndarray = ...
    categories: Index = ...
    def __new__(
        cls,
        data: Iterable[S1] = None,
        categories=None,
        ordered=None,
        dtype=None,
        copy: bool = False,
        name: Hashable = None,
    ) -> Self: ...
    def equals(self, other): ...
    @property
    def inferred_type(self) -> str: ...
    @property
    def values(self): ...
    def __contains__(self, key) -> bool: ...
    def __array__(
        self, dtype: DtypeArg = None, copy: bool | None = None
    ) -> np.ndarray: ...
    def astype(self, dtype: DtypeArg, copy: bool = True) -> Index: ...
    def fillna(self, value=None): ...
    @property
    def is_unique(self) -> bool: ...
    @property
    def is_monotonic_increasing(self) -> bool: ...
    @property
    def is_monotonic_decreasing(self) -> bool: ...
    def unique(self, level=None): ...
    def duplicated(self, keep: Literal["first", "last", False] = 'first'): ...
    def where(self, cond, other=None): ...
    def reindex(self, target, method=None, level=None, limit=None, tolerance=None): ...
    def get_indexer(self, target, method=None, limit=None, tolerance=None): ...
    def get_indexer_non_unique(self, target): ...
    def delete(self, loc): ...
    def insert(self, loc, item): ...
