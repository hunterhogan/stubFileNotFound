from collections.abc import Hashable, Iterable
from pandas._typing import DtypeArg, S1
from pandas.core import accessor
from pandas.core.indexes.base import Index
from pandas.core.indexes.extension import ExtensionIndex
from typing import Any, final
from typing_extensions import Self
import numpy as np

class CategoricalIndex(ExtensionIndex[S1], accessor.PandasDelegate):
    codes: np.ndarray[Any, Any] = ...
    categories: Index[Any] = ...
    def __new__(
        cls,
        data: Iterable[S1] = None,
        categories: Any=None,
        ordered: Any=None,
        dtype: Any=None,
        copy: bool = False,
        name: Hashable = None,
    ) -> Self: ...
    def equals(self, other: Any) -> Any: ...
    @property
    def inferred_type(self) -> str: ...
    @property
    def values(self) -> Any: ...
    def __contains__(self, key: Any) -> bool: ...
    def __array__(
        self, dtype: DtypeArg = None, copy: bool | None = None
    ) -> np.ndarray[Any, Any]: ...
    @property
    def is_unique(self) -> bool: ...
    @property
    def is_monotonic_increasing(self) -> bool: ...
    @property
    def is_monotonic_decreasing(self) -> bool: ...
    def unique(self, level: Any=None) -> Any: ...
    def reindex(self, target: Any, method: Any=None, level: Any=None, limit: Any=None, tolerance: Any=None) -> Any: ...
    @final
    def get_indexer(self, target: Any, method: Any=None, limit: Any=None, tolerance: Any=None) -> Any: ...
    def get_indexer_non_unique(self, target: Any) -> Any: ...
    def delete(self, loc: Any) -> Any: ...
    def insert(self, loc: Any, item: Any) -> Any: ...
