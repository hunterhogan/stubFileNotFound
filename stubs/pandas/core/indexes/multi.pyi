from collections.abc import (
    Callable,
    Hashable,
    Iterable,
    Sequence,
)
from typing import (
    final,
    overload,
)

import numpy as np
import pandas as pd
from pandas.core.indexes.base import Index
from typing_extensions import Self

from pandas._typing import (
    AnyAll,
    Axes,
    DropKeep,
    Dtype,
    DtypeArg,
    HashableT,
    Level,
    MaskType,
    NaPosition,
    SequenceNotStr,
    np_ndarray_anyint,
    np_ndarray_bool,
)
from typing import Any

class MultiIndex(Index):
    def __new__(
        cls,
        levels: Sequence[SequenceNotStr[Hashable]] = None,
        codes: Sequence[Sequence[int]] = None,
        sortorder: int | None = None,
        names: SequenceNotStr[Hashable] = None,
        copy: bool = False,
        name: SequenceNotStr[Hashable] = None,
        verify_integrity: bool = True,
    ) -> Self: ...
    @classmethod
    def from_arrays(
        cls,
        arrays: Sequence[Axes],
        sortorder: int | None = None,
        names: SequenceNotStr[Hashable] = ...,
    ) -> Self: ...
    @classmethod
    def from_tuples(
        cls,
        tuples: Iterable[tuple[Hashable, ...]],
        sortorder: int | None = None,
        names: SequenceNotStr[Hashable] = None,
    ) -> Self: ...
    @classmethod
    def from_product(
        cls,
        iterables: Sequence[SequenceNotStr[Hashable] | pd.Series | pd.Index[Any] | range],
        sortorder: int | None = None,
        names: SequenceNotStr[Hashable] = ...,
    ) -> Self: ...
    @classmethod
    def from_frame(
        cls,
        df: pd.DataFrame,
        sortorder: int | None = None,
        names: SequenceNotStr[Hashable] = None,
    ) -> Self: ...
    @property
    def shape(self) -> Any: ...
    @property  # Should be read-only
    def levels(self) -> list[Index]: ...
    def set_levels(self, levels: Any, *, level: Any=None, verify_integrity: bool = True) -> Any: ...
    @property
    def codes(self) -> Any: ...
    def set_codes(self, codes: Any, *, level: Any=None, verify_integrity: bool = True) -> Any: ...
    def copy(  # type: ignore[override]  # pyright: ignore[reportIncompatibleMethodOverride] # pyrefly: ignore
        self, names: SequenceNotStr[Hashable] = None, deep: bool = False
    ) -> Self: ...
    def view(self, cls: Any=None) -> Any: ...
    def __contains__(self, key: Any) -> bool: ...
    @property
    def dtype(self) -> np.dtype: ...
    @property
    def dtypes(self) -> pd.Series[Dtype]: ...
    def memory_usage(self, deep: bool = False) -> int: ...
    @property
    def nbytes(self) -> int: ...
    def format(
        self,
        name: bool | None = None,
        formatter: Callable[..., Any] | None = None,
        na_rep: str | None = None,
        names: bool = False,
        space: int = 2,
        sparsify: bool | None = None,
        adjoin: bool = True,
    ) -> list[Any]: ...
    def __len__(self) -> int: ...
    @property
    def values(self) -> Any: ...
    @property
    def is_monotonic_increasing(self) -> bool: ...
    @property
    def is_monotonic_decreasing(self) -> bool: ...
    def duplicated(self, keep: DropKeep = 'first') -> Any: ...
    def dropna(self, how: AnyAll = 'any') -> Self: ...
    def get_level_values(self, level: str | int) -> Index[Any]: ...
    def unique(self, level: Any=None) -> Any: ...
    def to_frame(  # pyrefly: ignore
        self,
        index: bool = True,
        name: list[HashableT] = ...,
        allow_duplicates: bool = False,
    ) -> pd.DataFrame: ...
    def to_flat_index(self) -> Any: ...
    def remove_unused_levels(self) -> Any: ...
    @property
    def nlevels(self) -> int: ...
    @property
    def levshape(self) -> Any: ...
    def __reduce__(self) -> Any: ...
    @overload  # type: ignore[override]
    def __getitem__(
        self,
        idx: slice | np_ndarray_anyint | Sequence[int] | Index[Any] | MaskType,
    ) -> Self: ...
    @overload
    def __getitem__(  # pyright: ignore[reportIncompatibleMethodOverride]
        self, key: int
    ) -> tuple[Any, ...]: ...
    def take(
        self, indices: Any, axis: int = 0, allow_fill: bool = True, fill_value: Any=None, **kwargs: Any
    ) -> Any: ...
    def argsort(self, *args: Any, na_position: NaPosition = 'last', **kwargs: Any) -> Any: ...
    def append(self, other: Any) -> Any: ...  # pyrefly: ignore
    def repeat(self, repeats: Any, axis: Any=None) -> Any: ...
    @final
    def where(self, cond: Any, other: Any=None) -> None: ...
    def drop(self, codes: Any, level: Any=None, errors: str = 'raise') -> Self: ...  # type: ignore[override] # pyright: ignore[reportIncompatibleMethodOverride]
    def swaplevel(self, i: int = -2, j: int = -1) -> Any: ...
    def reorder_levels(self, order: Any) -> Any: ...
    def sortlevel(
        self,
        level: Level | Sequence[Level] = 0,
        ascending: bool = True,
        sort_remaining: bool = True,
        na_position: NaPosition = 'first',
    ) -> Any: ...
    @final
    def get_indexer(self, target: Any, method: Any=None, limit: Any=None, tolerance: Any=None) -> Any: ...
    def get_indexer_non_unique(self, target: Any) -> Any: ...
    def reindex(self, target: Any, method: Any=None, level: Any=None, limit: Any=None, tolerance: Any=None) -> Any: ...
    def get_slice_bound(
        self, label: Hashable | Sequence[Hashable], side: str
    ) -> int: ...
    def get_loc_level(self, key: Any, level: Any=0, drop_level: bool = True) -> Any: ...
    def get_locs(self, seq: Any) -> Any: ...
    def truncate(self, before: Any=None, after: Any=None) -> Any: ...
    def equals(self, other: Any) -> bool: ...
    def equal_levels(self, other: Any) -> Any: ...
    @final
    def union(self, other: Any, sort: Any=None) -> Any: ...  # pyrefly: ignore
    @final
    def intersection(  # pyright: ignore[reportIncompatibleMethodOverride]
        self, other: list[Any] | Self, sort: bool | None = False
    ) -> Any: ...
    @final
    def difference(self, other: Any, sort: Any=None) -> Any: ...
    def astype(self, dtype: DtypeArg, copy: bool = True) -> Self: ...
    def insert(self, loc: Any, item: Any) -> Any: ...
    def delete(self, loc: Any) -> Any: ...
    def isin(self, values: Any, level: Any=None) -> np_ndarray_bool: ...
