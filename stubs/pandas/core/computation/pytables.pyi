from typing import Any

from pandas.core.computation import (
    expr as expr,
    ops as ops,
    scope as _scope,
)
from pandas.core.computation.expr import BaseExprVisitor as BaseExprVisitor
from pandas.core.indexes.base import Index

class PyTablesScope(_scope.Scope):
    queryables: dict[str, Any]
    def __init__(
        self,
        level: int,
        global_dict: Any=None,
        local_dict: Any=None,
        queryables: dict[str, Any] | None = None,
    ) -> None: ...

class Term(ops.Term):
    env = ...
    def __new__(cls, name: Any, env: Any, side: Any=None, encoding: Any=None): ...
    def __init__(self, name: Any, env: PyTablesScope, side: Any=None, encoding: Any=None) -> None: ...
    @property
    def value(self): ...
    @value.setter
    def value(self, new_value: Any) -> None: ...

class Constant(Term):
    def __init__(self, name: Any, env: PyTablesScope, side: Any=None, encoding: Any=None) -> None: ...

class BinOp(ops.BinOp):
    op: str
    queryables: dict[str, Any]
    encoding = ...
    condition = ...
    def __init__(
        self, op: str, lhs: Any, rhs: Any, queryables: dict[str, Any], encoding: Any
    ) -> None: ...
    def prune(self, klass: Any): ...
    def conform(self, rhs: Any): ...
    @property
    def is_valid(self) -> bool: ...
    @property
    def is_in_table(self) -> bool: ...
    @property
    def kind(self): ...
    @property
    def meta(self): ...
    @property
    def metadata(self): ...
    def generate(self, v: Any) -> str: ...
    def convert_value(self, v: Any) -> TermValue: ...
    def convert_values(self) -> None: ...

class FilterBinOp(BinOp):
    filter: tuple[Any, Any, Index] | None = ...
    def invert(self): ...
    def format(self): ...
    def generate_filter_op(self, invert: bool = False): ...

class JointFilterBinOp(FilterBinOp):
    def format(self) -> None: ...

class ConditionBinOp(BinOp):
    def invert(self) -> None: ...
    def format(self): ...
    condition = ...

class JointConditionBinOp(ConditionBinOp):
    condition = ...

class UnaryOp(ops.UnaryOp):
    def prune(self, klass: Any): ...

class PyTablesExprVisitor(BaseExprVisitor):
    const_type = ...
    term_type = ...
    def __init__(self, env: Any, engine: Any, parser: Any, **kwargs) -> None: ...
    def visit_UnaryOp(self, node: Any, **kwargs): ...
    def visit_Index(self, node: Any, **kwargs): ...
    def visit_Assign(self, node: Any, **kwargs): ...
    def visit_Subscript(self, node: Any, **kwargs): ...
    def visit_Attribute(self, node: Any, **kwargs): ...
    def translate_In(self, op: Any): ...

class PyTablesExpr(expr.Expr):
    encoding = ...
    condition = ...
    filter = ...
    terms = ...
    expr = ...
    def __init__(
        self,
        where: Any,
        queryables: dict[str, Any] | None = None,
        encoding: Any=None,
        scope_level: int = 0,
    ) -> None: ...
    def evaluate(self): ...

class TermValue:
    value = ...
    converted = ...
    kind = ...
    def __init__(self, value: Any, converted: Any, kind: str) -> None: ...
    def tostring(self, encoding: Any) -> str: ...
