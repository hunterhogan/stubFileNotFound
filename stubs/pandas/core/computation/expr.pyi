import ast

from pandas.core.computation.ops import Term as Term
from pandas.core.computation.scope import Scope as Scope
from typing import Any

class BaseExprVisitor(ast.NodeVisitor):
    const_type = ...
    term_type = ...
    binary_ops = ...
    binary_op_nodes = ...
    binary_op_nodes_map = ...
    unary_ops = ...
    unary_op_nodes = ...
    unary_op_nodes_map = ...
    rewrite_map = ...
    env = ...
    engine = ...
    parser = ...
    preparser = ...
    assigner = ...
    def __init__(self, env: Any, engine: Any, parser: Any, preparser: Any=...) -> None: ...
    def visit(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_Module(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_Expr(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_BinOp(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_Div(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_UnaryOp(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_Name(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_NameConstant(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_Num(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_Constant(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_Str(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_List(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_Index(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_Subscript(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_Slice(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_Assign(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_Attribute(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_Call(self, node: Any, side: Any=None, **kwargs: Any) -> Any: ...
    def translate_In(self, op: Any) -> Any: ...
    def visit_Compare(self, node: Any, **kwargs: Any) -> Any: ...
    def visit_BoolOp(self, node: Any, **kwargs: Any) -> Any: ...

class Expr:
    env: Scope
    engine: str
    parser: str
    expr = ...
    terms = ...
    def __init__(
        self,
        expr: Any,
        engine: str = 'numexpr',
        parser: str = 'pandas',
        env: Scope | None = None,
        level: int = 0,
    ) -> None: ...
    @property
    def assigner(self) -> Any: ...
    def __call__(self) -> Any: ...
    def __len__(self) -> int: ...
    def parse(self) -> Any: ...
    @property
    def names(self) -> Any: ...
