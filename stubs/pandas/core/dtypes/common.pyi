from typing import Any

import pandas as pd
from pandas._typing import ArrayLike, Dtype, DtypeObj, npt
from pandas.api.extensions import ExtensionDtype
from pandas.core.dtypes.inference import is_bool as is_bool
from pandas.core.dtypes.inference import is_complex as is_complex
from pandas.core.dtypes.inference import is_dict_like as is_dict_like
from pandas.core.dtypes.inference import is_file_like as is_file_like
from pandas.core.dtypes.inference import is_float as is_float
from pandas.core.dtypes.inference import is_hashable as is_hashable
from pandas.core.dtypes.inference import is_integer as is_integer
from pandas.core.dtypes.inference import is_iterator as is_iterator
from pandas.core.dtypes.inference import is_list_like as is_list_like
from pandas.core.dtypes.inference import is_named_tuple as is_named_tuple
from pandas.core.dtypes.inference import is_number as is_number
from pandas.core.dtypes.inference import is_re as is_re
from pandas.core.dtypes.inference import is_re_compilable as is_re_compilable
from pandas.core.dtypes.inference import is_scalar as is_scalar
from typing_extensions import TypeAlias

_ArrayOrDtype: TypeAlias = (
    ArrayLike | npt.DTypeLike | pd.Series | pd.DataFrame | pd.Index[Any] | ExtensionDtype
)

def is_object_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def is_datetime64_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def is_timedelta64_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def is_dtype_equal(source: Dtype, target: Dtype) -> bool: ...
def is_string_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def is_integer_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def is_signed_integer_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def is_unsigned_integer_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def is_datetime64_any_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def is_datetime64_ns_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def is_timedelta64_ns_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def is_numeric_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def is_float_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def is_bool_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def is_extension_array_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def is_complex_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def is_any_real_numeric_dtype(arr_or_dtype: _ArrayOrDtype) -> bool: ...
def pandas_dtype(dtype: object) -> DtypeObj: ...
