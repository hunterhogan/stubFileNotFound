from enum import Enum
from typing import (
    Any,
    final,
    overload,
)

from pandas.core.arrays import (
    ExtensionArray,
    ExtensionOpsMixin,
)
from typing_extensions import Self

from pandas._typing import (
    NpDtype,
    ScalarIndexer,
    SequenceIndexer,
    np_1darray,
)

@final
class ellipsis(Enum):
    Ellipsis = "..."

class SparseArray(ExtensionArray, ExtensionOpsMixin):
    def __init__(
        self,
        data: Any,
        sparse_index: Any=None,
        fill_value: Any=None,
        kind: str = 'integer',
        dtype: Any=None,
        copy: bool = False,
    ) -> None: ...
    @classmethod
    def from_spmatrix(cls, data: Any) -> Any: ...
    def __array__(
        self, dtype: NpDtype | None = None, copy: bool | None = None
    ) -> np_1darray: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    @property
    def sp_index(self) -> Any: ...
    @property
    def sp_values(self) -> Any: ...
    @property
    def dtype(self) -> Any: ...
    @property
    def fill_value(self) -> Any: ...
    @fill_value.setter
    def fill_value(self, value: Any) -> None: ...
    @property
    def kind(self) -> str: ...
    @property
    def nbytes(self) -> int: ...
    @property
    def density(self) -> Any: ...
    @property
    def npoints(self) -> int: ...
    def isna(self) -> Any: ...
    def fillna(self, value: Any=None, method: Any=None, limit: Any=None) -> Any: ...
    def shift(self, periods: int = 1, fill_value: Any=None) -> Any: ...
    def unique(self) -> Any: ...
    def value_counts(self, dropna: bool = True) -> Any: ...
    @overload
    def __getitem__(self, key: ScalarIndexer) -> Any: ...
    @overload
    def __getitem__(
        self,
        key: SequenceIndexer | tuple[int | ellipsis, ...],
    ) -> Self: ...
    def copy(self) -> Any: ...
    def astype(self, dtype: Any=None, copy: bool = True) -> Any: ...
    def map(self, mapper: Any) -> Any: ...
    def to_dense(self) -> Any: ...
    def nonzero(self) -> Any: ...
    def all(self, axis: Any=None, *args: Any, **kwargs: Any) -> Any: ...
    def any(self, axis: int = 0, *args: Any, **kwargs: Any) -> Any: ...
    def sum(self, axis: int = 0, *args: Any, **kwargs: Any) -> Any: ...
    def cumsum(self, axis: int = 0, *args: Any, **kwargs: Any) -> Any: ...
    def mean(self, axis: int = 0, *args: Any, **kwargs: Any) -> Any: ...
    @property
    def T(self) -> Any: ...
    def __abs__(self) -> Any: ...
