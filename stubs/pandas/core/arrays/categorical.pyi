from collections.abc import Callable, Sequence
from pandas import Series
from pandas._typing import (
	ArrayLike, Dtype, ListLike, np_ndarray_bool, np_ndarray_int, Ordered, PositionalIndexerTuple, Scalar, ScalarIndexer,
	SequenceIndexer, TakeIndexer)
from pandas.core.accessor import PandasDelegate as PandasDelegate
from pandas.core.arrays.base import ExtensionArray as ExtensionArray
from pandas.core.base import NoNewAttributesMixin as NoNewAttributesMixin
from pandas.core.dtypes.dtypes import CategoricalDtype as CategoricalDtype
from pandas.core.indexes.base import Index
from typing import Any, overload
from typing_extensions import Self
import numpy as np

def contains(cat: Any, key: Any, container: Any) -> Any: ...

class Categorical(ExtensionArray):
    __array_priority__: int = ...
    def __init__(
        self,
        values: ListLike,
        categories: Any=None,
        ordered: bool | None = None,
        dtype: CategoricalDtype | None = None,
        fastpath: bool = ...,
    ) -> None: ...
    @property
    def categories(self) -> Any: ...
    @property
    def ordered(self) -> Ordered: ...
    @property
    def dtype(self) -> CategoricalDtype: ...
    def astype(self, dtype: Dtype, copy: bool = True) -> ArrayLike: ...
    def size(self) -> int: ...
    def tolist(self) -> list[Scalar]: ...
    to_list = ...
    @classmethod
    def from_codes(
        cls,
        codes: Sequence[int],
        categories: Index[Any] | None = None,
        ordered: bool | None = None,
        dtype: CategoricalDtype | None = None,
        fastpath: bool = ...,
    ) -> Categorical: ...
    @property
    def codes(self) -> np_ndarray_int: ...
    def set_ordered(self, value: Any) -> Categorical: ...
    def as_ordered(self) -> Categorical: ...
    def as_unordered(self) -> Categorical: ...
    def set_categories(
        self,
        new_categories: Any,
        ordered: bool | None = False,
        rename: bool = False,
    ) -> Categorical: ...
    def rename_categories(self, new_categories: Any) -> Categorical: ...
    def reorder_categories(
        self, new_categories: Any, ordered: bool | None = None
    ) -> Categorical: ...
    def add_categories(self, new_categories: Any) -> Categorical: ...
    def remove_categories(self, removals: Any) -> Categorical: ...
    def remove_unused_categories(self) -> Categorical: ...
    def map(self, mapper: Any) -> Any: ...
    def __eq__(self, other: Any) -> bool: ...
    def __ne__(self, other: Any) -> bool: ...
    def __lt__(self, other: Any) -> bool: ...
    def __gt__(self, other: Any) -> bool: ...
    def __le__(self, other: Any) -> bool: ...
    def __ge__(self, other: Any) -> bool: ...
    @property
    def shape(self) -> Any: ...
    def shift(self, periods: Any=1, fill_value: Any=None) -> Any: ...
    def __array__(self, dtype: Any=None) -> np.ndarray[Any, Any]: ...
    def __array_ufunc__(self, ufunc: Any, method: Any, *inputs: Any, **kwargs: Any) -> Any: ...
    @property
    def T(self) -> Any: ...
    @property
    def nbytes(self) -> int: ...
    def memory_usage(self, deep: bool = False) -> Any: ...
    def searchsorted(self, value: Any, side: str = 'left', sorter: Any=None) -> Any: ...
    def isna(self) -> np_ndarray_bool: ...
    def isnull(self) -> np_ndarray_bool: ...
    def notna(self) -> np_ndarray_bool: ...
    def notnull(self) -> np_ndarray_bool: ...
    def dropna(self) -> Any: ...
    def value_counts(self, dropna: bool = True) -> Any: ...
    def check_for_ordered(self, op: Any) -> None: ...
    def argsort(self, *, ascending: bool = True, kind: str = 'quicksort', **kwargs: Any) -> Any: ...
    def sort_values(
        self, *, inplace: bool = False, ascending: bool = True, na_position: str = 'last'
    ) -> Any: ...
    def view(self, dtype: Any=None) -> Any: ...
    def fillna(self, value: Any=None, method: Any=None, limit: Any=None) -> Any: ...
    def take(
        self, indexer: TakeIndexer, *, allow_fill: bool = False, fill_value: Any=None
    ) -> Categorical: ...
    def __len__(self) -> int: ...
    def __iter__(self) -> Any: ...
    def __contains__(self, key: Any) -> bool: ...
    @overload
    def __getitem__(self, key: ScalarIndexer) -> Any: ...
    @overload
    def __getitem__(
        self,
        key: SequenceIndexer | PositionalIndexerTuple,
    ) -> Self: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def min(self, *, skipna: bool = True) -> Any: ...
    def max(self, *, skipna: bool = True) -> Any: ...
    def unique(self) -> Any: ...
    def equals(self, other: Any) -> Any: ...
    def describe(self) -> Any: ...
    def repeat(self, repeats: Any, axis: Any=0) -> Any: ...
    def isin(self, values: Any) -> Any: ...

class CategoricalAccessor(PandasDelegate, NoNewAttributesMixin):
    def __init__(self, data: Any) -> None: ...
    @property
    def codes(self) -> Series[int]: ...
    @property
    def categories(self) -> Index[Any]: ...
    @property
    def ordered(self) -> bool | None: ...
    def rename_categories(
        self, new_categories: ListLike | dict[Any, Any] | Callable[[Any], Any]
    ) -> Series: ...
    def reorder_categories(
        self,
        new_categories: ListLike,
        ordered: bool = ...,
    ) -> Series: ...
    def add_categories(self, new_categories: Scalar | ListLike) -> Series: ...
    def remove_categories(self, removals: Scalar | ListLike) -> Series: ...
    def remove_unused_categories(self) -> Series: ...
    def set_categories(
        self,
        new_categories: ListLike,
        ordered: bool | None = False,
        rename: bool = False,
    ) -> Series: ...
    def as_ordered(self) -> Series: ...
    def as_unordered(self) -> Series: ...
