from collections.abc import Sequence
from datetime import timedelta

from pandas.core.arrays.datetimelike import (
    DatetimeLikeArrayMixin,
    TimelikeOps,
)
from typing import Any

class TimedeltaArray(DatetimeLikeArrayMixin, TimelikeOps):
    __array_priority__: int = ...
    @property
    def dtype(self): ...
    def __init__(self, values: Any, dtype: Any=None, freq: Any=..., copy: bool = False) -> None: ...
    def astype(self, dtype: Any, copy: bool = True): ...
    def sum(
        self,
        *,
        axis=None,
        dtype=None,
        out=None,
        keepdims: bool = False,
        initial=None,
        skipna: bool = True,
        min_count: int = 0,
    ): ...
    def std(
        self,
        *,
        axis=None,
        dtype=None,
        out=None,
        ddof: int = 1,
        keepdims: bool = False,
        skipna: bool = True,
    ): ...
    def median(
        self,
        *,
        axis=None,
        out=...,
        overwrite_input: bool = ...,
        keepdims: bool = ...,
        skipna: bool = True,
    ): ...
    def __mul__(self, other: Any): ...
    __rmul__ = ...
    def __truediv__(self, other: Any): ...
    def __rtruediv__(self, other: Any): ...
    def __floordiv__(self, other: Any): ...
    def __rfloordiv__(self, other: Any): ...
    def __mod__(self, other: Any): ...
    def __rmod__(self, other: Any): ...
    def __divmod__(self, other: Any): ...
    def __rdivmod__(self, other: Any): ...
    def __neg__(self): ...
    def __pos__(self): ...
    def __abs__(self): ...
    def total_seconds(self) -> int: ...
    def to_pytimedelta(self) -> Sequence[timedelta]: ...
    days: int = ...
    seconds: int = ...
    microseconds: int = ...
    nanoseconds: int = ...
    @property
    def components(self) -> int: ...
