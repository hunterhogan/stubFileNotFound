import numpy as np
from pandas.core.arrays.masked import BaseMaskedArray as BaseMaskedArray

from pandas._libs.missing import NAType
from pandas._typing import type_t

from pandas.core.dtypes.base import ExtensionDtype as ExtensionDtype
from typing import Any

class BooleanDtype(ExtensionDtype):
    @property
    def na_value(self) -> NAType: ...
    @classmethod
    def construct_array_type(cls) -> type_t[BooleanArray]: ...

class BooleanArray(BaseMaskedArray):
    def __init__(
        self, values: np.ndarray[Any, Any], mask: np.ndarray[Any, Any], copy: bool = False
    ) -> None: ...
    @property
    def dtype(self) -> Any: ...
    def __array_ufunc__(self, ufunc: Any, method: Any, *inputs: Any, **kwargs: Any) -> Any: ...
    def __setitem__(self, key: Any, value: Any) -> None: ...
    def astype(self, dtype: Any, copy: bool = True) -> Any: ...
    def any(self, *, skipna: bool = True, **kwargs: Any) -> Any: ...
    def all(self, *, skipna: bool = True, **kwargs: Any) -> Any: ...
