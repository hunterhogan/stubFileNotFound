import _cython_3_0_11
from _typeshed import Incomplete
from typing import ClassVar

__pyx_unpickle_NDArrayBacked: _cython_3_0_11.cython_function_or_method
__test__: dict

class NDArrayBacked:
    _concat_same_type: ClassVar[method] = ...
    _simple_new: ClassVar[method] = ...
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    T: Incomplete
    _dtype: Incomplete
    _ndarray: Incomplete
    nbytes: Incomplete
    ndim: Incomplete
    shape: Incomplete
    size: Incomplete
    def __init__(self, *args, **kwargs) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _from_backing_data(self, *args, **kwargs):
        """
        Construct a new ExtensionArray `new_array` with `arr` as its _ndarray.

        This should round-trip:
            self == self._from_backing_data(self._ndarray)
        """
    def copy(self, *args, **kwargs): ...
    def delete(self, *args, **kwargs): ...
    def ravel(self, *args, **kwargs): ...
    def repeat(self, *args, **kwargs): ...
    def reshape(self, *args, **kwargs): ...
    def swapaxes(self, *args, **kwargs): ...
    def transpose(self, *args, **kwargs): ...
    def __len__(self) -> int:
        """Return len(self)."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...
