import _cython_3_0_11
import pandas._libs.algos as algos
import pandas._libs.hashtable as _hash
from _typeshed import Incomplete
from typing import ClassVar

_SIZE_CUTOFF: int
__pyx_unpickle_BaseMultiIndexCodesEngine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_BoolEngine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_Complex128Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_Complex64Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_DatetimeEngine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_ExtensionEngine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_Float32Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_Float64Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_IndexEngine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_Int16Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_Int32Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_Int64Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_Int8Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_MaskedBoolEngine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_MaskedComplex128Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_MaskedComplex64Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_MaskedFloat32Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_MaskedFloat64Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_MaskedIndexEngine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_MaskedInt16Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_MaskedInt32Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_MaskedInt64Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_MaskedInt8Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_MaskedUInt16Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_MaskedUInt32Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_MaskedUInt64Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_MaskedUInt8Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_ObjectEngine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_PeriodEngine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_SharedEngine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_TimedeltaEngine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_UInt16Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_UInt32Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_UInt64Engine: _cython_3_0_11.cython_function_or_method
__pyx_unpickle_UInt8Engine: _cython_3_0_11.cython_function_or_method
__test__: dict
multiindex_nulls_shift: int

class BaseMultiIndexCodesEngine:
    def __init__(self, *args, **kwargs) -> None:
        """
        Parameters
        ----------
        levels : list-like of numpy arrays
            Levels of the MultiIndex.
        labels : list-like of numpy arrays of integer dtype
            Labels of the MultiIndex.
        offsets : numpy array of uint64 dtype
            Pre-calculated offsets, one for each level of the index.
        """
    def _codes_to_ints(self, *args, **kwargs): ...
    def _extract_level_codes(self, *args, **kwargs):
        """
        Map the requested list of (tuple) keys to their integer representations
        for searching in the underlying integer index.

        Parameters
        ----------
        target : MultiIndex

        Returns
        ------
        int_keys : 1-dimensional array of dtype uint64 or object
            Integers representing one combination each
        """
    def get_indexer(self, *args, **kwargs):
        """
        Returns an array giving the positions of each value of `target` in
        `self.values`, where -1 represents a value in `target` which does not
        appear in `self.values`

        Parameters
        ----------
        target : np.ndarray

        Returns
        -------
        np.ndarray[intp_t, ndim=1] of the indexer of `target` into
        `self.values`
        """
    def get_indexer_non_unique(self, *args, **kwargs): ...
    def get_loc(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool:
        """Return bool(key in self)."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class BoolEngine(UInt8Engine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class Complex128Engine(IndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class Complex64Engine(IndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class DatetimeEngine(Int64Engine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def get_loc(self, *args, **kwargs): ...
    def __contains__(self, other) -> bool:
        """Return bool(key in self)."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ExtensionEngine(SharedEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class Float32Engine(IndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class Float64Engine(IndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class IndexEngine:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    is_mapping_populated: Incomplete
    is_monotonic_decreasing: Incomplete
    is_monotonic_increasing: Incomplete
    is_unique: Incomplete
    mapping: Incomplete
    mask: Incomplete
    over_size_threshold: Incomplete
    values: Incomplete
    def __init__(self, *args, **kwargs) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _update_from_sliced(self, *args, **kwargs): ...
    def clear_mapping(self, *args, **kwargs): ...
    def get_indexer(self, *args, **kwargs): ...
    def get_indexer_non_unique(self, *args, **kwargs):
        """
        Return an indexer suitable for taking from a non unique index
        return the labels in the same order as the target
        and a missing indexer into the targets (which correspond
        to the -1 indices in the results

        Returns
        -------
        indexer : np.ndarray[np.intp]
        missing : np.ndarray[np.intp]
        """
    def get_loc(self, *args, **kwargs): ...
    def sizeof(self, *args, **kwargs):
        """ return the sizeof our mapping """
    def __contains__(self, other) -> bool:
        """Return bool(key in self)."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...
    def __sizeof__(self) -> int: ...

class Int16Engine(IndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class Int32Engine(IndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class Int64Engine(IndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class Int8Engine(IndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class MaskedBoolEngine(MaskedUInt8Engine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class MaskedComplex128Engine(MaskedIndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class MaskedComplex64Engine(MaskedIndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class MaskedFloat32Engine(MaskedIndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class MaskedFloat64Engine(MaskedIndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class MaskedIndexEngine(IndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    def __init__(self, *args, **kwargs) -> None:
        """Initialize self.  See help(type(self)) for accurate signature."""
    def _get_data(self, *args, **kwargs): ...
    def _get_mask(self, *args, **kwargs): ...
    def get_indexer(self, *args, **kwargs): ...
    def get_indexer_non_unique(self, *args, **kwargs):
        """
        Return an indexer suitable for taking from a non unique index
        return the labels in the same order as the target
        and a missing indexer into the targets (which correspond
        to the -1 indices in the results

        Returns
        -------
        indexer : np.ndarray[np.intp]
        missing : np.ndarray[np.intp]
        """
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class MaskedInt16Engine(MaskedIndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class MaskedInt32Engine(MaskedIndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class MaskedInt64Engine(MaskedIndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class MaskedInt8Engine(MaskedIndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class MaskedUInt16Engine(MaskedIndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class MaskedUInt32Engine(MaskedIndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class MaskedUInt64Engine(MaskedIndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class MaskedUInt8Engine(MaskedIndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class ObjectEngine(IndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class PeriodEngine(Int64Engine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def get_loc(self, *args, **kwargs): ...
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class TimedeltaEngine(DatetimeEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class UInt16Engine(IndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class UInt32Engine(IndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class UInt64Engine(IndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...

class UInt8Engine(IndexEngine):
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def __reduce__(self): ...
    def __reduce_cython__(self, *args, **kwargs): ...
    def __setstate_cython__(self, *args, **kwargs): ...
