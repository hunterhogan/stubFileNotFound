from collections.abc import Callable
from typing import Any

class CachedProperty:
    def __init__(self, func: Callable) -> None: ...
    def __get__(self, obj: Any, typ: Any): ...
    def __set__(self, obj: Any, value: Any) -> None: ...

# note: this is a lie to make type checkers happy (they special
# case property). cache_readonly uses attribute names similar to
# property (fget) but it does not provide fset and fdel.
cache_readonly = property

class AxisProperty:
    def __init__(self, axis: int = ..., doc: str = ...) -> None: ...
    def __get__(self, obj: Any, typ: Any): ...
    def __set__(self, obj: Any, value: Any) -> None: ...
