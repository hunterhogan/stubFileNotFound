import _cython_3_0_11
import enum
from _typeshed import Incomplete
from pandas.util._exceptions import find_stack_level as find_stack_level
from typing import ClassVar

from collections.abc import Callable

OFFSET_TO_PERIOD_FREQSTR: dict
__pyx_capi__: dict
__reduce_cython__: _cython_3_0_11.cython_function_or_method
__setstate_cython__: _cython_3_0_11.cython_function_or_method
__test__: dict
_period_code_map: dict
abbrev_to_npy_unit: _cython_3_0_11.cython_function_or_method
freq_to_period_freqstr: _cython_3_0_11.cython_function_or_method
periods_per_day: _cython_3_0_11.cython_function_or_method
periods_per_second: _cython_3_0_11.cython_function_or_method

class FreqGroup(enum.Enum):
    __new__: ClassVar[Callable] = ...
    FR_ANN: ClassVar[FreqGroup] = ...
    FR_BUS: ClassVar[FreqGroup] = ...
    FR_DAY: ClassVar[FreqGroup] = ...
    FR_HR: ClassVar[FreqGroup] = ...
    FR_MIN: ClassVar[FreqGroup] = ...
    FR_MS: ClassVar[FreqGroup] = ...
    FR_MTH: ClassVar[FreqGroup] = ...
    FR_NS: ClassVar[FreqGroup] = ...
    FR_QTR: ClassVar[FreqGroup] = ...
    FR_SEC: ClassVar[FreqGroup] = ...
    FR_UND: ClassVar[FreqGroup] = ...
    FR_US: ClassVar[FreqGroup] = ...
    FR_WK: ClassVar[FreqGroup] = ...
    _generate_next_value_: ClassVar[Callable] = ...
    _hashable_values_: ClassVar[list] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _member_type_: ClassVar[type[object]] = ...
    _unhashable_values_: ClassVar[list] = ...
    _unhashable_values_map_: ClassVar[dict] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    _value_repr_: ClassVar[None] = ...
    @classmethod
    def _new_member_(cls, *args, **kwargs):
        """Create and return a new object.  See help(type) for accurate signature."""
    @staticmethod
    def from_period_dtype_code(*args, **kwargs): ...

class NpyDatetimeUnit(enum.Enum):
    __new__: ClassVar[Callable] = ...
    NPY_FR_D: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_GENERIC: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_M: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_W: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_Y: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_as: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_fs: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_h: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_m: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_ms: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_ns: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_ps: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_s: ClassVar[NpyDatetimeUnit] = ...
    NPY_FR_us: ClassVar[NpyDatetimeUnit] = ...
    _generate_next_value_: ClassVar[Callable] = ...
    _hashable_values_: ClassVar[list] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _member_type_: ClassVar[type[object]] = ...
    _unhashable_values_: ClassVar[list] = ...
    _unhashable_values_map_: ClassVar[dict] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    _value_repr_: ClassVar[None] = ...
    @classmethod
    def _new_member_(cls, *args, **kwargs):
        """Create and return a new object.  See help(type) for accurate signature."""

class PeriodDtypeBase:
    __pyx_vtable__: ClassVar[PyCapsule] = ...
    _creso: Incomplete
    _dtype_code: Incomplete
    _freq_group_code: Incomplete
    _freqstr: Incomplete
    _n: Incomplete
    _resolution_obj: Incomplete
    _td64_unit: Incomplete
    @classmethod
    def __init__(cls, *args, **kwargs) -> None:
        """Create and return a new object.  See help(type) for accurate signature."""
    def _get_to_timestamp_base(self, *args, **kwargs):
        """
        Return frequency code group used for base of to_timestamp against
        frequency code.

        Return day freq code against longer freq than day.
        Return second freq code against hour between second.

        Returns
        -------
        int
        """
    def _is_tick_like(self, *args, **kwargs): ...
    def __eq__(self, other: object) -> bool:
        """Return self==value."""
    def __ge__(self, other: object) -> bool:
        """Return self>=value."""
    def __gt__(self, other: object) -> bool:
        """Return self>value."""
    def __hash__(self) -> int:
        """Return hash(self)."""
    def __le__(self, other: object) -> bool:
        """Return self<=value."""
    def __lt__(self, other: object) -> bool:
        """Return self<value."""
    def __ne__(self, other: object) -> bool:
        """Return self!=value."""
    def __reduce__(self): ...

class Resolution(enum.Enum):
    __new__: ClassVar[Callable] = ...
    RESO_DAY: ClassVar[Resolution] = ...
    RESO_HR: ClassVar[Resolution] = ...
    RESO_MIN: ClassVar[Resolution] = ...
    RESO_MS: ClassVar[Resolution] = ...
    RESO_MTH: ClassVar[Resolution] = ...
    RESO_NS: ClassVar[Resolution] = ...
    RESO_QTR: ClassVar[Resolution] = ...
    RESO_SEC: ClassVar[Resolution] = ...
    RESO_US: ClassVar[Resolution] = ...
    RESO_YR: ClassVar[Resolution] = ...
    _generate_next_value_: ClassVar[Callable] = ...
    _hashable_values_: ClassVar[list] = ...
    _member_map_: ClassVar[dict] = ...
    _member_names_: ClassVar[list] = ...
    _member_type_: ClassVar[type[object]] = ...
    _unhashable_values_: ClassVar[list] = ...
    _unhashable_values_map_: ClassVar[dict] = ...
    _use_args_: ClassVar[bool] = ...
    _value2member_map_: ClassVar[dict] = ...
    _value_repr_: ClassVar[None] = ...
    from_attrname: ClassVar[method] = ...
    get_reso_from_freqstr: ClassVar[method] = ...
    @classmethod
    def _new_member_(cls, *args, **kwargs):
        """Create and return a new object.  See help(type) for accurate signature."""
    def __ge__(self, other: object) -> bool: ...
    def __lt__(self, other: object) -> bool: ...
    @property
    def attr_abbrev(self): ...
    @property
    def attrname(self): ...
