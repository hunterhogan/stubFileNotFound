import numpy as np
from _typeshed import Incomplete
from collections.abc import Collection
from matplotlib.axes import Axes
from matplotlib.figure import Figure
from matplotlib.lines import Line2D
from pandas._libs import lib as lib
from pandas._typing import MatplotlibColor as MatplotlibColor
from pandas.core.dtypes.common import is_dict_like as is_dict_like
from pandas.core.dtypes.generic import ABCSeries as ABCSeries
from pandas.core.dtypes.missing import remove_na_arraylike as remove_na_arraylike
from pandas.io.formats.printing import pprint_thing as pprint_thing
from pandas.plotting._matplotlib.core import LinePlot as LinePlot, MPLPlot as MPLPlot
from pandas.plotting._matplotlib.groupby import create_iter_data_given_by as create_iter_data_given_by
from pandas.plotting._matplotlib.style import get_standard_colors as get_standard_colors
from pandas.plotting._matplotlib.tools import create_subplots as create_subplots, flatten_axes as flatten_axes, maybe_adjust_figure as maybe_adjust_figure
from pandas.util._decorators import cache_readonly as cache_readonly
from pandas.util._exceptions import find_stack_level as find_stack_level
from typing import Literal, NamedTuple

def _set_ticklabels(ax: Axes, labels: list[str], is_vertical: bool, **kwargs) -> None:
    """Set the tick labels of a given axis.

    Due to https://github.com/matplotlib/matplotlib/pull/17266, we need to handle the
    case of repeated ticks (due to `FixedLocator`) and thus we duplicate the number of
    labels.
    """

class BoxPlot(LinePlot):
    @property
    def _kind(self) -> Literal['box']: ...
    _layout_type: str
    _valid_return_types: Incomplete
    class BP(NamedTuple):
        ax: Axes
        lines: dict[str, list[Line2D]]
    return_type: Incomplete
    sharex: bool
    sharey: bool
    def __init__(self, data, return_type: str = 'axes', **kwargs) -> None: ...
    @classmethod
    def _plot(cls, ax: Axes, y: np.ndarray, column_num: Incomplete | None = None, return_type: str = 'axes', **kwds): ...
    def _validate_color_args(self, color, colormap): ...
    def _color_attrs(self): ...
    def _boxes_c(self): ...
    def _whiskers_c(self): ...
    def _medians_c(self): ...
    def _caps_c(self): ...
    def _get_colors(self, num_colors: Incomplete | None = None, color_kwds: dict[str, MatplotlibColor] | MatplotlibColor | Collection[MatplotlibColor] | None = 'color') -> None: ...
    def maybe_color_bp(self, bp) -> None: ...
    _return_obj: Incomplete
    def _make_plot(self, fig: Figure) -> None: ...
    def _make_legend(self) -> None: ...
    def _post_plot_logic(self, ax: Axes, data) -> None: ...
    @property
    def orientation(self) -> Literal['horizontal', 'vertical']: ...
    @property
    def result(self): ...

def maybe_color_bp(bp, color_tup, **kwds) -> None: ...
def _grouped_plot_by_column(plotf, data, columns: Incomplete | None = None, by: Incomplete | None = None, numeric_only: bool = True, grid: bool = False, figsize: tuple[float, float] | None = None, ax: Incomplete | None = None, layout: Incomplete | None = None, return_type: Incomplete | None = None, **kwargs): ...
def boxplot(data, column: Incomplete | None = None, by: Incomplete | None = None, ax: Incomplete | None = None, fontsize: int | None = None, rot: int = 0, grid: bool = True, figsize: tuple[float, float] | None = None, layout: Incomplete | None = None, return_type: Incomplete | None = None, **kwds): ...
def boxplot_frame(self, column: Incomplete | None = None, by: Incomplete | None = None, ax: Incomplete | None = None, fontsize: int | None = None, rot: int = 0, grid: bool = True, figsize: tuple[float, float] | None = None, layout: Incomplete | None = None, return_type: Incomplete | None = None, **kwds): ...
def boxplot_frame_groupby(grouped, subplots: bool = True, column: Incomplete | None = None, fontsize: int | None = None, rot: int = 0, grid: bool = True, ax: Incomplete | None = None, figsize: tuple[float, float] | None = None, layout: Incomplete | None = None, sharex: bool = False, sharey: bool = True, **kwds): ...
