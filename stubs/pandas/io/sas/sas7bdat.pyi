import _abc
import collections.abc
import np
import pandas.io.sas.sas_constants as const
import pandas.io.sas.sasreader
import pd as pd
from pandas._libs.byteswap import read_double_with_byteswap as read_double_with_byteswap, read_float_with_byteswap as read_float_with_byteswap, read_uint16_with_byteswap as read_uint16_with_byteswap, read_uint32_with_byteswap as read_uint32_with_byteswap, read_uint64_with_byteswap as read_uint64_with_byteswap
from pandas._libs.sas import Parser as Parser, get_subheader_index as get_subheader_index
from pandas._libs.tslibs.conversion import cast_from_unit_vectorized as cast_from_unit_vectorized
from pandas._libs.tslibs.timestamps import Timestamp as Timestamp, _sas_origin as _sas_origin, _unix_origin as _unix_origin
from pandas.core.dtypes.missing import isna as isna
from pandas.core.frame import DataFrame as DataFrame
from pandas.errors import EmptyDataError as EmptyDataError
from pandas.io.common import get_handle as get_handle
from pandas.io.sas.sasreader import ReaderBase as ReaderBase
from typing import ClassVar

TYPE_CHECKING: bool
def _parse_datetime(sas_datetime: float, unit: str): ...
def _convert_datetimes(sas_datetimes: pd.Series, unit: str) -> pd.Series:
    '''
    Convert to Timestamp if possible, otherwise to datetime.datetime.
    SAS float64 lacks precision for more than ms resolution so the fit
    to datetime.datetime is ok.

    Parameters
    ----------
    sas_datetimes : {Series, Sequence[float]}
       Dates or datetimes in SAS
    unit : {\'d\', \'s\'}
       "d" if the floats represent dates, "s" for datetimes

    Returns
    -------
    Series
       Series of datetime64 dtype or datetime.datetime.
    '''

class _Column:
    def __init__(self, col_id: int, name: str | bytes, label: str | bytes, format: str | bytes, ctype: bytes, length: int) -> None: ...

class SAS7BDATReader(pandas.io.sas.sasreader.ReaderBase, collections.abc.Iterator):
    __abstractmethods__: ClassVar[frozenset] = ...
    _abc_impl: ClassVar[_abc._abc_data] = ...
    def __init__(self, path_or_buf: FilePath | ReadBuffer[bytes], index, convert_dates: bool = ..., blank_missing: bool = ..., chunksize: int | None, encoding: str | None, convert_text: bool = ..., convert_header_text: bool = ..., compression: CompressionOptions = ...) -> None: ...
    def column_data_lengths(self) -> np.ndarray:
        """Return a numpy int64 array of the column data lengths"""
    def column_data_offsets(self) -> np.ndarray:
        """Return a numpy int64 array of the column offsets"""
    def column_types(self) -> np.ndarray:
        """
        Returns a numpy character array of the column types:
           s (string) or d (double)
        """
    def close(self) -> None: ...
    def _get_properties(self) -> None: ...
    def __next__(self) -> DataFrame: ...
    def _read_float(self, offset: int, width: int): ...
    def _read_uint(self, offset: int, width: int) -> int: ...
    def _read_bytes(self, offset: int, length: int): ...
    def _read_and_convert_header_text(self, offset: int, length: int) -> str | bytes: ...
    def _parse_metadata(self) -> None: ...
    def _process_page_meta(self) -> bool: ...
    def _read_page_header(self) -> None: ...
    def _process_page_metadata(self) -> None: ...
    def _process_rowsize_subheader(self, offset: int, length: int) -> None: ...
    def _process_columnsize_subheader(self, offset: int, length: int) -> None: ...
    def _process_subheader_counts(self, offset: int, length: int) -> None: ...
    def _process_columntext_subheader(self, offset: int, length: int) -> None: ...
    def _process_columnname_subheader(self, offset: int, length: int) -> None: ...
    def _process_columnattributes_subheader(self, offset: int, length: int) -> None: ...
    def _process_columnlist_subheader(self, offset: int, length: int) -> None: ...
    def _process_format_subheader(self, offset: int, length: int) -> None: ...
    def read(self, nrows: int | None) -> DataFrame: ...
    def _read_next_page(self): ...
    def _chunk_to_dataframe(self) -> DataFrame: ...
    def _decode_string(self, b): ...
    def _convert_header_text(self, b: bytes) -> str | bytes: ...
