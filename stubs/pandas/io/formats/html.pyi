import pandas._libs.lib as lib
from pandas._config.config import get_option as get_option, option_context as option_context
from pandas.core.indexes.multi import MultiIndex as MultiIndex
from pandas.io.common import is_url as is_url
from pandas.io.formats.format import DataFrameFormatter as DataFrameFormatter, get_level_lengths as get_level_lengths
from pandas.io.formats.printing import pprint_thing as pprint_thing
from typing import Any, ClassVar

TYPE_CHECKING: bool

class HTMLFormatter:
    indent_delta: ClassVar[int] = ...
    def __init__(self, formatter: DataFrameFormatter, classes: str | list[str] | tuple[str, ...] | None, border: int | bool | None, table_id: str | None, render_links: bool = ...) -> None: ...
    def to_string(self) -> str: ...
    def render(self) -> list[str]: ...
    def _get_columns_formatted_values(self) -> Iterable: ...
    def write(self, s: Any, indent: int = ...) -> None: ...
    def write_th(self, s: Any, header: bool = ..., indent: int = ..., tags: str | None) -> None:
        """
        Method for writing a formatted <th> cell.

        If col_space is set on the formatter then that is used for
        the value of min-width.

        Parameters
        ----------
        s : object
            The data to be written inside the cell.
        header : bool, default False
            Set to True if the <th> is for use inside <thead>.  This will
            cause min-width to be set if there is one.
        indent : int, default 0
            The indentation level of the cell.
        tags : str, default None
            Tags to include in the cell.

        Returns
        -------
        A written <th> cell.
        """
    def write_td(self, s: Any, indent: int = ..., tags: str | None) -> None: ...
    def _write_cell(self, s: Any, kind: str = ..., indent: int = ..., tags: str | None) -> None: ...
    def write_tr(self, line: Iterable, indent: int = ..., indent_delta: int = ..., header: bool = ..., align: str | None, tags: dict[int, str] | None, nindex_levels: int = ...) -> None: ...
    def _write_table(self, indent: int = ...) -> None: ...
    def _write_col_header(self, indent: int) -> None: ...
    def _write_row_header(self, indent: int) -> None: ...
    def _write_header(self, indent: int) -> None: ...
    def _get_formatted_values(self) -> dict[int, list[str]]: ...
    def _write_body(self, indent: int) -> None: ...
    def _write_regular_rows(self, fmt_values: Mapping[int, list[str]], indent: int) -> None: ...
    def _write_hierarchical_rows(self, fmt_values: Mapping[int, list[str]], indent: int) -> None: ...
    @property
    def should_show_dimensions(self): ...
    @property
    def show_row_idx_names(self): ...
    @property
    def show_col_idx_names(self): ...
    @property
    def row_levels(self): ...
    @property
    def is_truncated(self): ...
    @property
    def ncols(self): ...

class NotebookFormatter(HTMLFormatter):
    def _get_formatted_values(self) -> dict[int, list[str]]: ...
    def _get_columns_formatted_values(self) -> list[str]: ...
    def write_style(self) -> None: ...
    def render(self) -> list[str]: ...
