import pandas.core.common as com
import pandas.core.dtypes.missing as missing
import pandas.io.formats.css
from _typeshed import Incomplete
from collections.abc import Hashable, Iterable, Mapping, Sequence
from pandas._libs.lib import is_float as is_float, is_list_like as is_list_like, is_scalar as is_scalar
from pandas.core.frame import DataFrame as DataFrame
from pandas.core.indexes.base import Index as Index
from pandas.core.indexes.multi import MultiIndex as MultiIndex
from pandas.core.indexes.period import PeriodIndex as PeriodIndex
from pandas.errors import CSSWarning as CSSWarning
from pandas.io.formats.css import CSSResolver as CSSResolver
from pandas.io.formats.format import get_level_lengths as get_level_lengths
from pandas.io.formats.printing import pprint_thing as pprint_thing
from pandas.util._decorators import doc as doc
from pandas.util._exceptions import find_stack_level as find_stack_level
from typing import Any, Callable, ClassVar

TYPE_CHECKING: bool
_shared_docs: dict
CSS4_COLORS: dict

class ExcelCell:
    __fields__: ClassVar[tuple] = ...
    col: Incomplete
    mergeend: Incomplete
    mergestart: Incomplete
    row: Incomplete
    style: Incomplete
    val: Incomplete
    def __init__(self, row: int, col: int, val, style, mergestart: int | None, mergeend: int | None) -> None: ...

class CssExcelCell(ExcelCell):
    def __init__(self, row: int, col: int, val, style: dict | None, css_styles: dict[tuple[int, int], list[tuple[str, Any]]] | None, css_row: int, css_col: int, css_converter: Callable | None, **kwargs) -> None: ...

class CSSToExcelConverter:
    NAMED_COLORS: ClassVar[dict] = ...
    VERTICAL_MAP: ClassVar[dict] = ...
    BOLD_MAP: ClassVar[dict] = ...
    ITALIC_MAP: ClassVar[dict] = ...
    FAMILY_MAP: ClassVar[dict] = ...
    BORDER_STYLE_MAP: ClassVar[dict] = ...
    compute_css: ClassVar[pandas.io.formats.css.CSSResolver] = ...
    def __init__(self, inherited: str | None) -> None: ...
    def __call__(self, declarations: str | frozenset[tuple[str, str]]) -> dict[str, dict[str, str]]:
        '''
        Convert CSS declarations to ExcelWriter style.

        Parameters
        ----------
        declarations : str | frozenset[tuple[str, str]]
            CSS string or set of CSS declaration tuples.
            e.g. "font-weight: bold; background: blue" or
            {("font-weight", "bold"), ("background", "blue")}

        Returns
        -------
        xlstyle : dict
            A style as interpreted by ExcelWriter when found in
            ExcelCell.style.
        '''
    def _call_uncached(self, declarations: str | frozenset[tuple[str, str]]) -> dict[str, dict[str, str]]: ...
    def build_xlstyle(self, props: Mapping[str, str]) -> dict[str, dict[str, str]]: ...
    def build_alignment(self, props: Mapping[str, str]) -> dict[str, bool | str | None]: ...
    def _get_vertical_alignment(self, props: Mapping[str, str]) -> str | None: ...
    def _get_is_wrap_text(self, props: Mapping[str, str]) -> bool | None: ...
    def build_border(self, props: Mapping[str, str]) -> dict[str, dict[str, str | None]]: ...
    def _border_style(self, style: str | None, width: str | None, color: str | None): ...
    def _get_width_name(self, width_input: str | None) -> str | None: ...
    def _width_to_float(self, width: str | None) -> float: ...
    def _pt_to_float(self, pt_string: str) -> float: ...
    def build_fill(self, props: Mapping[str, str]): ...
    def build_number_format(self, props: Mapping[str, str]) -> dict[str, str | None]: ...
    def build_font(self, props: Mapping[str, str]) -> dict[str, bool | float | str | None]: ...
    def _get_is_bold(self, props: Mapping[str, str]) -> bool | None: ...
    def _get_is_italic(self, props: Mapping[str, str]) -> bool | None: ...
    def _get_decoration(self, props: Mapping[str, str]) -> Sequence[str]: ...
    def _get_underline(self, decoration: Sequence[str]) -> str | None: ...
    def _get_shadow(self, props: Mapping[str, str]) -> bool | None: ...
    def _get_font_names(self, props: Mapping[str, str]) -> Sequence[str]: ...
    def _get_font_size(self, props: Mapping[str, str]) -> float | None: ...
    def _select_font_family(self, font_names: Sequence[str]) -> int | None: ...
    def color_to_excel(self, val: str | None) -> str | None: ...
    def _is_hex_color(self, color_string: str) -> bool: ...
    def _convert_hex_to_excel(self, color_string: str) -> str: ...
    def _is_shorthand_color(self, color_string: str) -> bool:
        """Check if color code is shorthand.

        #FFF is a shorthand as opposed to full #FFFFFF.
        """

class ExcelFormatter:
    max_rows: ClassVar[int] = ...
    max_cols: ClassVar[int] = ...
    def __init__(self, df, na_rep: str = ..., float_format: str | None, cols: Sequence[Hashable] | None, header: Sequence[Hashable] | bool = ..., index: bool = ..., index_label: IndexLabel | None, merge_cells: bool = ..., inf_rep: str = ..., style_converter: Callable | None) -> None: ...
    def _format_value(self, val): ...
    def _format_header_mi(self) -> Iterable[ExcelCell]: ...
    def _format_header_regular(self) -> Iterable[ExcelCell]: ...
    def _format_header(self) -> Iterable[ExcelCell]: ...
    def _format_body(self) -> Iterable[ExcelCell]: ...
    def _format_regular_rows(self) -> Iterable[ExcelCell]: ...
    def _format_hierarchical_rows(self) -> Iterable[ExcelCell]: ...
    def _generate_body(self, coloffset: int) -> Iterable[ExcelCell]: ...
    def get_formatted_cells(self) -> Iterable[ExcelCell]: ...
    def write(self, writer: FilePath | WriteExcelBuffer | ExcelWriter, sheet_name: str = ..., startrow: int = ..., startcol: int = ..., freeze_panes: tuple[int, int] | None, engine: str | None, storage_options: StorageOptions | None, engine_kwargs: dict | None) -> None:
        '''
        writer : path-like, file-like, or ExcelWriter object
            File path or existing ExcelWriter
        sheet_name : str, default \'Sheet1\'
            Name of sheet which will contain DataFrame
        startrow :
            upper left cell row to dump data frame
        startcol :
            upper left cell column to dump data frame
        freeze_panes : tuple of integer (length 2), default None
            Specifies the one-based bottommost row and rightmost column that
            is to be frozen
        engine : string, default None
            write engine to use if writer is a path - you can also set this
            via the options ``io.excel.xlsx.writer``,
            or ``io.excel.xlsm.writer``.

        storage_options : dict, optional
            Extra options that make sense for a particular storage connection, e.g.
            host, port, username, password, etc. For HTTP(S) URLs the key-value pairs
            are forwarded to ``urllib.request.Request`` as header options. For other
            URLs (e.g. starting with "s3://", and "gcs://") the key-value pairs are
            forwarded to ``fsspec.open``. Please see ``fsspec`` and ``urllib`` for more
            details, and for more examples on storage options refer `here
            <https://pandas.pydata.org/docs/user_guide/io.html?
            highlight=storage_options#reading-writing-remote-files>`_.

        engine_kwargs: dict, optional
            Arbitrary keyword arguments passed to excel engine.
        '''
    @property
    def header_style(self): ...
    @property
    def _has_aliases(self): ...
