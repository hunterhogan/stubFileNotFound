import np
import npt
import pandas._libs.writers as libwriters
from _typeshed import Incomplete
from collections.abc import Hashable, Iterable, Iterator, Sequence
from pandas._libs.properties import cache_readonly as cache_readonly
from pandas._typing import SequenceNotStr as SequenceNotStr
from pandas.core.dtypes.generic import ABCDatetimeIndex as ABCDatetimeIndex, ABCIndex as ABCIndex, ABCMultiIndex as ABCMultiIndex, ABCPeriodIndex as ABCPeriodIndex
from pandas.core.dtypes.missing import notna as notna
from pandas.core.indexes.base import Index as Index
from pandas.io.common import get_handle as get_handle

TYPE_CHECKING: bool
_DEFAULT_CHUNKSIZE_CELLS: int

class CSVFormatter:
    data_index: Incomplete
    def __init__(self, formatter: DataFrameFormatter, path_or_buf: FilePath | WriteBuffer[str] | WriteBuffer[bytes] = ..., sep: str = ..., cols: Sequence[Hashable] | None, index_label: IndexLabel | None, mode: str = ..., encoding: str | None, errors: str = ..., compression: CompressionOptions = ..., quoting: int | None, lineterminator: str | None = ..., chunksize: int | None, quotechar: str | None = ..., date_format: str | None, doublequote: bool = ..., escapechar: str | None, storage_options: StorageOptions | None) -> None: ...
    def _initialize_index_label(self, index_label: IndexLabel | None) -> IndexLabel: ...
    def _get_index_label_from_obj(self) -> Sequence[Hashable]: ...
    def _get_index_label_multiindex(self) -> Sequence[Hashable]: ...
    def _get_index_label_flat(self) -> Sequence[Hashable]: ...
    def _initialize_quotechar(self, quotechar: str | None) -> str | None: ...
    def _initialize_columns(self, cols: Iterable[Hashable] | None) -> npt.NDArray[np.object_]: ...
    def _initialize_chunksize(self, chunksize: int | None) -> int: ...
    def save(self) -> None:
        """
        Create the writer & save.
        """
    def _save(self) -> None: ...
    def _save_header(self) -> None: ...
    def _generate_multiindex_header_rows(self) -> Iterator[list[Hashable]]: ...
    def _save_body(self) -> None: ...
    def _save_chunk(self, start_i: int, end_i: int) -> None: ...
    @property
    def na_rep(self): ...
    @property
    def float_format(self): ...
    @property
    def decimal(self): ...
    @property
    def header(self): ...
    @property
    def index(self): ...
    @property
    def has_mi_columns(self): ...
    @property
    def _number_format(self): ...
    @property
    def nlevels(self): ...
    @property
    def _has_aliases(self): ...
    @property
    def _need_to_save_header(self): ...
    @property
    def write_cols(self): ...
    @property
    def encoded_labels(self): ...
